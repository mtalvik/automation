{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Avaleht","text":"IT automatiseerimine <p>\u00d5pime automatiseerima servereid ja rakendusi. Git'ist Kubernetes'eni.</p> Alusta \u00d5ppekava Discord <p>P\u00e4rast kursust oskad: - Git'iga meeskondades t\u00f6\u00f6tada - Docker'iga rakendusi pakendada - Ansible'iga servereid seadistada - CI/CD torujuhtmeid ehitada - Kubernetes'ega konteinereid k\u00e4itada - Terraform'iga infrastruktuuri kirjeldada</p>"},{"location":"#kuidas","title":"Kuidas","text":"<p>Iga n\u00e4dal praktikum + kodut\u00f6\u00f6. Ehitame p\u00e4ris asju.</p> <p>Vaja: Ubuntu, Git, Docker, VS Code. K\u00f5ik GitHub'is.</p>"},{"location":"#ajakava","title":"Ajakava","text":"<p>9: Git | 10-11: Docker | 12: Compose | 13-14: Ansible | 15: Rollid | 16-18: CI/CD | 19-20: Kubernetes | 21-22: Terraform</p>"},{"location":"#abi","title":"Abi","text":"<p>Discord</p>"},{"location":"curriculum/","title":"IT Automatiseerimise Kursuse \u00d5ppekava","text":"<p>** 8 Moodulit \u2022 24 Kontakttundi**</p>"},{"location":"curriculum/#kursuse-ulevaade","title":"Kursuse \u00dclevaade","text":"<p>Kaasaegse DevOps automatiseerimise praktikad ja t\u00f6\u00f6riistad. Kursus katab versioonihaldusest kuni orkestratsioonini - k\u00f5ik vajalik infrastruktuuri automatiseerimiseks.</p> <p>Kursuse eesm\u00e4rgid: - Praktiline kogemus olulisemate automatiseerimise t\u00f6\u00f6riistadega - Projektip\u00f5hine \u00f5ppimine reaalse infrastruktuuri n\u00e4idetel - T\u00f6\u00f6stuse standardid ja parimad praktikad - Iseseisev probleemilahendamine ja dokumenteerimine</p>"},{"location":"curriculum/#kursuse-struktuur","title":"Kursuse Struktuur","text":"Moodul Teema Kontakt Kodut\u00f6\u00f6 1 Kodut\u00f6\u00f6 2 1 Git Versioonihaldus 4h Git projekti portfoolio Git sisemused ja edasij\u00f5udnud kontseptsioonid 2 Ansible Alused 4h LAMP stack playbook (Vagrant) - 3 Docker Alused 4h S\u00fcsteemi monitoring dashboard - 4 Docker Orkestratsioon 4h Full-stack rakendus (4 teenust) 12-factor app anal\u00fc\u00fcs 5 Ansible Edasij\u00f5udnud Iseseisvad laborid Apache + Vault + Jinja2 - 6 Ansible Rollid Iseseisvad laborid Multi-tier infrastruktuur Ansible vs Puppet v\u00f5rdlus 7 Terraform Alused 2h Kohalik infrastruktuur Moodulid ja korduvkasutus 8 CI/CD + Kubernetes 2h Projekti l\u00f5petamine - <p>Kokku: 20h kontakt\u00f5pet + iseseisvad laborid + kodut\u00f6\u00f6d</p>"},{"location":"curriculum/#moodulite-detailsed-kirjeldused","title":"Moodulite Detailsed Kirjeldused","text":""},{"location":"curriculum/#1-git-versioonihaldus-4h","title":"1\ufe0f\u20e3 Git Versioonihaldus (4h)","text":"<p>\u00d5pieesm\u00e4rgid: - Versioonihalduse kontseptsioonid ja t\u00f6\u00f6voog - Meeskonnat\u00f6\u00f6 Git'iga (harude strateegia, merge conflicts) - GitHub t\u00f6\u00f6voog (Pull Requests, Issues, projektihaldus) - Edasij\u00f5udnud Git funktsioonid</p> <p>Praktilised teemad: - Git seadistamine ja SSH v\u00f5tmed - Repositooriumide loomine ja kloneerimine - Harude loomine, \u00fchendamine, konfliktide lahendamine - GitHub collaboration workflow - Git hooks ja submodules (boonus)</p> <p>Kodut\u00f6\u00f6d: - HW1: T\u00e4ielik Git projekti portfoolio harude t\u00f6\u00f6vooga - HW2: Git ajalugu, sisemused ja edasij\u00f5udnud kontseptsioonide lugemine</p>"},{"location":"curriculum/#2-ansible-alused-4h","title":"2\ufe0f\u20e3 Ansible Alused (4h)","text":"<p>\u00d5pieesm\u00e4rgid: - Ansible arhitektuur ja SSH p\u00f5hised automatiseerimise kontseptsioonid - Kohalik testimiskeskkond Vagrant'iga - Inventory haldamine ja ad-hoc k\u00e4sud - Esimeste playbook'ide loomine</p> <p>Praktilised teemad: - Ansible installatsioon ja SSH konfiguratsioon - Vagrant/VirtualBox testimiskeskkond - YAML s\u00fcntaks ja playbook struktuur - Moodulid: package, service, file, template - Veak\u00e4sitlus ja debug</p> <p>Kodut\u00f6\u00f6d: - HW1: LAMP Stack Playbook Vagrant keskkonnas (Apache, MySQL, PHP)</p>"},{"location":"curriculum/#3-docker-alused-4h","title":"3\ufe0f\u20e3 Docker Alused (4h)","text":"<p>\u00d5pieesm\u00e4rgid: - Konteineritehnoloogia m\u00f5istmine vs VM'id - Docker lifecycle ja CLI oskused - Dockerfile loomine ja optimeerimine - Volume'id, networking ja turvalisus</p> <p>Praktilised teemad: - Loeng 1 (2h): Docker installatsioon, p\u00f5hik\u00e4sud, lihtne Dockerfile - Loeng 2 (2h): Dockerfile optimeerimine, networking, Podman alternatiiv</p> <p>Detailsed teemad: - Container lifecycle (create, start, stop, remove) - Dockerfile best practices ja mitmeetapiline ehitus - Docker networking (bridge, host, none) - Volume'ide kasutamine andmete s\u00e4ilitamiseks - Podman vs Docker v\u00f5rdlus</p> <p>Kodut\u00f6\u00f6d: - HW1: S\u00fcsteemi oleku monitoring dashboard (Docker + Podman)</p>"},{"location":"curriculum/#4-docker-orkestratsioon-4h","title":"4\ufe0f\u20e3 Docker Orkestratsioon (4h)","text":"<p>\u00d5pieesm\u00e4rgid: - Mitme-konteineriga rakenduste orkestratsioon - Docker Compose s\u00fcntaks ja parimad praktikad - Keskkonnaspetsiifilised konfiguratsioonid - Service discovery ja networking</p> <p>Praktilised teemad: - Docker Compose YAML struktuur - Service'ide defineerimine ja s\u00f5ltuvused - Environment variables ja secrets - Volume'ide jagamine service'ide vahel - Load balancing ja health checks</p> <p>Kodut\u00f6\u00f6d: - HW1: Full-stack rakendus (frontend, backend, andmebaas, cache) - HW2: 12-factor app anal\u00fc\u00fcs - v\u00f5rdle oma projekti printsiipidega</p>"},{"location":"curriculum/#5-ansible-edasijoudnud-iseseisvad-laborid","title":"5\ufe0f\u20e3 Ansible Edasij\u00f5udnud (Iseseisvad Laborid)","text":"<p>\u00d5pieesm\u00e4rgid: - Edasij\u00f5udnud playbook struktuurid - Muutujad, Jinja2 mallid ja conditional logic - Ansible Vault saladuste turvaliseks haldamiseks - Error handling ja rollback strateegiad</p> <p>Iseseisvad laborid: - Labor 1: Muutujad ja Jinja2 mallide labor - Labor 2: Handlers ja error handling labor - Labor 3: Ansible Vault turvalisuse labor - Labor 4: Multi-environment deployment patterns</p> <p>Kodut\u00f6\u00f6d: - HW1: Apache veebiserver Vault'iga ja Jinja2 mallidega</p>"},{"location":"curriculum/#6-ansible-rollid-iseseisvad-laborid","title":"6\ufe0f\u20e3 Ansible Rollid (Iseseisvad Laborid)","text":"<p>\u00d5pieesm\u00e4rgid: - Ansible rollide struktuur ja parimad praktikad - Ansible Galaxy kogukonna rollide kasutamine - Multi-OS tugi ja input validation - Puppet vs Ansible konfiguratsiooni haldamise v\u00f5rdlus</p> <p>Iseseisvad laborid: - Labor 1: Vagrant testing environment setup - Labor 2: Role creation samm-sammuline juhend - Labor 3: Ansible Galaxy integration - Labor 4: Puppet fundamentals ja v\u00f5rdlusharjutus</p> <p>Kodut\u00f6\u00f6d: - HW1: Multi-tier infrastruktuur (veebiserver + andmebaas) - HW2: Ansible vs Puppet v\u00f5rdlev anal\u00fc\u00fcs - sama infrastruktuur m\u00f5lema t\u00f6\u00f6riistaga</p>"},{"location":"curriculum/#7-terraform-alused-2h","title":"7\ufe0f\u20e3 Terraform Alused (2h)","text":"<p>\u00d5pieesm\u00e4rgid: - Infrastructure as Code p\u00f5him\u00f5tted - HCL (HashiCorp Configuration Language) s\u00fcntaks - State'i haldamine ja lifecycle - Moodulid ja korduvkasutatavus</p> <p>Praktilised teemad: - Terraform installatsioon ja seadistamine - Kohalik provider (failis\u00fcsteemi haldamine) - Muutujad, outputs ja funktsioonid - Count ja for_each ts\u00fcklid - Moodulite loomine ja kasutamine</p> <p>Kodut\u00f6\u00f6d: - HW1: Terraform p\u00f5hit\u00f5ed - kohalik infrastruktuur muutujatega - HW2: Terraform moodulid ja korduvkasutus - projekti generaator</p>"},{"location":"curriculum/#8-cicd-kubernetes-2h","title":"8\ufe0f\u20e3 CI/CD + Kubernetes (2h)","text":"<p>\u00d5pieesm\u00e4rgid: - Ettev\u00f5tte-tasemel DevOps pipeline'id - Kubernetes p\u00f5hikontseptsioonid ja deployment'id - Turvalisus ja monitooring pipeline'ides - Projekti integratsioon ja dokumenteerimine</p> <p>Praktilised teemad: - CI/CD (1h): GitLab CI/CD, pipeline arhitektuur, turvaskaneerimine - Kubernetes (1h): Minikube, pod'id, deployment'id, service'id</p> <p>Detailsed teemad: - Multi-stage pipeline konfiguratsioon - Docker image optimeerimine ja turvaskaneerimine - Kubernetes objektid: ConfigMap, Secret, Health checks - Rolling updates ja service discovery</p> <p>Kodut\u00f6\u00f6d: - HW1: Projekti l\u00f5petamine ja professionaalne dokumenteerimine</p>"},{"location":"curriculum/#tehnilised-eeldused","title":"Tehnilised Eeldused","text":""},{"location":"curriculum/#tarkvara-nouded","title":"Tarkvara N\u00f5uded:","text":"<ul> <li>Git (versioonihaldus)</li> <li>Docker Desktop (konteinerid)</li> <li>VirtualBox/VMware (virtualisatsioon)</li> <li>Vagrant (VM haldamine)</li> <li>Ansible (konfiguratsiooni haldamine)</li> <li>Terraform (infrastruktuuri kood)</li> <li>kubectl + Minikube (Kubernetes)</li> </ul>"},{"location":"curriculum/#opsusteemi-tugi","title":"Ops\u00fcsteemi Tugi:","text":"<ul> <li>Windows: WSL2 + Docker Desktop</li> <li>macOS: Homebrew + Docker Desktop</li> <li>Linux: Native tools</li> </ul>"},{"location":"curriculum/#seadistamise-juhendid","title":"Seadistamise Juhendid:","text":"<ul> <li>Windows Setup Guide</li> <li>Linux/macOS Setup Guide</li> </ul>"},{"location":"curriculum/#failide-organisatsioon","title":"Failide Organisatsioon","text":""},{"location":"curriculum/#standardne-mooduli-struktuur","title":"Standardne Mooduli Struktuur:","text":"Text Only<pre><code>moodul_nimi/\n\u251c\u2500\u2500 lecture.md              # P\u00f5hiline loengumaterjal\n\u251c\u2500\u2500 lab.md                  # Praktilised harjutused ja laborid\n\u251c\u2500\u2500 homework.md             # Praktiline \u00fclesanne (HW1)\n\u2514\u2500\u2500 reading_materials.md    # Lugemismaterjalid (HW2)\n</code></pre>"},{"location":"curriculum/#erisused","title":"Erisused:","text":"<p>Docker (kaheks jaotatud): Text Only<pre><code>docker_fundamentals/\n\u251c\u2500\u2500 lecture1.md             # Docker alused - osa 1\n\u251c\u2500\u2500 lecture2.md             # Docker alused - osa 2\n\u251c\u2500\u2500 lab.md                  # Praktilised harjutused\n\u2514\u2500\u2500 homework.md             # Praktiline \u00fclesanne\n</code></pre></p> <p>Terraform (kaks kodut\u00f6\u00f6d): Text Only<pre><code>terraform_basics/\n\u251c\u2500\u2500 lecture.md              # Terraform loeng\n\u251c\u2500\u2500 lab.md                  # Praktilised harjutused  \n\u251c\u2500\u2500 homework1.md            # Terraform p\u00f5hit\u00f5ed\n\u251c\u2500\u2500 homework2.md            # Terraform moodulid\n\u2514\u2500\u2500 homework_aws_backup.md  # AWS backup (boonus)\n</code></pre></p> <p>Kubernetes + CI/CD (kaks laborit): Text Only<pre><code>kubernetes_overview/\n\u251c\u2500\u2500 lecture.md              # Kubernetes + CI/CD \u00fclevaade\n\u251c\u2500\u2500 lab1.md                 # Kubernetes labor - p\u00f5hialused\n\u251c\u2500\u2500 lab2.md                 # Kubernetes labor - intermediate\n\u2514\u2500\u2500 homework.md             # L\u00f5puprojekt\n</code></pre></p>"},{"location":"curriculum/#hindamise-susteem","title":"Hindamise S\u00fcsteem","text":""},{"location":"curriculum/#hindamise-kriteeriumid","title":"Hindamise Kriteeriumid:","text":"Komponent Osakaal Kirjeldus Praktilised \u00dclesanded 70% Kodut\u00f6\u00f6d ja laborid (tehniline korrektsus) Lugemismaterjalid 15% Anal\u00fc\u00fcsid ja reflektsioonid (m\u00f5istmine) L\u00f5puprojekt 10% K\u00f5igi t\u00f6\u00f6riistade integratsioon Osalus 5% Aktiivsus ja k\u00fcsimused"},{"location":"curriculum/#hindeskaalad","title":"Hindeskaalad:","text":"<ul> <li>A (90-100%): Erakordne t\u00f6\u00f6, innovatiivsed lahendused</li> <li>B (80-89%): Hea t\u00f6\u00f6, k\u00f5ik n\u00f5uded t\u00e4idetud</li> <li>C (70-79%): Rahuldav t\u00f6\u00f6, p\u00f5hin\u00f5uded t\u00e4idetud</li> <li>D (60-69%): N\u00f5rk t\u00f6\u00f6, osalised puudused</li> <li>F (&lt;60%): Mittearvestatud</li> </ul>"},{"location":"curriculum/#portfoolio-nouded","title":"Portfoolio N\u00f5uded:","text":"<ul> <li>GitHub repositoorium k\u00f5igi \u00fclesannetega</li> <li>README.md kursuse kokkuv\u00f5ttega</li> <li>Dokumenteeritud kood ja konfiguratsioonid</li> <li>Troubleshooting logi leitud probleemidest</li> </ul>"},{"location":"curriculum/#kursuse-tulemusnaitajad","title":"Kursuse Tulemusn\u00e4itajad","text":""},{"location":"curriculum/#tehnilised-oskused","title":"Tehnilised Oskused:","text":"<ul> <li>\u2705 Git workflow meeskonnat\u00f6\u00f6s</li> <li>\u2705 Ansible automation server konfiguratsioonideks</li> <li>\u2705 Docker containerization rakenduste jaoks</li> <li>\u2705 Infrastructure as Code Terraform'iga</li> <li>\u2705 CI/CD pipeline'id automaatseks deployment'iks</li> <li>\u2705 Kubernetes basics orkestratsiooniks</li> </ul>"},{"location":"curriculum/#praktiline-kogemus","title":"Praktiline Kogemus:","text":"<ul> <li>\u2705 Multi-tier rakenduste deployment</li> <li>\u2705 Turvalisuse parimad praktikad </li> <li>\u2705 Monitoring ja logging seadistamine</li> <li>\u2705 Troubleshooting ja veak\u00e4sitlus</li> <li>\u2705 Dokumenteerimine ja knowledge sharing</li> </ul>"},{"location":"curriculum/#karjaari-ettevalmistus","title":"Karj\u00e4\u00e4ri Ettevalmistus:","text":"<ul> <li>\u2705 DevOps Engineer positsioonideks</li> <li>\u2705 Cloud Infrastructure rollideks  </li> <li>\u2705 Site Reliability Engineer (SRE) oskusteks</li> <li>\u2705 Automation Specialist t\u00f6\u00f6deks</li> </ul>"},{"location":"ansible_advanced/homework/","title":"Deploy Web Server with Vault &amp; Templates","text":"<p>Eesm\u00e4rk: Apache serveri juurutamine Ansible Vault salajaste andmete ja Jinja2 mallide abil  </p> <p>Te saate valmis starter failid - fookus on Vault'i ja template'ide \u00f5ppimisel!</p>"},{"location":"ansible_advanced/homework/#1-projekt-secure-web-server-deployment","title":"1. Projekt: Secure Web Server Deployment","text":""},{"location":"ansible_advanced/homework/#mida-te-ehitate","title":"Mida te ehitate:","text":"<ul> <li>\ud83c\udf10 Apache web server d\u00fcnaamilise sisuga</li> <li>\ud83d\udd10 Vault-kr\u00fcptitud salajased andmed (paroolid, API v\u00f5tmed)</li> <li>\ud83d\udcc4 Jinja2 mallid d\u00fcnaamilise HTML genereerimiseks</li> <li>\ud83d\udd27 Teenuse k\u00e4sitlejad automaatsete taask\u00e4ivituste jaoks</li> <li>\ud83d\udcca S\u00fcsteemi teabe kuvamine serveri statistikaga</li> </ul>"},{"location":"ansible_advanced/homework/#mida-te-opite","title":"Mida te \u00f5pite:","text":"<ul> <li>Ansible Vault salajaste andmete haldamine</li> <li>Mallip\u00f5hine konfiguratsioon</li> <li>Teenuse haldamine k\u00e4sitlejate abil</li> <li>Turvaline identimisteabe haldamine</li> </ul>"},{"location":"ansible_advanced/homework/#2-setup-project","title":"2. Setup Project","text":""},{"location":"ansible_advanced/homework/#21-veebi-varade-hankimine-ja-automatiseerimisfailide-loomine","title":"2.1 Veebi varade hankimine ja automatiseerimisfailide loomine","text":"Bash<pre><code># Kodut\u00f6\u00f6 kataloogi loomine\nmkdir ~/ansible-advanced-homework\ncd ~/ansible-advanced-homework\n\n# Ainult veebi varade kloonimine (HTML mallid, CSS)\ngit clone https://github.com/[teacher-repo]/ansible-web-assets.git assets\ncp -r assets/templates assets/static .\nrm -rf assets/\n\n# Sinu git hoidla initsialiseerimine automatiseerimisfailide jaoks\ngit init\ngit remote add origin https://github.com/[your-username]/ansible-advanced-homework.git\n\n# Ansible struktuuri loomine\nmkdir group_vars\ntouch ansible.cfg inventory.yml site.yml README.md\n</code></pre>"},{"location":"ansible_advanced/homework/#22-automatiseerimise-konfiguratsiooni-loomine","title":"2.2 Automatiseerimise konfiguratsiooni loomine","text":"<p>Fail: <code>ansible.cfg</code>: INI<pre><code>[defaults]\ninventory = inventory.yml\nhost_key_checking = False\n</code></pre></p> <p>Fail: <code>inventory.yml</code>: YAML<pre><code>all:\n  hosts:\n    webserver:\n      ansible_host: localhost\n      ansible_connection: local\n  vars:\n    server_name: \"my-web-server\"\n    admin_email: \"admin@example.com\"\n</code></pre></p>"},{"location":"ansible_advanced/homework/#23-esimene-commit-ainult-automatiseerimisfailid","title":"2.3 Esimene commit (ainult automatiseerimisfailid)","text":"Bash<pre><code># Lisa loodud automatiseerimisfailid\ngit add ansible.cfg inventory.yml templates/ static/\ngit commit -m \"Loodud Ansible konfiguratsioon + lisatud veebi varad\"\n</code></pre>"},{"location":"ansible_advanced/homework/#3-create-vault-file","title":"3. Create Vault File","text":""},{"location":"ansible_advanced/homework/#31-vaulti-loomise-oppimine","title":"3.1 Vault'i loomise \u00f5ppimine","text":"Bash<pre><code># Kr\u00fcptitud vault faili loomine\nansible-vault create group_vars/vault.yml\n# Parooli k\u00fcsimisel kasuta: vault123\n</code></pre>"},{"location":"ansible_advanced/homework/#32-salajaste-andmete-lisamine-vaulti-kirjuta-need","title":"3.2 Salajaste andmete lisamine vault'i (KIRJUTA NEED!)","text":"YAML<pre><code># Lisa need salajased andmed oma vault faili:\nvault_mysql_password: \"mysql_secret_123\"\nvault_admin_password: \"admin_secret_456\"\nvault_website_title: \"Minu Turvaline Veebiserver\"\nvault_api_key: \"api-key-12345-secret\"\nvault_student_name: \"Sinu Nimi Siin\"\n</code></pre>"},{"location":"ansible_advanced/homework/#33-vaulti-operatsioonide-testimine","title":"3.3 Vault'i operatsioonide testimine","text":"Bash<pre><code># Vaata oma kr\u00fcptitud vault faili\ncat group_vars/vault.yml\n# Peaks n\u00e4itama kr\u00fcptitud sisu\n\n# Vaata vault'i sisu (dekr\u00fcpteeri kontrollimiseks)\nansible-vault view group_vars/vault.yml\n# Parool: vault123\n\n# Redigeeri vault faili vajadusel\nansible-vault edit group_vars/vault.yml\n</code></pre>"},{"location":"ansible_advanced/homework/#34-vaulti-loomise-commit","title":"3.4 Vault'i loomise commit","text":"Bash<pre><code>git add group_vars/vault.yml\ngit commit -m \"Loodud kr\u00fcptitud vault salajaste andmetega\"\n</code></pre>"},{"location":"ansible_advanced/homework/#4-create-playbook","title":"4. Create Playbook","text":""},{"location":"ansible_advanced/homework/#41-peamise-playbooki-kirjutamine","title":"4.1 Peamise playbook'i kirjutamine","text":"<p>Fail: <code>site.yml</code>: YAML<pre><code>---\n- name: \"Web server with Vault and Templates\"\n  hosts: all\n  become: yes\n  vars:\n    web_root: \"/var/www/html\"\n    service_name: \"apache2\"\n\n  tasks:\n    - name: \"Install Apache web server\"\n      package:\n        name: \"{{ service_name }}\"\n        state: present\n      notify: \"start apache\"\n\n    - name: \"Create web directory\"\n      file:\n        path: \"{{ web_root }}\"\n        state: directory\n        mode: '0755'\n\n    - name: \"Generate HTML page from template\"\n      template:\n        src: index.html.j2\n        dest: \"{{ web_root }}/index.html\"\n        mode: '0644'\n      notify: \"restart apache\"\n\n    - name: \"Create server info file\"\n      copy:\n        content: |\n          Server: {{ ansible_hostname }}\n          Student: {{ vault_student_name }}\n          MySQL Password Length: {{ vault_mysql_password | length }}\n          Generated: {{ ansible_date_time.iso8601 }}\n        dest: \"{{ web_root }}/server-info.txt\"\n        mode: '0644'\n\n    - name: \"Ensure Apache is running\"\n      service:\n        name: \"{{ service_name }}\"\n        state: started\n        enabled: yes\n\n  handlers:\n    - name: \"start apache\"\n      service:\n        name: \"{{ service_name }}\"\n        state: started\n\n    - name: \"restart apache\"\n      service:\n        name: \"{{ service_name }}\"\n        state: restarted\n</code></pre></p>"},{"location":"ansible_advanced/homework/#42-playbooki-testimine","title":"4.2 Playbook'i testimine","text":"Bash<pre><code># Kontrolli s\u00fcntaksit (oluline!)\nansible-playbook --syntax-check site.yml\n\n# Kuiv jooks esmalt\nansible-playbook --check site.yml --ask-vault-pass\n# Parool: vault123\n\n# Juurutamine p\u00e4riselt\nansible-playbook site.yml --ask-vault-pass\n</code></pre>"},{"location":"ansible_advanced/homework/#43-juurutamise-kontrollimine","title":"4.3 Juurutamise kontrollimine","text":"Bash<pre><code># Kontrolli, kas Apache t\u00f6\u00f6tab\nsudo systemctl status apache2\n\n# Testi veebiserverit\ncurl http://localhost\n\n# Kontrolli genereeritud faile\ncat /var/www/html/index.html | head -10\ncat /var/www/html/server-info.txt\n\n# Ava brauseris\necho \"Ava brauser: http://localhost\"\n</code></pre>"},{"location":"ansible_advanced/homework/#44-playbooki-loomise-commit","title":"4.4 Playbook'i loomise commit","text":"Bash<pre><code>git add site.yml\ngit commit -m \"Loodud t\u00e4ielik playbook vault'i ja mallidega\"\n</code></pre>"},{"location":"ansible_advanced/homework/#5-test-vault-and-handler-operations","title":"5. Test Vault and Handler Operations","text":""},{"location":"ansible_advanced/homework/#51-vaulti-operatsioonide-testimine","title":"5.1 Vault'i operatsioonide testimine","text":"Bash<pre><code># Kontrolli praegust vault'i sisu\nansible-vault view group_vars/vault.yml\n\n# Muuda vault'i salajast andmet\nansible-vault edit group_vars/vault.yml\n# Muuda vault_website_title v\u00e4\u00e4rtuseks \"Minu Uuendatud Sait - [Sinu Nimi]\"\n\n# Juuruta uue salajase andmega\nansible-playbook site.yml --ask-vault-pass\n\n# Kontrolli muudatust brauseris\ncurl http://localhost | grep \"Minu Uuendatud Sait\"\n</code></pre>"},{"location":"ansible_advanced/homework/#52-kasitleja-funktsionaalsuse-testimine","title":"5.2 K\u00e4sitleja funktsionaalsuse testimine","text":"Bash<pre><code># Tee mallis muudatus (k\u00e4ivitab k\u00e4sitleja)\necho \"&lt;!-- Muudetud $(date) --&gt;\" &gt;&gt; templates/index.html.j2\n\n# Juuruta ja j\u00e4lgi k\u00e4sitleja k\u00e4ivitamist\nansible-playbook site.yml --ask-vault-pass -v\n# Peaks n\u00e4gema \"restart apache\" k\u00e4sitleja k\u00e4ivitamist\n\n# Kontrolli Apache taask\u00e4ivitumist\nsudo systemctl status apache2 | grep \"Active since\"\n</code></pre>"},{"location":"ansible_advanced/homework/#53-playbooki-funktsioonide-testimine","title":"5.3 Playbook'i funktsioonide testimine","text":"Bash<pre><code># K\u00e4ivita ainult kindlad \u00fclesanded siltidega (kui saadaval)\nansible-playbook site.yml --ask-vault-pass --list-tasks\n\n# K\u00e4ivita kontrollire\u017eiimis (kuiv jooks)\nansible-playbook site.yml --ask-vault-pass --check\n\n# K\u00e4ivita t\u00e4iendava \u00fcksikasjalikkusega\nansible-playbook site.yml --ask-vault-pass -vv\n</code></pre>"},{"location":"ansible_advanced/homework/#54-operatsionaalse-testimise-commit","title":"5.4 Operatsionaalse testimise commit","text":"Bash<pre><code>git add .\ngit commit -m \"Testitud vault'i operatsioone ja k\u00e4sitleja funktsionaalsust\"\ngit push origin main\n</code></pre>"},{"location":"ansible_advanced/homework/#6-final-documentation-and-evidence","title":"6. Final Documentation and Evidence","text":""},{"location":"ansible_advanced/homework/#61-readmemd-uuendamine","title":"6.1 README.md uuendamine","text":"<p>T\u00e4ida <code>README.md</code> mall: Markdown<pre><code># Ansible Kodut\u00f6\u00f6 - Vault ja Mallid\n\n## Mida ma ehitasin\n- Apache veebiserver d\u00fcnaamilise sisuga\n- Kr\u00fcptitud vault salajased andmed turvalise identimisteabe salvestamiseks\n- Jinja2 mallid d\u00fcnaamilise HTML genereerimiseks\n- Teenuse k\u00e4sitlejad automaatsete taask\u00e4ivituste jaoks\n\n## Juurutamise k\u00e4sud\n```bash\n# Klooni ja juuruta\ngit clone [repository-url]\ncd ansible-advanced-homework\nansible-playbook site.yml --ask-vault-pass\n# Vault parool: vault123\n</code></pre></p>"},{"location":"ansible_advanced/homework/#tootavad-tulemused","title":"T\u00f6\u00f6tavad tulemused","text":"<ul> <li>Veebiserver: http://localhost</li> <li>N\u00e4itab kr\u00fcptitud vault andmeid turvaliselt</li> <li>Mall genereerib d\u00fcnaamilist sisu</li> <li>K\u00e4sitlejad taask\u00e4ivitavad teenused muudatuste korral</li> </ul>"},{"location":"ansible_advanced/homework/#mida-ma-oppisin","title":"Mida ma \u00f5ppisin","text":"<ul> <li>Ansible Vault kr\u00fcptib tundlikke andmeid</li> <li>Jinja2 mallid loovad d\u00fcnaamilisi konfiguratsioone</li> <li>K\u00e4sitlejad k\u00e4ivituvad ainult muudatuste korral</li> <li>Vault paroolid kaitsevad salajasi andmeid git hoidlates</li> </ul>"},{"location":"ansible_advanced/homework/#toendid","title":"T\u00f5endid","text":"<ul> <li>Ekraanipildid <code>screenshots/</code> kaustas</li> <li>T\u00f6\u00f6tav veebiserver demonstreeritav</li> <li>Git ajalugu n\u00e4itab arengut Text Only<pre><code>### 6.2 Tee ekraanipildid\n\n**Vajalikud ekraanipildid:**\n1. **Vault'i sisu**: `ansible-vault view group_vars/vault.yml`\n2. **Juurutatud veebisait**: Brauser n\u00e4itab http://localhost\n3. **Apache olek**: `sudo systemctl status apache2`\n4. **Mall tegevuses**: N\u00e4ita d\u00fcnaamilist sisu sinu kohandustega\n\n### 6.3 L\u00f5plik commit ja push\n\n```bash\n# L\u00f5plik dokumentatsiooni commit\ngit add README.md screenshots/\ngit commit -m \"L\u00f5plik dokumentatsioon - N\u00e4dal 13 kodut\u00f6\u00f6 valmis\"\n\n# Push GitHub'i\ngit push origin main\n\n# Loo puhas hoidla struktuur\nmkdir -p docs/evidence docs/automation\nmv ansible.cfg inventory.yml site.yml group_vars/ docs/automation/\nmv templates/ static/ docs/automation/\nmv screenshots/ docs/evidence/\n\n# L\u00f5plik organiseeritud commit\ngit add docs/\ngit commit -m \"Kodut\u00f6\u00f6 organiseeritud \u00f5igesse struktuuri\"\ngit push origin main\n</code></pre></li> </ul>"},{"location":"ansible_advanced/homework/#7-repository-submission-requirements","title":"7. Repository Submission Requirements","text":""},{"location":"ansible_advanced/homework/#hoidla-struktuur-peab-sisaldama","title":"Hoidla struktuur peab sisaldama:","text":"Text Only<pre><code>ansible-advanced-homework/\n\u251c\u2500\u2500 README.md                          # T\u00e4ielik dokumentatsioon\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 automation/                    # SINU automatiseerimisfailid\n\u2502   \u2502   \u251c\u2500\u2500 ansible.cfg\n\u2502   \u2502   \u251c\u2500\u2500 inventory.yml  \n\u2502   \u2502   \u251c\u2500\u2500 site.yml\n\u2502   \u2502   \u251c\u2500\u2500 group_vars/vault.yml\n\u2502   \u2502   \u2514\u2500\u2500 templates/\n\u2502   \u2514\u2500\u2500 evidence/                      # T\u00f6\u00f6 t\u00f5endid\n\u2502       \u251c\u2500\u2500 screenshots/\n\u2502       \u2502   \u251c\u2500\u2500 vault-contents.png\n\u2502       \u2502   \u251c\u2500\u2500 website-working.png\n\u2502       \u2502   \u2514\u2500\u2500 apache-status.png\n\u2502       \u2514\u2500\u2500 deployment-log.txt\n\u2514\u2500\u2500 .gitignore\n</code></pre>"},{"location":"ansible_advanced/homework/#esitamise-meetod","title":"Esitamise meetod:","text":"<ol> <li>GitHub hoidla link esitatud kursuse s\u00fcsteemis</li> <li>Hoidla peab olema avalik \u00fclevaatamiseks</li> <li>Selge esitlus - puhas, organiseeritud, dokumenteeritud</li> <li>T\u00f6\u00f6tav demonstreerimine - \u00f5petaja saab kloonida ja juurutada</li> </ol>"},{"location":"ansible_advanced/lab/","title":"Ansible Advanced Lab: Template-based Configuration","text":"<p>Eesm\u00e4rk: \u00d5ppida Ansible'i t\u00e4psemaid funktsioone ja luua d\u00fcnaamilisi konfiguratsioone</p>"},{"location":"ansible_advanced/lab/#opivaljundid","title":"\u00d5piv\u00e4ljundid","text":"<p>P\u00e4rast laborit oskate: - D\u00fcnaamilised konfiguratsioonid Jinja2 template'itega - Muutujate hierarhia m\u00f5istmine ja kasutamine - Handler'ite kasutamise oskus - Ansible Vault kr\u00fcpteerimise oskus - T\u00f6\u00f6korras LAMP stack vault'iga</p>"},{"location":"ansible_advanced/lab/#1-advanced-variables-setup","title":"1. Advanced Variables Setup","text":""},{"location":"ansible_advanced/lab/#11-projekti-struktuuri-loomine-organiseeritud-struktuur","title":"1.1 Projekti struktuuri loomine - Organiseeritud struktuur","text":"<p>Miks struktureeritud projekt: - Suuremad projektid vajavad selget organisatsiooni - Erinevad keskkonnad (dev, staging, prod) vajavad erinevaid seadistusi - Team collaboration on lihtsam struktuuriga</p> <p>Loome professionaalse struktuuri sammhaaval:</p>"},{"location":"ansible_advanced/lab/#111-looge-peakaust","title":"1.1.1 Looge peakaust","text":"Bash<pre><code>mkdir -p ~/ansible-advanced\ncd ~/ansible-advanced\n</code></pre>"},{"location":"ansible_advanced/lab/#112-looge-koik-vajalikud-kaustad","title":"1.1.2 Looge k\u00f5ik vajalikud kaustad","text":"Bash<pre><code># P\u00f5histruktuur\nmkdir -p {inventory,group_vars,host_vars,roles,playbooks,templates,files}\n\n# Group variables struktuuri\nmkdir -p group_vars/{all,webservers,dbservers}\n\n# Host-spetsiifilised muutujad\nmkdir -p host_vars/{web1,web2,db1}\n</code></pre>"},{"location":"ansible_advanced/lab/#113-kontrollige-struktuuri","title":"1.1.3 Kontrollige struktuuri","text":"Bash<pre><code>tree .  # v\u00f5i ls -la kui tree ei ole installitud\n</code></pre> <p>Peaks n\u00e4itama: Text Only<pre><code>.\n\u251c\u2500\u2500 files/\n\u251c\u2500\u2500 group_vars/\n\u2502   \u251c\u2500\u2500 all/\n\u2502   \u251c\u2500\u2500 dbservers/\n\u2502   \u2514\u2500\u2500 webservers/\n\u251c\u2500\u2500 host_vars/\n\u2502   \u251c\u2500\u2500 db1/\n\u2502   \u251c\u2500\u2500 web1/\n\u2502   \u2514\u2500\u2500 web2/\n\u251c\u2500\u2500 inventory/\n\u251c\u2500\u2500 playbooks/\n\u251c\u2500\u2500 roles/\n\u2514\u2500\u2500 templates/\n</code></pre></p>"},{"location":"ansible_advanced/lab/#12-inventory-seadistamine-serverite-hierarhia","title":"1.2 Inventory seadistamine - Serverite hierarhia","text":"<p>M\u00f5istame inventory struktuuri: - Groups - serverite grupid (webservers, dbservers) - Children - gruppide hierarhia - Vars - grupi-spetsiifilised muutujad</p> <p>Loome inventory faili sammhaaval:</p>"},{"location":"ansible_advanced/lab/#121-looge-pohi-inventory-fail","title":"1.2.1 Looge p\u00f5hi inventory fail","text":"Bash<pre><code>touch inventory/hosts.yml\nnano inventory/hosts.yml\n</code></pre>"},{"location":"ansible_advanced/lab/#122-lisage-server-gruppid","title":"1.2.2 Lisage server gruppid","text":"YAML<pre><code>all:\n  children:\n    webservers:\n      hosts:\n        web1:\n          ansible_host: localhost\n          ansible_connection: local\n          server_id: 1\n          server_role: primary\n        web2:\n          ansible_host: localhost\n          ansible_connection: local\n          server_id: 2\n          server_role: secondary\n</code></pre>"},{"location":"ansible_advanced/lab/#123-lisage-group-variables","title":"1.2.3 Lisage group variables","text":"YAML<pre><code>      vars:\n        http_port: 80\n        https_port: 443\n        web_root: \"/var/www/html\"\n</code></pre>"},{"location":"ansible_advanced/lab/#124-lisage-database-serverid","title":"1.2.4 Lisage database serverid","text":"YAML<pre><code>    dbservers:\n      hosts:\n        db1:\n          ansible_host: localhost\n          ansible_connection: local\n          mysql_server_id: 1\n          mysql_role: master\n      vars:\n        mysql_port: 3306\n        mysql_data_dir: \"/var/lib/mysql\"\n</code></pre>"},{"location":"ansible_advanced/lab/#125-lisage-keskkonna-grupid","title":"1.2.5 Lisage keskkonna grupid","text":"YAML<pre><code>    development:\n      children:\n        webservers:\n        dbservers:\n      vars:\n        app_env: \"development\"\n        debug_mode: true\n        ssl_enabled: false\n\n    production:\n      children:\n        webservers:\n        dbservers:\n      vars:\n        app_env: \"production\"\n        debug_mode: false\n        ssl_enabled: true\n</code></pre> <p>M\u00f5elge: Miks on kasulik grupeerida servereid nii rolli kui keskkonna j\u00e4rgi?</p>"},{"location":"ansible_advanced/lab/#13-variables-hierarchy-loomine","title":"1.3 Variables hierarchy loomine","text":"<p>Loome muutujate hierarhia sammhaaval:</p>"},{"location":"ansible_advanced/lab/#131-globaalsed-muutujad-group_varsallvarsyml","title":"1.3.1 Globaalsed muutujad (group_vars/all/vars.yml)","text":"Bash<pre><code>touch group_vars/all/vars.yml\nnano group_vars/all/vars.yml\n</code></pre> YAML<pre><code># K\u00f5ikidele serveritele \u00fchised seadistused\napp_name: \"advanced-lamp\"\napp_version: \"1.0.0\"\nadmin_email: \"admin@company.com\"\n\n# OS-spetsiifilised paketid (d\u00fcnaamilised)\napache_package: \"{% if ansible_os_family == 'Debian' %}apache2{% else %}httpd{% endif %}\"\nmysql_package: \"{% if ansible_os_family == 'Debian' %}mysql-server{% else %}mariadb-server{% endif %}\"\n\n# Keskkonna s\u00f5ltuvad seadistused\nbackup_enabled: \"{{ app_env == 'production' }}\"\nmonitoring_enabled: \"{{ app_env == 'production' }}\"\nlog_level: \"{% if debug_mode %}DEBUG{% else %}INFO{% endif %}\"\n</code></pre>"},{"location":"ansible_advanced/lab/#132-webserverite-muutujad-group_varswebserversvarsyml","title":"1.3.2 Webserverite muutujad (group_vars/webservers/vars.yml)","text":"Bash<pre><code>touch group_vars/webservers/vars.yml\nnano group_vars/webservers/vars.yml\n</code></pre> YAML<pre><code># Apache/Nginx seadistused\nmax_workers: \"{{ ansible_processor_vcpus * 2 }}\"\nmax_connections: 1000\nkeepalive_timeout: 65\n\n# PHP seadistused\nphp_version: \"7.4\"\nphp_memory_limit: \"{% if ansible_memtotal_mb &gt; 4096 %}512M{% else %}256M{% endif %}\"\nphp_max_execution_time: 30\n\n# Virtual hosts\nvirtual_hosts:\n  - name: \"{{ app_name }}.local\"\n    document_root: \"{{ web_root }}/{{ app_name }}\"\n    ssl_enabled: \"{{ ssl_enabled }}\"\n  - name: \"api.{{ app_name }}.local\"\n    document_root: \"{{ web_root }}/api\"\n    ssl_enabled: \"{{ ssl_enabled }}\"\n</code></pre>"},{"location":"ansible_advanced/lab/#133-database-serverite-muutujad-group_varsdbserversvarsyml","title":"1.3.3 Database serverite muutujad (group_vars/dbservers/vars.yml)","text":"Bash<pre><code>touch group_vars/dbservers/vars.yml\nnano group_vars/dbservers/vars.yml\n</code></pre> YAML<pre><code># MySQL konfigureerimine\nmysql_root_user: \"root\"\nmysql_bind_address: \"127.0.0.1\"\nmysql_max_connections: 100\n\n# D\u00fcnaamiline buffer pool arvutamine\nmysql_innodb_buffer_pool_size: \"{{ (ansible_memtotal_mb * 0.7) | int }}M\"\n\n# Andmebaasid\nmysql_databases:\n  - name: \"{{ app_name }}_{{ app_env }}\"\n    encoding: \"utf8mb4\"\n    collation: \"utf8mb4_unicode_ci\"\n\nmysql_users:\n  - name: \"{{ app_name }}_user\"\n    host: \"localhost\"\n    priv: \"{{ app_name }}_{{ app_env }}.*:ALL\"\n    # Parool tuleb vault'ist\n</code></pre> <p>M\u00e4rkused: - Kasutame Jinja2 loogikat d\u00fcnaamilisteks v\u00e4\u00e4rtusteks - Serverite v\u00f5imsus m\u00f5jutab konfiguratsiooni - Keskkond m\u00e4\u00e4rab turvalisuse taseme</p>"},{"location":"ansible_advanced/lab/#2-jinja2-templateite-loomine","title":"2. Jinja2 Template'ite loomine","text":""},{"location":"ansible_advanced/lab/#21-apache-virtual-host-template-dunaamiline-konfiguratsioon","title":"2.1 Apache virtual host template - D\u00fcnaamiline konfiguratsioon","text":"<p>Miks template'id on olulised: - \u00dcks template, mitu erinevat konfiguratsiooni - Automaatne kohandamine serverite j\u00e4rgi - V\u00e4hendab konfiguratsioonivigu</p> <p>Loome Apache virtual host template'i sammhaaval:</p>"},{"location":"ansible_advanced/lab/#211-looge-template-fail","title":"2.1.1 Looge template fail","text":"Bash<pre><code>touch templates/apache_vhost.conf.j2\nnano templates/apache_vhost.conf.j2\n</code></pre>"},{"location":"ansible_advanced/lab/#212-alustage-pohistruktuuriga","title":"2.1.2 Alustage p\u00f5histruktuuriga","text":"ApacheConf<pre><code># {{ ansible_managed }}\n# Virtual Host for {{ item.name }}\n# Generated on {{ ansible_date_time.iso8601 }}\n\n&lt;VirtualHost *:{{ http_port }}&gt;\n    ServerName {{ item.name }}\n    DocumentRoot {{ item.document_root }}\n</code></pre>"},{"location":"ansible_advanced/lab/#213-lisage-conditionals","title":"2.1.3 Lisage conditionals","text":"ApacheConf<pre><code>    # Logging configuration\n    {% if debug_mode %}\n    LogLevel debug\n    {% else %}\n    LogLevel warn\n    {% endif %}\n\n    ErrorLog ${APACHE_LOG_DIR}/{{ item.name }}_error.log\n    CustomLog ${APACHE_LOG_DIR}/{{ item.name }}_access.log combined\n</code></pre>"},{"location":"ansible_advanced/lab/#214-lisage-keskkonna-spetsiifilised-seadistused","title":"2.1.4 Lisage keskkonna-spetsiifilised seadistused","text":"ApacheConf<pre><code>    &lt;Directory {{ item.document_root }}&gt;\n        Options Indexes FollowSymLinks\n        AllowOverride All\n        Require all granted\n\n        {% if app_env == 'production' %}\n        # Production security headers\n        Header always set X-Frame-Options DENY\n        Header always set X-Content-Type-Options nosniff\n        Header always set X-XSS-Protection \"1; mode=block\"\n        {% endif %}\n    &lt;/Directory&gt;\n&lt;/VirtualHost&gt;\n</code></pre>"},{"location":"ansible_advanced/lab/#215-lisage-ssl-support-conditional","title":"2.1.5 Lisage SSL support (conditional)","text":"ApacheConf<pre><code>{% if item.ssl_enabled and ssl_enabled %}\n# SSL Virtual Host\n&lt;VirtualHost *:{{ https_port }}&gt;\n    ServerName {{ item.name }}\n    DocumentRoot {{ item.document_root }}\n\n    # SSL Configuration\n    SSLEngine on\n    SSLProtocol TLSv1.2 TLSv1.3\n\n    # SSL Certificates (will come from vault)\n    SSLCertificateFile {{ ssl_cert_path | default('/etc/ssl/certs/server.crt') }}\n    SSLCertificateKeyFile {{ ssl_key_path | default('/etc/ssl/private/server.key') }}\n&lt;/VirtualHost&gt;\n{% endif %}\n</code></pre> <p>\ud83e\udd14 Anal\u00fc\u00fcs: Kuidas template aitab hallata erinevaid keskkondi (dev vs prod)?</p>"},{"location":"ansible_advanced/lab/#22-mysql-konfiguratsioon-template","title":"2.2 MySQL konfiguratsioon template","text":"<p>Loome MySQL template'i sammhaaval:</p>"},{"location":"ansible_advanced/lab/#221-looge-mysql-template","title":"2.2.1 Looge MySQL template","text":"Bash<pre><code>touch templates/mysql.cnf.j2\nnano templates/mysql.cnf.j2\n</code></pre>"},{"location":"ansible_advanced/lab/#222-lisage-dunaamiline-konfiguratsioon","title":"2.2.2 Lisage d\u00fcnaamiline konfiguratsioon","text":"INI<pre><code># {{ ansible_managed }}\n# MySQL Configuration for {{ inventory_hostname }}\n# Environment: {{ app_env }}\n\n[mysqld]\n# Basic settings\nport = {{ mysql_port }}\nbind-address = {{ mysql_bind_address }}\n\n# Performance tuning based on available memory\ninnodb_buffer_pool_size = {{ mysql_innodb_buffer_pool_size }}\nmax_connections = {{ mysql_max_connections }}\n\n# Environment-specific settings\n{% if app_env == 'production' %}\n# Production optimizations\ninnodb_flush_log_at_trx_commit = 1\nsync_binlog = 1\n{% else %}\n# Development settings (faster but less safe)\ninnodb_flush_log_at_trx_commit = 2\nsync_binlog = 0\n{% endif %}\n\n# Logging\n{% if debug_mode %}\ngeneral_log = 1\ngeneral_log_file = /var/log/mysql/general.log\nslow_query_log = 1\nslow_query_log_file = /var/log/mysql/slow.log\nlong_query_time = 1\n{% endif %}\n</code></pre>"},{"location":"ansible_advanced/lab/#23-php-konfiguratsioon-template","title":"2.3 PHP konfiguratsioon template","text":"<p>Looge PHP-FPM template:</p>"},{"location":"ansible_advanced/lab/#231-looge-php-template","title":"2.3.1 Looge PHP template","text":"Bash<pre><code>touch templates/php-fpm.conf.j2\nnano templates/php-fpm.conf.j2\n</code></pre>"},{"location":"ansible_advanced/lab/#232-lisage-dunaamilised-seadistused","title":"2.3.2 Lisage d\u00fcnaamilised seadistused","text":"INI<pre><code># {{ ansible_managed }}\n# PHP-FPM pool configuration\n\n[{{ app_name }}]\nuser = www-data\ngroup = www-data\n\nlisten = /var/run/php/php{{ php_version }}-fpm-{{ app_name }}.sock\nlisten.owner = www-data\nlisten.group = www-data\nlisten.mode = 0660\n\n# Process management\npm = dynamic\npm.max_children = {{ ansible_processor_vcpus * 4 }}\npm.start_servers = {{ ansible_processor_vcpus }}\npm.min_spare_servers = {{ ansible_processor_vcpus }}\npm.max_spare_servers = {{ ansible_processor_vcpus * 2 }}\n\n# PHP settings\nphp_admin_value[memory_limit] = {{ php_memory_limit }}\nphp_admin_value[max_execution_time] = {{ php_max_execution_time }}\nphp_admin_value[upload_max_filesize] = 32M\nphp_admin_value[post_max_size] = 32M\n\n{% if app_env == 'development' %}\n# Development settings\nphp_admin_flag[display_errors] = on\nphp_admin_value[error_reporting] = E_ALL\n{% else %}\n# Production settings\nphp_admin_flag[display_errors] = off\nphp_admin_value[error_reporting] = E_ERROR\n{% endif %}\n</code></pre>"},{"location":"ansible_advanced/lab/#3-handlers-ja-advanced-playbook","title":"3. Handlers ja Advanced Playbook","text":""},{"location":"ansible_advanced/lab/#31-playbook-handlersitega","title":"3.1 Playbook handlers'itega","text":"<p>Loome t\u00e4iustatud playbook'i sammhaaval:</p>"},{"location":"ansible_advanced/lab/#311-looge-pohi-playbook","title":"3.1.1 Looge p\u00f5hi playbook","text":"Bash<pre><code>touch playbooks/site.yml\nnano playbooks/site.yml\n</code></pre>"},{"location":"ansible_advanced/lab/#312-lisage-playbook-struktuur","title":"3.1.2 Lisage playbook struktuur","text":"YAML<pre><code>---\n- name: \"LAMP Stack Deployment with Advanced Configuration\"\n  hosts: all\n  become: yes\n  gather_facts: yes\n\n  tasks:\n    - name: \"Update package cache\"\n      package:\n        update_cache: yes\n      when: ansible_os_family == \"Debian\"\n</code></pre>"},{"location":"ansible_advanced/lab/#313-lisage-apache-seadistamine-handlersitega","title":"3.1.3 Lisage Apache seadistamine handlers'itega","text":"YAML<pre><code>    - name: \"Install Apache\"\n      package:\n        name: \"{{ apache_package }}\"\n        state: present\n      notify:\n        - \"start apache\"\n        - \"enable apache\"\n\n    - name: \"Create virtual host directories\"\n      file:\n        path: \"{{ item.document_root }}\"\n        state: directory\n        owner: www-data\n        group: www-data\n        mode: '0755'\n      loop: \"{{ virtual_hosts }}\"\n      when: virtual_hosts is defined\n\n    - name: \"Generate virtual host configurations\"\n      template:\n        src: apache_vhost.conf.j2\n        dest: \"/etc/apache2/sites-available/{{ item.name }}.conf\"\n        backup: yes\n      loop: \"{{ virtual_hosts }}\"\n      notify: \"reload apache\"\n      when: virtual_hosts is defined\n\n    - name: \"Enable virtual hosts\"\n      command: \"a2ensite {{ item.name }}\"\n      args:\n        creates: \"/etc/apache2/sites-enabled/{{ item.name }}.conf\"\n      loop: \"{{ virtual_hosts }}\"\n      notify: \"reload apache\"\n      when: virtual_hosts is defined\n</code></pre>"},{"location":"ansible_advanced/lab/#314-lisage-handlers-sektsioon","title":"3.1.4 Lisage handlers sektsioon","text":"YAML<pre><code>  handlers:\n    - name: \"start apache\"\n      service:\n        name: \"{{ apache_package }}\"\n        state: started\n\n    - name: \"enable apache\"\n      service:\n        name: \"{{ apache_package }}\"\n        enabled: yes\n\n    - name: \"reload apache\"\n      service:\n        name: \"{{ apache_package }}\"\n        state: reloaded\n\n    - name: \"restart apache\"\n      service:\n        name: \"{{ apache_package }}\"\n        state: restarted\n</code></pre> <p>\ud83d\udcad M\u00f5elge: Miks kasutame <code>reload</code> mitte <code>restart</code>? Mis vahe on?</p>"},{"location":"ansible_advanced/lab/#32-testimine","title":"3.2 Testimine","text":"<p>Testida konfiguratsiooni:</p>"},{"location":"ansible_advanced/lab/#321-syntax-check","title":"3.2.1 Syntax check","text":"Bash<pre><code>ansible-playbook --syntax-check playbooks/site.yml\n</code></pre>"},{"location":"ansible_advanced/lab/#322-kuiv-kaivitus","title":"3.2.2 Kuiv k\u00e4ivitus","text":"Bash<pre><code>ansible-playbook --check -i inventory/hosts.yml playbooks/site.yml\n</code></pre>"},{"location":"ansible_advanced/lab/#323-templatei-testimine","title":"3.2.3 Template'i testimine","text":"Bash<pre><code>ansible-playbook -i inventory/hosts.yml playbooks/site.yml --tags \"config\" -v\n</code></pre>"},{"location":"ansible_advanced/lab/#4-ansible-vault-rakendamine","title":"4. Ansible Vault rakendamine","text":""},{"location":"ansible_advanced/lab/#41-vault-failide-loomine","title":"4.1 Vault failide loomine","text":"<p>Loome turvalist vault struktuuri:</p>"},{"location":"ansible_advanced/lab/#411-looge-vault-fail-group_vars-jaoks","title":"4.1.1 Looge vault fail group_vars jaoks","text":"Bash<pre><code>ansible-vault create group_vars/all/vault.yml\n</code></pre>"},{"location":"ansible_advanced/lab/#412-lisage-tundlikud-andmed","title":"4.1.2 Lisage tundlikud andmed","text":"YAML<pre><code># Database credentials\nvault_mysql_root_password: \"SecureRootPassword123!\"\nvault_mysql_app_password: \"AppPassword456!\"\n\n# SSL certificates paths\nvault_ssl_cert_path: \"/etc/ssl/certs/company.crt\"\nvault_ssl_key_path: \"/etc/ssl/private/company.key\"\n\n# API keys\nvault_backup_api_key: \"backup_api_key_here\"\nvault_monitoring_token: \"monitoring_token_here\"\n\n# Admin passwords\nvault_admin_password: \"AdminSecurePass789!\"\n</code></pre>"},{"location":"ansible_advanced/lab/#413-looge-production-spetsiifiline-vault","title":"4.1.3 Looge production-spetsiifiline vault","text":"Bash<pre><code>ansible-vault create group_vars/production/vault.yml\n</code></pre> YAML<pre><code># Production SSL certificates\nvault_ssl_cert_content: |\n  -----BEGIN CERTIFICATE-----\n  [certificate content here]\n  -----END CERTIFICATE-----\n\nvault_ssl_key_content: |\n  -----BEGIN PRIVATE KEY-----\n  [private key content here]\n  -----END PRIVATE KEY-----\n\n# Production database settings\nvault_production_db_host: \"prod-db.company.com\"\nvault_production_db_password: \"ProdDbPass123!\"\n</code></pre>"},{"location":"ansible_advanced/lab/#42-vault-muutujate-kasutamine","title":"4.2 Vault muutujate kasutamine","text":"<p>\u00dchendame vault muutujad tavaliste muutujatega:</p>"},{"location":"ansible_advanced/lab/#421-uuendage-group_varsallvarsyml","title":"4.2.1 Uuendage group_vars/all/vars.yml","text":"Bash<pre><code>nano group_vars/all/vars.yml\n</code></pre> YAML<pre><code># Lisage vault viited\nmysql_root_password: \"{{ vault_mysql_root_password }}\"\nmysql_app_password: \"{{ vault_mysql_app_password }}\"\nssl_cert_path: \"{{ vault_ssl_cert_path }}\"\nssl_key_path: \"{{ vault_ssl_key_path }}\"\nadmin_password: \"{{ vault_admin_password }}\"\n</code></pre>"},{"location":"ansible_advanced/lab/#422-uuendage-mysql-templatei","title":"4.2.2 Uuendage MySQL template'i","text":"Bash<pre><code>nano templates/mysql.cnf.j2\n</code></pre> INI<pre><code># Lisage vault-p\u00f5hised seadistused\n{% if app_env == 'production' %}\n# Production SSL settings\nssl-ca={{ vault_ssl_cert_path }}\nssl-cert={{ vault_ssl_cert_path }}\nssl-key={{ vault_ssl_key_path }}\n{% endif %}\n</code></pre>"},{"location":"ansible_advanced/lab/#43-vault-kasitsikasutatavus","title":"4.3 Vault k\u00e4sitsikasutatavus","text":"<p>Vault operatsioonid:</p>"},{"location":"ansible_advanced/lab/#431-vaata-vault-faili","title":"4.3.1 Vaata vault faili","text":"Bash<pre><code>ansible-vault view group_vars/all/vault.yml\n</code></pre>"},{"location":"ansible_advanced/lab/#432-muuda-vault-faili","title":"4.3.2 Muuda vault faili","text":"Bash<pre><code>ansible-vault edit group_vars/production/vault.yml\n</code></pre>"},{"location":"ansible_advanced/lab/#433-kaivita-playbook-vaultiga","title":"4.3.3 K\u00e4ivita playbook vault'iga","text":"Bash<pre><code>ansible-playbook -i inventory/hosts.yml playbooks/site.yml --ask-vault-pass\n</code></pre>"},{"location":"ansible_advanced/lab/#434-voi-kasuta-vault-password-faili","title":"4.3.4 V\u00f5i kasuta vault password faili","text":"Bash<pre><code>echo \"your_vault_password\" &gt; .vault_pass\nchmod 600 .vault_pass\nansible-playbook -i inventory/hosts.yml playbooks/site.yml --vault-password-file .vault_pass\n</code></pre> <p>\ud83d\udd10 Turvalisus: \u00c4ra iial commiti <code>.vault_pass</code> faili Git'i!</p>"},{"location":"ansible_advanced/lab/#5-labi-kontrollnimekiri","title":"5. Labi kontrollnimekiri","text":"<p>Veenduge, et olete l\u00f5petanud:</p>"},{"location":"ansible_advanced/lab/#51-struktuur-ja-organisatsioon","title":"5.1 Struktuur ja organisatsioon","text":"<ul> <li> Organiseeritud projektistruktuur - kaustad organiseeritud</li> <li> Inventory hierarhia - serverid grupeeritud ja konfigureeritud</li> <li> Muutujate hierarhia - group_vars ja host_vars seadistatud</li> </ul>"},{"location":"ansible_advanced/lab/#52-templateid-ja-konfiguratsioon","title":"5.2 Template'id ja konfiguratsioon","text":"<ul> <li> Apache virtual host template - d\u00fcnaamiline ja keskkonna-p\u00f5hine</li> <li> MySQL konfiguratsioon template - tulemuste optimeeritud</li> <li> PHP-FPM template - performance tuned</li> </ul>"},{"location":"ansible_advanced/lab/#53-playbookid-ja-handlers","title":"5.3 Playbook'id ja handlers","text":"<ul> <li> Advanced playbook - template'id, loops, conditionals</li> <li> Proper handlers - efficient service management</li> <li> Error handling - backup ja validation</li> </ul>"},{"location":"ansible_advanced/lab/#54-vault-ja-turvalisus","title":"5.4 Vault ja turvalisus","text":"<ul> <li> Vault failid loodud - tundlikud andmed kr\u00fcpteeritud</li> <li> Vault integratsioon - muutujad \u00fchendatud</li> <li> Turvaline workflow - .vault_pass ei committita</li> </ul>"},{"location":"ansible_advanced/lab/#55-testing-ja-validation","title":"5.5 Testing ja validation","text":"<ul> <li> Syntax check - playbook'id valid</li> <li> Dry run - --check mode t\u00f6\u00f6tab</li> <li> Template testing - konfiguratsioonid genereeruvad \u00f5igesti</li> </ul> <p>H\u00e4sti tehtud! Te oskate n\u00fc\u00fcd luua production-ready Ansible projekte!</p>"},{"location":"ansible_advanced/lecture/","title":"Ansible Advanced: Edasij\u00f5udnud Funktsioonid","text":"<p>Teemad: Variables, Templates, Handlers, Vault</p>"},{"location":"ansible_advanced/lecture/#opivaljundid","title":"\u00d5piv\u00e4ljundid","text":"<p>P\u00e4rast seda n\u00e4dalat oskate: - Hallata keerukamaid muutujaid ja nende hierarhiat - Luua d\u00fcnaamilisi konfiguratsioone Jinja2 template'itega - Kasutada handler'eid efektiivseks teenuste haldamiseks - Rakendada Ansible Vault'i tundlike andmete kaitsmiseks - J\u00e4rgida Ansible best practice'sid</p>"},{"location":"ansible_advanced/lecture/#1-variables-ja-variable-precedence","title":"1. Variables ja Variable Precedence","text":""},{"location":"ansible_advanced/lecture/#11-muutujate-hierarhia","title":"1.1 Muutujate hierarhia","text":"<p>Ansible'is on muutujatel kindel prioriteedi j\u00e4rjekord:</p> <pre><code>graph TD\n    A[1. Command line&lt;br/&gt;-e, --extra-vars] --&gt; B[2. Task variables&lt;br/&gt;task sees]\n    B --&gt; C[3. Block variables&lt;br/&gt;block sees]\n    C --&gt; D[4. Role variables&lt;br/&gt;role/vars/main.yml]\n    D --&gt; E[5. Play variables&lt;br/&gt;playbook sees]\n    E --&gt; F[6. Host variables&lt;br/&gt;host_vars/]\n    F --&gt; G[7. Group variables&lt;br/&gt;group_vars/]\n    G --&gt; H[8. Role defaults&lt;br/&gt;role/defaults/main.yml]\n\n    style A fill:#ff9999\n    style B fill:#ffcc99\n    style C fill:#ffff99\n    style D fill:#99ff99\n    style E fill:#99ccff\n    style F fill:#cc99ff\n    style G fill:#ff99cc\n    style H fill:#99ffcc</code></pre> <p>Prioriteedi j\u00e4rjekord (k\u00f5rgeim esimesena): 1. Command line (<code>-e</code>, <code>--extra-vars</code>) 2. Task variables (task sees) 3. Block variables (block sees) 4. Role variables (role/vars/main.yml) 5. Play variables (playbook sees) 6. Host variables (host_vars/) 7. Group variables (group_vars/) 8. Role defaults (role/defaults/main.yml)</p> <p>N\u00e4ide muutujate konfliktist:</p> YAML<pre><code># group_vars/all.yml\nserver_port: 80\n\n# host_vars/webserver1.yml  \nserver_port: 8080\n\n# playbook.yml\n- name: \"Server setup\"\n  vars:\n    server_port: 3000\n  tasks:\n    - debug:\n        msg: \"Port will be: {{ server_port }}\"  # Tulemus: 3000\n</code></pre> <p>\ud83e\udd14 Realiteedikontroll: Kui teil on 100 serverit ja igal on erinev konfiguratsioon, kuidas te seda ilma muutujate hierarhiata hallaksite?</p>"},{"location":"ansible_advanced/lecture/#12-faktide-kasutamine","title":"1.2 Faktide kasutamine","text":"<p>Ansible kogub automaatselt s\u00fcsteemi infot:</p> YAML<pre><code>- name: \"N\u00e4ita s\u00fcsteemi faktid\"\n  debug:\n    msg:\n      - \"OS: {{ ansible_os_family }}\"\n      - \"Memory: {{ ansible_memtotal_mb }}MB\"\n      - \"CPU cores: {{ ansible_processor_vcpus }}\"\n      - \"IP: {{ ansible_default_ipv4.address }}\"\n</code></pre>"},{"location":"ansible_advanced/lecture/#13-registered-variables","title":"1.3 Registered variables","text":"<p>Salvestage k\u00e4su tulemusi:</p> YAML<pre><code>- name: \"Kontrolli Apache staatust\"\n  shell: \"systemctl is-active apache2\"\n  register: apache_status\n  failed_when: false\n\n- name: \"Tegevus Apache staatuse p\u00f5hjal\"\n  debug:\n    msg: \"Apache on {{ apache_status.stdout }}\"\n  when: apache_status.rc == 0\n</code></pre>"},{"location":"ansible_advanced/lecture/#2-jinja2-templates","title":"2. Jinja2 Templates","text":""},{"location":"ansible_advanced/lecture/#21-templateite-pohitoed","title":"2.1 Template'ite p\u00f5hit\u00f5ed","text":"<p>Jinja2 v\u00f5imaldab luua d\u00fcnaamilisi faile:</p> YAML<pre><code># Playbook task\n- name: \"Genereeri konfiguratsioon\"\n  template:\n    src: app.conf.j2\n    dest: /etc/app/config.conf\n</code></pre> <p>Template fail (<code>templates/app.conf.j2</code>): INI<pre><code># {{ ansible_managed }}\nserver_name = {{ inventory_hostname }}\nport = {{ server_port | default(80) }}\ndebug = {{ debug_mode | default(false) | lower }}\n\n# Environment specific\n{% if environment == 'production' %}\nlog_level = ERROR\ncache_enabled = true\n{% else %}\nlog_level = DEBUG\ncache_enabled = false\n{% endif %}\n</code></pre></p> <p>K\u00fcsimus: Miks on kasulik kasutada <code>{{ ansible_managed }}</code> kommentaari template'i alguses?</p>"},{"location":"ansible_advanced/lecture/#22-conditionals-templateites","title":"2.2 Conditionals template'ites","text":"Text Only<pre><code>{% if ansible_os_family == \"Debian\" %}\npackage_manager = apt\n{% elif ansible_os_family == \"RedHat\" %}\npackage_manager = yum\n{% else %}\npackage_manager = unknown\n{% endif %}\n\n# Inline conditionals\nservice_port = {{ 443 if ssl_enabled else 80 }}\n</code></pre> <p>\ud83e\udd14 M\u00f5elge: Kuidas aitavad conditionals hallata erinevaid operatsioonis\u00fcsteeme \u00fches template'is?</p>"},{"location":"ansible_advanced/lecture/#23-loops-templateites","title":"2.3 Loops template'ites","text":"Text Only<pre><code># Virtual hosts\n{% for host in virtual_hosts %}\n&lt;VirtualHost *:{{ host.port }}&gt;\n    ServerName {{ host.name }}\n    DocumentRoot {{ host.document_root }}\n    {% if host.ssl_enabled | default(false) %}\n    SSLEngine on\n    SSLCertificateFile {{ host.ssl_cert }}\n    {% endif %}\n&lt;/VirtualHost&gt;\n{% endfor %}\n\n# Database users\n{% for user in database_users %}\nCREATE USER '{{ user.name }}'@'{{ user.host }}' IDENTIFIED BY '{{ user.password }}';\nGRANT {{ user.privileges | join(', ') }} ON {{ user.database }}.* TO '{{ user.name }}'@'{{ user.host }}';\n{% endfor %}\n</code></pre> <p>\ud83d\udcca V\u00f5rdlus: V\u00f5rrelge template'i kasutamist staatilise konfiguratsiooniga. Millised on eelised ja puudused?</p>"},{"location":"ansible_advanced/lecture/#24-filters","title":"2.4 Filters","text":"Text Only<pre><code># String manipulation\nserver_name = {{ inventory_hostname | upper }}\nconfig_file = {{ app_name | lower }}.conf\n\n# Number operations\nmemory_limit = {{ (ansible_memtotal_mb * 0.8) | int }}M\nworker_processes = {{ ansible_processor_vcpus | default(1) }}\n\n# List operations\npackages = {{ required_packages | join(' ') }}\nfirst_server = {{ groups['webservers'] | first }}\n\n# JSON/YAML\nconfig = {{ app_config | to_nice_json }}\n</code></pre> <p>Praktiline nipp: Kasutage <code>| default()</code> filter'it vaikev\u00e4\u00e4rtuste m\u00e4\u00e4ramiseks template'ites.</p>"},{"location":"ansible_advanced/lecture/#3-handlers-ja-notifications","title":"3. Handlers ja Notifications","text":""},{"location":"ansible_advanced/lecture/#31-handlerite-pohitoed","title":"3.1 Handler'ite p\u00f5hit\u00f5ed","text":"<p>Handler'id k\u00e4ivituvad ainult siis, kui task teeb muudatusi:</p> YAML<pre><code>tasks:\n  - name: \"Uuenda Apache konfiguratsioon\"\n    template:\n      src: apache.conf.j2\n      dest: /etc/apache2/apache2.conf\n    notify: \"restart apache\"\n\n  - name: \"Lisa virtual host\"\n    template:\n      src: vhost.conf.j2\n      dest: \"/etc/apache2/sites-available/{{ site_name }}.conf\"\n    notify:\n      - \"enable site\"\n      - \"reload apache\"\n\nhandlers:\n  - name: \"restart apache\"\n    service:\n      name: apache2\n      state: restarted\n\n  - name: \"reload apache\"\n    service:\n      name: apache2\n      state: reloaded\n\n  - name: \"enable site\"\n    command: \"a2ensite {{ site_name }}\"\n</code></pre> <p>\ud83e\udd14 M\u00f5elge: Miks kasutada <code>reload</code> mitte <code>restart</code>? Millal on vahe oluline?</p>"},{"location":"ansible_advanced/lecture/#32-handlerite-taiustatud-kasutamine","title":"3.2 Handler'ite t\u00e4iustatud kasutamine","text":"<p>Listen groups: YAML<pre><code>tasks:\n  - name: \"Uuenda PHP konfiguratsioon\"\n    template:\n      src: php.ini.j2\n      dest: /etc/php/7.4/fpm/php.ini\n    notify: \"restart web services\"\n\n  - name: \"Uuenda Apache konfiguratsioon\"\n    template:\n      src: apache.conf.j2\n      dest: /etc/apache2/apache2.conf\n    notify: \"restart web services\"\n\nhandlers:\n  - name: \"restart php-fpm\"\n    service:\n      name: php7.4-fpm\n      state: restarted\n    listen: \"restart web services\"\n\n  - name: \"restart apache\"\n    service:\n      name: apache2\n      state: restarted\n    listen: \"restart web services\"\n</code></pre></p> <p>K\u00fcsimus: Mis j\u00e4rjekorras k\u00e4ivituvad handler'id ja miks see on oluline?</p> <p>\ud83c\udfaf Praktikasoovitus: Kasutage <code>meta: flush_handlers</code> kriitiliste kontrollidel, kui peate veenduma, et teenus on taask\u00e4ivitatud enne j\u00e4rgmisi task'e.</p>"},{"location":"ansible_advanced/lecture/#4-ansible-vault-secrets","title":"4. Ansible Vault Secrets","text":""},{"location":"ansible_advanced/lecture/#41-vaulti-pohitoed","title":"4.1 Vault'i p\u00f5hit\u00f5ed","text":"<p>Ansible Vault kr\u00fcpteerib tundlikud andmed:</p> Bash<pre><code># Loo kr\u00fcpteeritud fail\nansible-vault create secrets.yml\n\n# Muuda kr\u00fcpteeritud faili\nansible-vault edit secrets.yml\n\n# Vaata kr\u00fcpteeritud faili\nansible-vault view secrets.yml\n\n# Kr\u00fcpteeri olemasolev fail\nansible-vault encrypt plaintext.yml\n\n# Dekr\u00fcpteeri fail\nansible-vault decrypt secrets.yml\n</code></pre> <p>N\u00e4ide vault failis: YAML<pre><code># secrets.yml (kr\u00fcpteeritud)\nvault_db_password: \"supersecretpassword123\"\nvault_api_key: \"abc123def456ghi789\"\nvault_ssl_private_key: |\n  -----BEGIN PRIVATE KEY-----\n  [private key content]\n  -----END PRIVATE KEY-----\n</code></pre></p> <p>\ud83d\udd10 Turvanipp: Vault'i parool peaks olema v\u00e4hemalt 12 t\u00e4hem\u00e4rki ja sisaldama erinevaid s\u00fcmboleid.</p>"},{"location":"ansible_advanced/lecture/#42-vaulti-kasutamine-playbookides","title":"4.2 Vault'i kasutamine playbook'ides","text":"YAML<pre><code># group_vars/production/vault.yml (kr\u00fcpteeritud)\nvault_mysql_root_password: \"production_mysql_secret\"\nvault_app_secret_key: \"prod_app_key_123456\"\n\n# group_vars/production/vars.yml (avatud)\nmysql_root_password: \"{{ vault_mysql_root_password }}\"\napp_secret_key: \"{{ vault_app_secret_key }}\"\nenvironment: \"production\"\n</code></pre> <p>Playbook k\u00e4ivitamine: Bash<pre><code># K\u00fcsi parooli\nansible-playbook site.yml --ask-vault-pass\n\n# Kasuta parool faili\necho \"mypassword\" &gt; .vault_pass\nansible-playbook site.yml --vault-password-file .vault_pass\n</code></pre></p> <p>\ud83e\udd14 M\u00f5elge: Kuidas saaksite organisatsioonis turvaliselt jagada vault paroole?</p>"},{"location":"ansible_advanced/lecture/#43-multiple-vault-passwords","title":"4.3 Multiple vault passwords","text":"Bash<pre><code># Erinev vault erinevale keskkonnale\nansible-vault create --vault-id prod@prompt production-secrets.yml\nansible-vault create --vault-id dev@prompt development-secrets.yml\n\n# K\u00e4ivitamine\nansible-playbook site.yml --vault-id prod@prompt --vault-id dev@prompt\n</code></pre>"},{"location":"ansible_advanced/lecture/#44-vault-parooli-haldamine","title":"4.4 Vault parooli haldamine","text":"<p>Environment variable: Bash<pre><code>export ANSIBLE_VAULT_PASSWORD=mypassword\nansible-playbook site.yml\n</code></pre></p> <p>Script'iga: Bash<pre><code>#!/bin/bash\n# vault_pass.sh\necho \"my_secret_password\"\n\nchmod +x vault_pass.sh\nansible-playbook site.yml --vault-password-file vault_pass.sh\n</code></pre></p> <p>\ud83d\udcad K\u00fcsimus: Mis probleeme v\u00f5ib tekkida vault paroolide haldamisel meeskonnat\u00f6\u00f6s?</p>"},{"location":"ansible_advanced/lecture/#45-vaulti-rekey","title":"4.5 Vault'i rekey","text":"Bash<pre><code># Muuda vault parooli\nansible-vault rekey secrets.yml\n\n# Muuda spetsiifilise vault'i parooli\nansible-vault rekey --vault-id old@prompt --new-vault-id new@prompt secrets.yml\n</code></pre> <p>Praktiline nipp: Regulaarselt muutke vault paroole ja dokumenteerige rotatsiooni protseduuri.</p>"},{"location":"ansible_advanced/lecture/#46-best-practices","title":"4.6 Best practices","text":""},{"location":"ansible_advanced/lecture/#461-vault-failide-organisatsioon","title":"4.6.1 Vault failide organisatsioon","text":"Text Only<pre><code>group_vars/\n\u251c\u2500\u2500 all/\n\u2502   \u251c\u2500\u2500 vars.yml          # Avalikud muutujad\n\u2502   \u2514\u2500\u2500 vault.yml         # Kr\u00fcpteeritud saladused\n\u251c\u2500\u2500 production/\n\u2502   \u251c\u2500\u2500 vars.yml\n\u2502   \u2514\u2500\u2500 vault.yml\n\u2514\u2500\u2500 development/\n    \u251c\u2500\u2500 vars.yml\n    \u2514\u2500\u2500 vault.yml\n</code></pre> <p>\ud83e\udd14 M\u00f5elge: Kuidas organiseerida vault faile nii, et oleks selge, millised andmed on kr\u00fcpteeritud ja millised mitte?</p>"},{"location":"ansible_advanced/lecture/#462-vault-rotatsiooni-strateegi","title":"4.6.2 Vault rotatsiooni strateegi","text":"Bash<pre><code># Regulaarne parooli vahetamine (n\u00e4iteks kvartaalselt)\n# 1. Loo uus vault parool\nansible-vault rekey --new-vault-password-file new_password production-secrets.yml\n\n# 2. Uuenda CI/CD s\u00fcsteemid uue parooliga\n# 3. Teavita meeskonda muudatusest\n# 4. Eemalda vana parool k\u00f5igist s\u00fcsteemidest\n</code></pre>"},{"location":"ansible_advanced/lecture/#5-lab-template-based-configuration","title":"5. Lab: Template-based Configuration","text":"<p>K\u00e4ed-k\u00fcljes praktikum Ansible'i t\u00e4psemate funktsioonidega tutvumiseks.</p> <p>\ud83d\udcc1 Vaata: lab.md</p> <p>Sisaldab: - Advanced variables setup - Jinja2 template'ite loomine - Handlers ja advanced playbook'id - Ansible Vault rakendamine</p>"},{"location":"ansible_basics/homework/","title":"LAMP Stack Playbook","text":"<p>Eesm\u00e4rk: \u00d5ppida Ansible playbook'i loomist praktiliselt ja iseseisvalt lahendamist ja uurimist</p>"},{"location":"ansible_basics/homework/#ulesande-kirjeldus","title":"\u00dclesande kirjeldus","text":"<p>See kodut\u00f6\u00f6 ei anna valmis koodi - see annab probleemid lahendamiseks! Kasutage lab'is \u00f5pitud oskusi ja Ansible dokumentatsiooni, et ehitada LAMP stack samm-sammult.</p> <p>P\u00f5him\u00f5te: Igal sammul antakse \u00fclesanne, kontrollviis ja n\u00f5uanded. Kood peate ise kirjutama!</p>"},{"location":"ansible_basics/homework/#1-projekti-seadistamine","title":"1. Projekti seadistamine","text":""},{"location":"ansible_basics/homework/#11-looge-projekti-struktuur","title":"1.1 Looge projekti struktuur","text":"<p>Mida vaja teha: Looge j\u00e4rgmine kataloogide ja failide struktuur (kasutage <code>mkdir</code> ja <code>touch</code> k\u00e4ske):</p> Text Only<pre><code>ansible-lamp/\n\u251c\u2500\u2500 inventory/\n\u2502   \u2514\u2500\u2500 hosts.yml\n\u251c\u2500\u2500 group_vars/\n\u2502   \u2514\u2500\u2500 webservers.yml  \n\u251c\u2500\u2500 templates/\n\u2502   \u251c\u2500\u2500 (failid lisate hiljem)\n\u251c\u2500\u2500 lamp-stack.yml\n\u251c\u2500\u2500 ansible.cfg\n\u2514\u2500\u2500 README.md\n</code></pre> <p>Kontroll: <code>tree ansible-lamp</code> peaks n\u00e4itama \u00f5iget struktuuri</p> <p>K\u00fcsimus: Miks kasutame group_vars/ kausta? (Vastake README.md'sse)</p>"},{"location":"ansible_basics/homework/#2-inventory-seadistamine","title":"2. Inventory seadistamine","text":""},{"location":"ansible_basics/homework/#21-inventory-fail","title":"2.1 Inventory fail","text":"<p>Probleem: Vajate inventory faili, mis t\u00f6\u00f6tab nii localhost'iga kui ka teise serveriga.</p> <p>N\u00f5uded: - Looge YAML formaat inventory (kasutage lab'is \u00f5pitut) - Gruppi nimi: <code>webservers</code> - Localhost peab kasutama <code>ansible_connection: local</code> - J\u00e4tke kommentaaridesse n\u00e4ide teise serveri lisamiseks</p> <p>Fail: <code>inventory/hosts.yml</code></p> <p>Kontroll: <code>ansible-inventory --list</code> peaks n\u00e4itama teie servereid</p> <p>\ud83d\udd0d Uurige: K\u00e4ivitage <code>ansible webservers -m ping</code> - kas t\u00f6\u00f6tab?</p>"},{"location":"ansible_basics/homework/#22-muutujate-defineerimine","title":"2.2 Muutujate defineerimine","text":"<p>Probleem: LAMP stack vajab palju konfiguratsiooni. Kus muutujaid hoida?</p> <p>N\u00f5uded: Looge <code>group_vars/webservers.yml</code> ja defineerige: - MySQL root parool - Rakenduse andmebaasi nimi - Rakenduse kasutaja nimi ja parool - PHP pakettide loend - Document root tee - Rakenduse nimi ja versioon</p> <p>N\u00e4pun\u00e4ide: Vaadake lab'i n\u00e4iteid muutujate kohta</p> <p>\ud83e\udd14 M\u00f5elge: Millised muutujad peaksid olema \"salajased\"? Kuidas neid hiljem kaitsta?</p> <p>Kontroll: <code>ansible webservers -m debug -a \"var=hostvars[inventory_hostname]\"</code> - kas n\u00e4ete oma muutujaid?</p>"},{"location":"ansible_basics/homework/#3-vigane-playbook-parandamine","title":"3. Vigane playbook parandamine","text":""},{"location":"ansible_basics/homework/#31-parandage-see-vigane-playbook","title":"3.1 Parandage see vigane playbook","text":"<p>Antud on vigane playbook algus. Leidke ja parandage vead:</p> YAML<pre><code>---\n- name: LAMP Stack Setup\n  hosts: all                    # &lt;- VIGA 1: vale grupp\n  become: true\n\n  tasks:\n    - name: Update cache\n      package:\n        update_cache: true      # &lt;- VIGA 2: vale moodul\n\n    - name: Install Apache\n      apt:\n        name: apache            # &lt;- VIGA 3: vale paketi nimi\n        state: present\n      notify: restart apache\n\n    - name: Start Apache\n      systemd:                  # &lt;- VIGA 4: miks mitte service?\n        name: apache2\n        state: started\n\n  handlers:                     # &lt;- VIGA 5: handlers vale kohas?\n    - name: restart apache\n      service:\n        name: apache2\n        state: restarted\n</code></pre> <p>\u00dclesanne:  1. Kopeerige see kood faili <code>lamp-stack.yml</code> 2. Leidke k\u00f5ik 5+ viga 3. Parandage need 4. Lisage proper YAML vormistus (<code>---</code> alguses)</p> <p>Kontroll: <code>ansible-playbook --syntax-check lamp-stack.yml</code></p> <p>\ud83d\udd0d Uurige: Mis vahe on <code>package</code> ja <code>apt</code> moodulil? Kumb on parem?</p>"},{"location":"ansible_basics/homework/#4-mysql-seadistamine","title":"4. MySQL seadistamine","text":""},{"location":"ansible_basics/homework/#41-mysql-installimine-ja-turvamine","title":"4.1 MySQL installimine ja turvamine","text":"<p>Probleem: MySQL vajab spetsiaalset seadistamist. Lab'is n\u00e4gite lihtsaid n\u00e4iteid.</p> <p>Teie \u00fclesanne: 1. Installige <code>mysql-server</code> ja <code>python3-pymysql</code> 2. K\u00e4ivitage MySQL teenus 3. Seadke MySQL root kasutajale parool (kasutage group_vars muutujat) 4. Looge rakenduse andmebaas 5. Looge rakenduse kasutaja \u00f5igustega ainult sellele andmebaasile</p> <p>Moodulid, mida vajate: - <code>package</code> v\u00f5i <code>apt</code> - <code>service</code>  - <code>mysql_user</code> - <code>mysql_db</code></p> <p>N\u00f5uanded: - MySQL root parooli seadistamine on keeruline - uurige <code>login_unix_socket</code> parameetrit - <code>mysql_user</code> moodul vajab <code>login_user</code> ja <code>login_password</code> parameetrit - Kasutage <code>priv: \"database_name.*:ALL\"</code> \u00f5igusteks</p> <p>\ud83d\udcda Uurige dokumentatsiooni: <code>ansible-doc mysql_user</code></p> <p>Kontroll: Bash<pre><code>mysql -u [teie_kasutaja] -p [teie_andmebaas] -e \"SELECT 'Success!' as test;\"\n</code></pre></p> <p>\ud83d\udd0d Debugimise k\u00fcsimus: Kui MySQL \u00fchendus ei t\u00f6\u00f6ta, kuidas te viga otsite?</p>"},{"location":"ansible_basics/homework/#5-templateide-loomine","title":"5. Template'ide loomine","text":""},{"location":"ansible_basics/homework/#51-puudulik-php-template","title":"5.1 Puudulik PHP template","text":"<p>Antud on template algus. L\u00f5petage see:</p> <p>Fail: <code>templates/info.php.j2</code></p> PHP<pre><code>&lt;?php\n// {{ app_name }} - Info leht\n// TODO: lisage kuup\u00e4ev kasutades ansible muutujat\n\necho \"&lt;h1&gt;{{ ??? }}&lt;/h1&gt;\";  // TODO: kasutage app_name muutujat\n\necho \"&lt;h2&gt;Serveri info&lt;/h2&gt;\";\n// TODO: lisage hostname, IP, OS info\n\necho \"&lt;h2&gt;MySQL test&lt;/h2&gt;\";\n$host = 'localhost';\n$database = '{{ ??? }}';  // TODO: kasutage \u00f5iget muutujat\n$username = '{{ ??? }}';  // TODO: kasutage \u00f5iget muutujat  \n$password = '{{ ??? }}';  // TODO: kasutage \u00f5iget muutujat\n\ntry {\n    // TODO: kirjutage PDO \u00fchenduse test\n    // Kui \u00f5nnestub, n\u00e4idake \"\u00dchendus t\u00f6\u00f6tab!\"\n    // Kui eba\u00f5nnestub, n\u00e4idake error'it\n} catch(PDOException $e) {\n    // TODO: error handling\n}\n\n// TODO: lisage phpinfo() kutse\n?&gt;\n</code></pre> <p>\u00dclesanne: 1. Asendage k\u00f5ik <code>{{ ??? }}</code> \u00f5igete muutujatega 2. Implementeerige MySQL PDO \u00fchenduse test 3. Lisage proper error handling 4. Lisage phpinfo() v\u00e4ljund</p> <p>N\u00f5uanded: - Vaadake lab'i template n\u00e4iteid - Ansible faktid: <code>{{ ansible_hostname }}</code>, <code>{{ ansible_default_ipv4.address }}</code> - PHP PDO: <code>new PDO(\"mysql:host=$host;dbname=$database\", $username, $password)</code></p> <p>Kontroll: PHP ei tohi sisaldada <code>{{ ??? }}</code> m\u00e4rke</p>"},{"location":"ansible_basics/homework/#52-html-pohileht-loomine","title":"5.2 HTML p\u00f5hileht loomine","text":"<p>Probleem: Vajate ilusat HTML lehte, mis n\u00e4itab LAMP stack'i infot.</p> <p>N\u00f5uded: - Kasutage template'i <code>templates/index.html.j2</code> - N\u00e4idake serveri infot (hostname, OS, kuup\u00e4ev) - Lisage link <code>/info.php</code> lehele - Kasutage CSS'i, et see oleks ilus - K\u00f5ik info peab tulema Ansible muutujatest/faktidest</p> <p>\ud83d\udca1 Inspiratsioon: Vaadake lab'i HTML n\u00e4idet, aga \u00e4rge kopeerige!</p> <p>\ud83c\udfc6 V\u00e4ljakutse: Kas oskate lisada JavaScripti, mis n\u00e4itab praegust kellaaega?</p> <p>Kontroll: HTML peab valideeruma (saate kontrollida https://validator.w3.org/)</p>"},{"location":"ansible_basics/homework/#6-playbook-lopetamine","title":"6. Playbook l\u00f5petamine","text":""},{"location":"ansible_basics/homework/#61-taskside-implementeerimine","title":"6.1 Tasks'ide implementeerimine","text":"<p>N\u00fc\u00fcd implementeerige playbook tasks'id:</p> <p>Vajalikud sammud (kirjutage ise task'id): 1. S\u00fcsteemi ettevalmistus - pakettide cache uuendamine 2. Apache seadistamine - installimine, k\u00e4ivitamine, document root loomine 3. MySQL seadistamine - (juba tegite sektsioonis 4) 4. PHP seadistamine - installimine koos moodulikega 5. Template'ide deployment - kopeerige template'id \u00f5igetesse kohtadesse 6. Firewall - lubage HTTP trafik 7. Valideerimised - kontrollige, et k\u00f5ik t\u00f6\u00f6tab</p> <p>\ud83d\udca1 N\u00f5uanne: Iga task vajab: - Selget <code>name</code> v\u00e4lja - \u00d5iget moodulit - Proper parameetreid - Vajadusel <code>notify</code> handler'eid</p> <p>T\u00fc\u00fcpilised moodulid: - <code>package</code>/<code>apt</code> - pakettide installimine - <code>service</code> - teenuste haldamine - <code>file</code> - kaustade loomine - <code>template</code> - template'ide kopeerimine - <code>uri</code> - HTTP testid - <code>ufw</code> - firewall reeglid</p> <p>\ud83e\udd14 K\u00fcsimus: Millises j\u00e4rjekorras task'id k\u00e4ivitada? Miks?</p>"},{"location":"ansible_basics/homework/#62-handlers-ja-error-handling","title":"6.2 Handlers ja error handling","text":"<p>Probleem: Playbook peab olema robust ja k\u00e4sitlema vigu.</p> <p>N\u00f5uded: 1. Handlers - Apache ja MySQL taask\u00e4ivitamise jaoks 2. Error handling - kasutage <code>failed_when</code>, <code>ignore_errors</code>, <code>retries</code> 3. Valideerimised - kontrollige teenuste olekut ja HTTP vastuseid 4. Conditional tasks - n\u00e4iteks ainult Debian/Ubuntu s\u00fcsteemides</p> <p>N\u00e4ited error handling'ust: YAML<pre><code>- name: Test HTTP\n  uri:\n    url: http://localhost\n  retries: 3\n  delay: 10\n  register: http_test\n  failed_when: http_test.status != 200\n</code></pre></p> <p>\ud83e\udd14 M\u00f5elge: Millal kasutada <code>ignore_errors: yes</code> ja millal mitte?</p>"},{"location":"ansible_basics/homework/#7-testimine-ja-debugimine","title":"7. Testimine ja debugimine","text":""},{"location":"ansible_basics/homework/#71-systematic-testimine","title":"7.1 Systematic testimine","text":"<p>Probleem: Kuidas te veendute, et teie playbook t\u00f6\u00f6tab?</p> <p>Teie testiplaan: 1. Syntax check - ? 2. Dry run - ? 3. Tegelik k\u00e4ivitamine - ? 4. Manuaalne testimine - ? 5. Idempotency test - ?</p> <p>T\u00e4itke k\u00fcsim\u00e4rgid ja tehke iga test!</p> <p>\ud83d\udca1 N\u00f5uanne: Iga testi j\u00e4rel dokumenteerige tulemused</p> <p>Debugimise k\u00fcsimused: - Kui Apache ei k\u00e4ivitu, kuidas te viga otsite? - Kui MySQL \u00fchendus ei t\u00f6\u00f6ta, millised logid vaatate? - Kui template ei genereeru, kuidas te seda debugite?</p>"},{"location":"ansible_basics/homework/#72-vigade-parandamine","title":"7.2 Vigade parandamine","text":"<p>Antud on levinud vead. Kas tunnete neid \u00e4ra?</p> <p>Viga 1: Text Only<pre><code>TASK [Install PHP] ****\nfatal: [localhost]: FAILED! =&gt; {\"msg\": \"No package matching 'php' found\"}\n</code></pre> K\u00fcsimus: Mis probleem? Kuidas parandada?</p> <p>Viga 2: Text Only<pre><code>TASK [Test MySQL connection] ****\nfatal: [localhost]: FAILED! =&gt; {\"msg\": \"unable to connect to database\"}\n</code></pre> K\u00fcsimus: V\u00f5imalikud p\u00f5hjused? Kuidas debugida?</p> <p>Viga 3: Text Only<pre><code>TASK [Generate index.html] ****\nfatal: [localhost]: FAILED! =&gt; {\"msg\": \"template not found\"}\n</code></pre> K\u00fcsimus: Mida kontrollida?</p> <p>\u00dclesanne: Kirjutage README.md'sse troubleshooting sektsioon nende vigade jaoks!</p>"},{"location":"ansible_basics/homework/#8-dokumenteerimine","title":"8. Dokumenteerimine","text":""},{"location":"ansible_basics/homework/#81-readmemd-loomine","title":"8.1 README.md loomine","text":"<p>Probleem: Keegi teine peab teie projekti kasutama. Mis infot ta vajab?</p> <p>N\u00f5utavad sektsioonid: 1. Projekt kirjeldus - mis see teeb? 2. Eeltingimused - mida vaja installimisel? 3. Kasutamise juhend - sammhaaval k\u00e4ivitamine 4. Konfiguratsioon - kuidas muutujaid muuta? 5. Testimine - kuidas kontrollida, et t\u00f6\u00f6tab? 6. Troubleshooting - levinud probleemid ja lahendused 7. Projekti struktuur - failide selgitus</p> <p>\u2705 Test: Andke README.md kolleegile - kas ta saab projekti k\u00e4ivitada?</p>"},{"location":"ansible_basics/homework/#82-koodikommentaarid","title":"8.2 Koodikommentaarid","text":"<p>Probleem: Teie playbook peab olema loetav ja m\u00f5istetav.</p> <p>N\u00f5uded: - Iga task vajab selget <code>name</code> v\u00e4lja - Keerulised osad vajavad kommentaare - Muutujad vajavad selgitusi - Template'id vajavad dokumenteerimist</p> <p>N\u00e4ide heast kommentaarist: YAML<pre><code># MySQL root parooli seadistamine on keeruline, sest:\n# 1. P\u00e4rast installimist pole parool seatud\n# 2. Kasutame unix_socket autentimist\n# 3. Seej\u00e4rel m\u00e4\u00e4rame parooli ja l\u00fclitume password auth'ile\n- name: \"Seadista MySQL root parool (esimene kord)\"\n  mysql_user:\n    # ... resto kood\n</code></pre></p>"},{"location":"ansible_basics/homework/#9-esitamine","title":"9. Esitamine","text":""},{"location":"ansible_basics/homework/#91-repository-link","title":"9.1 Repository link","text":"<p>Esitage GitHub repository link kursuse s\u00fcsteemi j\u00e4rgmiste n\u00f5uetega:</p> <p>Repository peab sisaldama: - T\u00e4ielikku funktsionaalset Ansible projekti - README.md t\u00e4ieliku dokumentatsiooniga - Screenshot'e v\u00f5i video t\u00f5endusmaterjali - Deployment logisid</p> <p>Repository peab olema: - Public (et \u00f5ppej\u00f5ud saaks \u00fcle vaadata) - Korrektselt nimetatud (<code>ansible-lamp-practice</code> v\u00f5i sarnane) - Professionaalselt organiseeritud</p> <p>Peab olema v\u00f5imalik: - Repository kloonida - Juhendite j\u00e4rgi setup teha - Playbook edukalt k\u00e4ivitada - Tulemust valideerida</p> <p>\ud83c\udfaf Edu! Alustage kohe ja k\u00fcsige abi, kui j\u00e4\u00e4te kinni!</p>"},{"location":"ansible_basics/lab/","title":"Ansible Basics Lab: Setup ja Esimene Playbook","text":"<p>Eesm\u00e4rk: \u00d5ppida Ansible'i alused ja luua esimesed automatiseerimise skriptid</p>"},{"location":"ansible_basics/lab/#opivaljundid","title":"\u00d5piv\u00e4ljundid","text":"<p>P\u00e4rast laborit oskate: - Installida ja konfigureerida Ansible'i - Seadistada SSH v\u00f5tmeid turvaliseks \u00fchenduseks - Luua ja hallata inventory faile - Kasutada ad-hoc k\u00e4ske kiireks automatiseerimiseks - Kirjutada YAML s\u00fcntaksit - Luua ja k\u00e4ivitada playbook'e - Automatiseeritult seadistada veebiserveri</p>"},{"location":"ansible_basics/lab/#1-ansiblei-installimine-ja-seadistamine","title":"1. Ansible'i installimine ja seadistamine","text":""},{"location":"ansible_basics/lab/#11-ansiblei-installimine","title":"1.1 Ansible'i installimine","text":"<p>Ubuntu/Debian: Bash<pre><code># Uuenda pakettide nimekirja\nsudo apt update\n\n# Installi Ansible\nsudo apt install ansible -y\n\n# Kontrolli installatsiooni\nansible --version\n</code></pre></p> <p>macOS (Homebrew): Bash<pre><code># Installi Homebrew (kui ei ole)\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n# Installi Ansible\nbrew install ansible\n\n# Kontrolli\nansible --version\n</code></pre></p> <p>Windows (WSL): Bash<pre><code># Windows'is kasutage Windows Subsystem for Linux\n# Seej\u00e4rel j\u00e4rgige Ubuntu juhendeid\n</code></pre></p>"},{"location":"ansible_basics/lab/#12-ssh-votmete-seadistamine","title":"1.2 SSH v\u00f5tmete seadistamine","text":"<p>Miks SSH v\u00f5tmed on vajalikud: - Ansible kasutab SSH'd serveritega \u00fchendumiseks - V\u00f5tmed on turvalisemad kui paroolid - Automatiseerimine toimib ilma parooli k\u00fcsimata</p> <p>SSH v\u00f5tme loomine: Bash<pre><code># Looge SSH v\u00f5ti (kui teil ei ole)\nssh-keygen -t rsa -b 4096 -C \"teie.email@example.com\"\n\n# Vajutage Enter k\u00f5ikidele k\u00fcsimustele (kasutab default asukohti)\n# V\u00f5ite lisada parooli v\u00f5i j\u00e4tta t\u00fchjaks\n</code></pre></p> <p>SSH v\u00f5tme kopeerimine test serverisse: Bash<pre><code># Kopeerige avalik v\u00f5ti serverisse\nssh-copy-id kasutaja@test-server.local\n\n# V\u00f5i k\u00e4sitsi\ncat ~/.ssh/id_rsa.pub | ssh kasutaja@test-server.local \"mkdir -p ~/.ssh &amp;&amp; cat &gt;&gt; ~/.ssh/authorized_keys\"\n</code></pre></p> <p>Testide \u00fchendust: Bash<pre><code># Peaks \u00fchenduma ilma parooli k\u00fcsimata\nssh kasutaja@test-server.local\n</code></pre></p>"},{"location":"ansible_basics/lab/#13-esimene-inventory-fail-serverite-telefoniraamat","title":"1.3 Esimene inventory fail - Serverite \"telefoniraamat\"","text":"<p>Esmalt m\u00f5istame, mis on inventory: - Inventory on fail, kus kirjas k\u00f5ik serverid, mida Ansible haldab - See on nagu telefoniraamat - Ansible vaatab sealt, milliseid servereid kontakteeruda - Saame servereid grupeerida (nt webserverid, andmebaasiserveid)</p> <p>Looge t\u00f6\u00f6kaust: Bash<pre><code>mkdir ~/ansible-praktikum\ncd ~/ansible-praktikum\n</code></pre></p> <p>N\u00fc\u00fcd loome inventory faili sammhaaval:</p>"},{"location":"ansible_basics/lab/#131-looge-tuhi-fail","title":"1.3.1 Looge t\u00fchi fail","text":"Bash<pre><code>touch inventory.ini\n</code></pre>"},{"location":"ansible_basics/lab/#132-avage-fail-tekstiredaktoris","title":"1.3.2 Avage fail tekstiredaktoris","text":"Bash<pre><code>nano inventory.ini\n# v\u00f5i\ncode inventory.ini\n</code></pre>"},{"location":"ansible_basics/lab/#133-lisage-esimene-server-localhost-testimiseks","title":"1.3.3 Lisage esimene server (localhost testimiseks)","text":"INI<pre><code>[test]\nlocalhost ansible_connection=local\n</code></pre> <p>Selgitus: - <code>[test]</code> = grupi nimi (sulgudes) - <code>localhost</code> = serveri nimi - <code>ansible_connection=local</code> = \u00fctleb Ansible'ile, et kasuta lokaalseid k\u00e4ske (SSH pole vaja)</p>"},{"location":"ansible_basics/lab/#134-lisage-teine-grupp-tuleviku-serveritele","title":"1.3.4 Lisage teine grupp (tuleviku serveritele)","text":"INI<pre><code>[practice]\n# Kommentaar: Siia saate hiljem lisada tegelikke servereid\n# N\u00e4ide: server1.example.com ansible_user=ubuntu\n</code></pre>"},{"location":"ansible_basics/lab/#135-salvestage-fail-ctrlx-siis-y-siis-enter-nanos","title":"1.3.5 Salvestage fail (Ctrl+X, siis Y, siis Enter nano's)","text":"<p>N\u00fc\u00fcd testima inventory: Bash<pre><code># Vaatame, kas Ansible n\u00e4eb meie servereid\nansible -i inventory.ini --list-hosts all\n\n# Peaks n\u00e4itama: localhost\n</code></pre></p> <p>Testide \u00fchendust: Bash<pre><code>ansible -i inventory.ini test -m ping\n</code></pre></p> <p>M\u00f5telge: Miks kasutame <code>test</code> mitte <code>localhost</code>? (Vastus: test on grupi nimi!)</p>"},{"location":"ansible_basics/lab/#2-esimesed-ad-hoc-kasud","title":"2. Esimesed Ad-hoc k\u00e4sud","text":""},{"location":"ansible_basics/lab/#21-ad-hoc-kaskude-harjutused","title":"2.1 Ad-hoc k\u00e4skude harjutused","text":"<p>Ping test: Bash<pre><code># Kontrollige k\u00f5iki servereid\nansible -i inventory.ini all -m ping\n</code></pre></p> <p>S\u00fcsteemi info: Bash<pre><code># Vaata operatsioonis\u00fcsteemi\nansible -i inventory.ini all -m setup -a \"filter=ansible_distribution*\"\n\n# Vaata m\u00e4lu ja CPU\nansible -i inventory.ini all -m setup -a \"filter=ansible_memtotal_mb,ansible_processor_count\"\n</code></pre></p> <p>Failide haldamine: Bash<pre><code># Loo test kaust\nansible -i inventory.ini all -m file -a \"path=/tmp/ansible-test state=directory\"\n\n# Loo test fail\nansible -i inventory.ini all -m copy -a \"content='Ansible test' dest=/tmp/ansible-test/hello.txt\"\n\n# Kontrolli faili olemasolu\nansible -i inventory.ini all -m command -a \"ls -la /tmp/ansible-test/\"\n</code></pre></p> <p>Pakettide haldamine: Bash<pre><code># Installi htop (vajalik sudo)\nansible -i inventory.ini all -m package -a \"name=htop state=present\" --become\n\n# Kontrolli installatsiooni\nansible -i inventory.ini all -m command -a \"which htop\"\n</code></pre></p>"},{"location":"ansible_basics/lab/#3-yaml-ja-esimene-playbook","title":"3. YAML ja esimene playbook","text":""},{"location":"ansible_basics/lab/#31-yaml-suntaksi-harjutus-opime-inimese-keelt","title":"3.1 YAML s\u00fcntaksi harjutus - \u00d5pime \"inimese keelt\"","text":"<p>Miks YAML on oluline: - Ansible playbook'id on kirjutatud YAML keeles - YAML on disainitud inimesele loetavaks - Taandrimine (indentation) on V\u00c4GA oluline!</p> <p>Loome YAML faili sammhaaval:</p>"},{"location":"ansible_basics/lab/#311-looge-uus-fail","title":"3.1.1 Looge uus fail","text":"Bash<pre><code>touch test.yml\nnano test.yml  # v\u00f5i code test.yml\n</code></pre>"},{"location":"ansible_basics/lab/#312-alustage-yaml-dokumendiga","title":"3.1.2 Alustage YAML dokumendiga","text":"YAML<pre><code>---\n# YAML alustab alati kolme kriipsuga\n# Hashtag (#) on kommentaar\n</code></pre>"},{"location":"ansible_basics/lab/#313-lisage-lihtne-vaartus","title":"3.1.3 Lisage lihtne v\u00e4\u00e4rtus","text":"<p>YAML<pre><code>nimi: \"Minu Ansible Test\"\nversioon: 1.0\n</code></pre> M\u00e4rkus: Jutum\u00e4rgid on vabatahtlikud, aga hea praktika tekstile</p>"},{"location":"ansible_basics/lab/#314-lisage-loend-list","title":"3.1.4 Lisage loend (list)","text":"<p>YAML<pre><code>serverid:\n  - nimi: \"test1\"\n    ip: \"192.168.1.10\"\n    roll: \"veebiserver\"\n  - nimi: \"test2\"\n    ip: \"192.168.1.11\"\n    roll: \"andmebaas\"\n</code></pre> T\u00e4helepanu:  - Kriips (-) t\u00e4histab loendi elementi - Taandrimine peab olema t\u00e4pne (kasutage 2 t\u00fchikut) - \u00c4RA kasutage Tab klahvi!</p>"},{"location":"ansible_basics/lab/#315-lisage-seadistused","title":"3.1.5 Lisage seadistused","text":"YAML<pre><code>seadistused:\n  http_port: 80\n  https_port: 443\n  debug: true\n</code></pre>"},{"location":"ansible_basics/lab/#316-salvestage-fail","title":"3.1.6 Salvestage fail","text":"<p>Kontrollige s\u00fcntaksi: Bash<pre><code># Python abil (kui on installitud)\npython3 -c \"import yaml; print(yaml.safe_load(open('test.yml')))\"\n\n# Ansible abil\nansible-playbook --syntax-check test.yml\n</code></pre></p> <p>Harjutus: Muutke <code>debug: true</code> v\u00e4\u00e4rtuseks <code>false</code> ja kontrollige uuesti!</p>"},{"location":"ansible_basics/lab/#32-esimene-lihtne-playbook-sammhaaval-ehitamine","title":"3.2 Esimene lihtne playbook - Sammhaaval ehitamine","text":"<p>M\u00f5istame playbook struktuuri: - Play = \u00fcks stsenaarium \u00fche grupi serveritele - Tasks = konkreetsed sammud, mida teha - Modules = Ansible'i ehitatud funktsioonid (debug, file, copy jne)</p> <p>Loome playbook samm-sammult:</p>"},{"location":"ansible_basics/lab/#321-looge-uus-fail","title":"3.2.1 Looge uus fail","text":"Bash<pre><code>touch mu-esimene-playbook.yml\nnano mu-esimene-playbook.yml\n</code></pre>"},{"location":"ansible_basics/lab/#322-alustage-yaml-ja-play-definitsiooniga","title":"3.2.2 Alustage YAML ja Play definitsiooniga","text":"<p>YAML<pre><code>---\n- name: \"Minu esimene Ansible playbook\"\n  hosts: all\n  gather_facts: yes\n</code></pre> Selgitus: - <code>name:</code> = playbook'i kirjeldus - <code>hosts: all</code> = k\u00e4ivita k\u00f5ikidele serveritele inventory's - <code>gather_facts: yes</code> = kogu serveri infot (OS, IP, jne)</p>"},{"location":"ansible_basics/lab/#323-lisage-tasks-sektsioon","title":"3.2.3 Lisage tasks sektsioon","text":"YAML<pre><code>  tasks:\n</code></pre>"},{"location":"ansible_basics/lab/#324-esimene-task-lihtne-tervitus","title":"3.2.4 Esimene task - lihtne tervitus","text":"<p>YAML<pre><code>    - name: \"Tervita maailma\"\n      debug:\n        msg: \"Tere! Ansible t\u00f6\u00f6tab {{ inventory_hostname }} serveris!\"\n</code></pre> M\u00e4rkuseid: - <code>debug</code> = moodul s\u00f5numite v\u00e4ljastamiseks - <code>{{ inventory_hostname }}</code> = muutuja (server nimi)</p>"},{"location":"ansible_basics/lab/#325-teine-task-naita-susteemi-infot","title":"3.2.5 Teine task - n\u00e4ita s\u00fcsteemi infot","text":"YAML<pre><code>    - name: \"N\u00e4ita s\u00fcsteemi infot\"\n      debug:\n        msg: \"Server t\u00f6\u00f6tab {{ ansible_distribution }} {{ ansible_distribution_version }}\"\n</code></pre>"},{"location":"ansible_basics/lab/#326-kolmas-task-loo-kaust","title":"3.2.6 Kolmas task - loo kaust","text":"<p>YAML<pre><code>    - name: \"Loo test kataloog\"\n      file:\n        path: /tmp/ansible-praktikum\n        state: directory\n        mode: '0755'\n</code></pre> Selgitus: - <code>file</code> = moodul failide/kaustade haldamiseks - <code>state: directory</code> = veendu, et see on kaust - <code>mode: '0755'</code> = m\u00e4\u00e4ra \u00f5igused (rwx r-x r-x)</p>"},{"location":"ansible_basics/lab/#327-neljas-task-kirjuta-fail","title":"3.2.7 Neljas task - kirjuta fail","text":"<p>YAML<pre><code>    - name: \"Kirjuta info fail\"\n      copy:\n        dest: /tmp/ansible-praktikum/info.txt\n        mode: '0644'\n        content: |\n          Ansible playbook k\u00e4ivitatud: {{ ansible_date_time.iso8601 }}\n          Serveri nimi: {{ inventory_hostname }}\n          IP aadress: {{ ansible_default_ipv4.address | default('ei tuvastatud') }}\n</code></pre> M\u00e4rkuseid: - <code>content: |</code> = mitme-realine tekst - <code>{{ ansible_date_time.iso8601 }}</code> = praegune kuup\u00e4ev</p>"},{"location":"ansible_basics/lab/#328-viies-task-loe-fail","title":"3.2.8 Viies task - loe fail","text":"<p>YAML<pre><code>    - name: \"Kuva faili sisu\"\n      command: cat /tmp/ansible-praktikum/info.txt\n      register: faili_sisu\n</code></pre> Selgitus: - <code>command</code> = k\u00e4ivita shell k\u00e4sk - <code>register</code> = salvesta v\u00e4ljund muutujasse</p>"},{"location":"ansible_basics/lab/#329-kuues-task-naita-tulemust","title":"3.2.9 Kuues task - n\u00e4ita tulemust","text":"YAML<pre><code>    - name: \"N\u00e4ita, mis failis on\"\n      debug:\n        msg: \"{{ faili_sisu.stdout_lines }}\"\n</code></pre>"},{"location":"ansible_basics/lab/#3210-salvestage-fail","title":"3.2.10 Salvestage fail","text":"<p>N\u00fc\u00fcd testima meie playbook'i:</p> <ol> <li> <p>Esmalt kuiv k\u00e4ivitus (dry run): Bash<pre><code>ansible-playbook -i inventory.ini --check mu-esimene-playbook.yml\n</code></pre> Mis juhtub: Ansible n\u00e4itab, mida ta teeks, aga ei muuda midagi</p> </li> <li> <p>Kui kuiv k\u00e4ivitus \u00f5nnestus, siis tegelik k\u00e4ivitus: Bash<pre><code>ansible-playbook -i inventory.ini mu-esimene-playbook.yml\n</code></pre></p> </li> <li> <p>Vaadake tulemust:</p> </li> <li>Kas k\u00f5ik taskid \u00f5nnestusid (roheline)?</li> <li>Kontrollige, kas fail tekkis: <code>ls -la /tmp/ansible-praktikum/</code></li> </ol> <p>Debugimise k\u00fcsimused: - Mida t\u00e4hendab \"changed\" vs \"ok\"? - Miks m\u00f5ned taskid on \"changed\" ja teised \"ok\"? - K\u00e4ivitage playbook uuesti - mis muutub?</p>"},{"location":"ansible_basics/lab/#33-playbook-muutujatega-opime-dunaamilisust","title":"3.3 Playbook muutujatega - \u00d5pime d\u00fcnaamilisust","text":"<p>Miks muutujad on olulised: - Teevad playbook'i korduvkasutatavaks - V\u00f5imaldavad erinevaid konfiguratsioone - Lihtsustavad muudatuste tegemist</p> <p>Loome muutujatega playbook sammhaaval:</p>"},{"location":"ansible_basics/lab/#331-uus-fail","title":"3.3.1 Uus fail","text":"Bash<pre><code>touch playbook-muutujatega.yml\nnano playbook-muutujatega.yml\n</code></pre>"},{"location":"ansible_basics/lab/#332-play-definitsioon-muutujatega","title":"3.3.2 Play definitsioon muutujatega","text":"YAML<pre><code>---\n- name: \"Playbook muutujatega\"\n  hosts: all\n  vars:\n    rakenduse_nimi: \"Minu Veebirakendus\"\n    versioon: \"1.2.3\"\n    portnumber: 8080\n\n  tasks:\n</code></pre>"},{"location":"ansible_basics/lab/#333-task-1-dunaamiline-kausta-nimi","title":"3.3.3 Task 1 - D\u00fcnaamiline kausta nimi","text":"<p>YAML<pre><code>    - name: \"Loo rakenduse kaust\"\n      file:\n        path: \"/opt/{{ rakenduse_nimi | lower | replace(' ', '-') }}\"\n        state: directory\n        mode: '0755'\n      become: yes\n</code></pre> Selgitused: - <code>{{ rakenduse_nimi }}</code> = kasuta muutujat - <code>| lower</code> = muuda v\u00e4ikesteks t\u00e4htedeks - <code>| replace(' ', '-')</code> = asenda t\u00fchikud kriipsudega</p>"},{"location":"ansible_basics/lab/#334-task-2-dunaamiline-konfiguratsioon","title":"3.3.4 Task 2 - D\u00fcnaamiline konfiguratsioon","text":"YAML<pre><code>    - name: \"Kirjuta konfiguratsioon\"\n      copy:\n        dest: \"/opt/{{ rakenduse_nimi | lower | replace(' ', '-') }}/config.env\"\n        mode: '0644'\n        content: |\n          # {{ rakenduse_nimi }} konfiguratsioon\n          APP_NAME={{ rakenduse_nimi }}\n          VERSION={{ versioon }}\n          PORT={{ portnumber }}\n          INSTALLED_ON={{ ansible_date_time.iso8601 }}\n      become: yes\n</code></pre>"},{"location":"ansible_basics/lab/#335-task-3-kuva-tulemus","title":"3.3.5 Task 3 - Kuva tulemus","text":"YAML<pre><code>    - name: \"Kuva konfiguratsioon\"\n      command: \"cat /opt/{{ rakenduse_nimi | lower | replace(' ', '-') }}/config.env\"\n      register: config_sisu\n      become: yes\n\n    - name: \"N\u00e4ita konfiguratsiooni\"\n      debug:\n        msg: \"{{ config_sisu.stdout_lines }}\"\n</code></pre>"},{"location":"ansible_basics/lab/#336-kaivita-ja-eksperimenteerige","title":"3.3.6 K\u00e4ivita ja eksperimenteerige","text":"Bash<pre><code>ansible-playbook -i inventory.ini playbook-muutujatega.yml\n</code></pre> <p>Harjutus: 1. Muutke <code>rakenduse_nimi</code> muutujat 2. K\u00e4ivitage playbook uuesti 3. Vaadake, kuidas tulemus muutub</p> <p>Lisaharjutus: Lisage uus muutuja <code>kirjeldus</code> ja kasutage seda config failis!</p>"},{"location":"ansible_basics/lab/#4-veebiserveri-seadistamine","title":"4. Veebiserveri seadistamine","text":""},{"location":"ansible_basics/lab/#41-nginx-playbook-automatiseeritud-veebiserver","title":"4.1 Nginx playbook - Automatiseeritud veebiserver","text":"<p>Miks Nginx: - Populaarne veebiserver - Lihtne seadistada - Hea n\u00e4ide produktsiooni-l\u00e4hedase automatiseerimise kohta</p> <p>Loome Nginx playbook etappide kaupa:</p>"},{"location":"ansible_basics/lab/#411-alustage-uue-failiga","title":"4.1.1 Alustage uue failiga","text":"Bash<pre><code>touch nginx-setup.yml\nnano nginx-setup.yml\n</code></pre>"},{"location":"ansible_basics/lab/#412-play-definitsioon-muutujatega","title":"4.1.2 Play definitsioon muutujatega","text":"<p>YAML<pre><code>---\n- name: \"Nginx veebiserveri seadistamine\"\n  hosts: all\n  become: yes\n  vars:\n    web_root: \"/var/www/html\"\n    site_name: \"Minu Test Sait\"\n\n  tasks:\n</code></pre> M\u00e4rkuseid: - <code>become: yes</code> = kasuta sudo \u00f5iguseid k\u00f5ikides tasks'ides - <code>vars:</code> = playbook'i muutujad</p>"},{"location":"ansible_basics/lab/#413-task-1-susteemi-ettevalmistus","title":"4.1.3 Task 1 - S\u00fcsteemi ettevalmistus","text":"<p>YAML<pre><code>    - name: \"Uuenda pakettide nimekirja\"\n      package:\n        update_cache: yes\n      when: ansible_os_family == \"Debian\"\n</code></pre> Selgitus: <code>when:</code> = conditional - k\u00e4ivita ainult Debian/Ubuntu's</p>"},{"location":"ansible_basics/lab/#414-task-2-nginx-installimine","title":"4.1.4 Task 2 - Nginx installimine","text":"YAML<pre><code>    - name: \"Installi Nginx\"\n      package:\n        name: nginx\n        state: present\n</code></pre>"},{"location":"ansible_basics/lab/#415-task-3-veebi-kausta-loomine","title":"4.1.5 Task 3 - Veebi kausta loomine","text":"<p>YAML<pre><code>    - name: \"Loo veebi kaust\"\n      file:\n        path: \"{{ web_root }}\"\n        state: directory\n        owner: www-data\n        group: www-data\n        mode: '0755'\n      when: ansible_os_family == \"Debian\"\n</code></pre> M\u00e4rkuseid: - <code>{{ web_root }}</code> = kasutab muutujat - <code>owner/group: www-data</code> = nginx kasutaja</p>"},{"location":"ansible_basics/lab/#416-task-4-lihtsa-html-lehe-loomine","title":"4.1.6 Task 4 - Lihtsa HTML lehe loomine","text":"YAML<pre><code>    - name: \"Kopeeri HTML lehek\u00fclg\"\n      copy:\n        dest: \"{{ web_root }}/index.html\"\n        owner: www-data\n        group: www-data\n        mode: '0644'\n        content: |\n          &lt;!DOCTYPE html&gt;\n          &lt;html lang=\"et\"&gt;\n          &lt;head&gt;\n              &lt;meta charset=\"UTF-8\"&gt;\n              &lt;title&gt;{{ site_name }}&lt;/title&gt;\n              &lt;style&gt;\n                  body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }\n                  .container { max-width: 600px; margin: 0 auto; }\n                  .success { color: green; }\n                  .info { background: #f0f0f0; padding: 20px; border-radius: 5px; }\n              &lt;/style&gt;\n          &lt;/head&gt;\n          &lt;body&gt;\n              &lt;div class=\"container\"&gt;\n                  &lt;h1 class=\"success\"&gt;{{ site_name }}&lt;/h1&gt;\n                  &lt;p&gt;Nginx on edukalt paigaldatud Ansible'iga!&lt;/p&gt;\n                  &lt;div class=\"info\"&gt;\n                      &lt;h3&gt;Serveri info:&lt;/h3&gt;\n                      &lt;p&gt;&lt;strong&gt;Hostname:&lt;/strong&gt; {{ inventory_hostname }}&lt;/p&gt;\n                      &lt;p&gt;&lt;strong&gt;S\u00fcsteem:&lt;/strong&gt; {{ ansible_distribution }} {{ ansible_distribution_version }}&lt;/p&gt;\n                      &lt;p&gt;&lt;strong&gt;Paigaldatud:&lt;/strong&gt; {{ ansible_date_time.iso8601 }}&lt;/p&gt;\n                  &lt;/div&gt;\n              &lt;/div&gt;\n          &lt;/body&gt;\n          &lt;/html&gt;\n      when: ansible_os_family == \"Debian\"\n</code></pre>"},{"location":"ansible_basics/lab/#417-task-5-nginx-kaivitamine","title":"4.1.7 Task 5 - Nginx k\u00e4ivitamine","text":"<p>YAML<pre><code>    - name: \"K\u00e4ivita ja luba Nginx\"\n      service:\n        name: nginx\n        state: started\n        enabled: yes\n</code></pre> Selgitus: - <code>state: started</code> = veendu, et teenus t\u00f6\u00f6tab - <code>enabled: yes</code> = k\u00e4ivita automaatselt boot'imisel</p>"},{"location":"ansible_basics/lab/#418-task-6-valideerimised","title":"4.1.8 Task 6 - Valideerimised","text":"<p>YAML<pre><code>    - name: \"Kontrolli Nginx olekut\"\n      command: systemctl is-active nginx\n      register: nginx_status\n      failed_when: false\n\n    - name: \"N\u00e4ita Nginx olekut\"\n      debug:\n        msg: \"Nginx olek: {{ nginx_status.stdout }}\"\n\n    - name: \"Testi veebiserveri \u00fchendust\"\n      uri:\n        url: \"http://localhost\"\n        return_content: yes\n      register: web_test\n      failed_when: false\n\n    - name: \"N\u00e4ita veebiserveri vastust\"\n      debug:\n        msg: \"Veebiserver t\u00f6\u00f6tab! HTTP kood: {{ web_test.status | default('Ei saanud \u00fchendust') }}\"\n</code></pre> M\u00e4rkuseid: - <code>uri</code> moodul = HTTP p\u00e4ringute tegemiseks - <code>failed_when: false</code> = \u00e4ra l\u00f5peta vea korral</p>"},{"location":"ansible_basics/lab/#419-salvestage-fail","title":"4.1.9 Salvestage fail","text":"<p>N\u00fc\u00fcd testima Nginx playbook'i:</p> <ol> <li> <p>S\u00fcntaksi kontroll: Bash<pre><code>ansible-playbook -i inventory.ini --syntax-check nginx-setup.yml\n</code></pre></p> </li> <li> <p>Kuiv k\u00e4ivitus: Bash<pre><code>ansible-playbook -i inventory.ini --check nginx-setup.yml\n</code></pre> Vaadake: Millised taskid n\u00e4itavad \"changed\"?</p> </li> <li> <p>Tegelik k\u00e4ivitus: Bash<pre><code>ansible-playbook -i inventory.ini nginx-setup.yml\n</code></pre></p> </li> <li> <p>Tulemuse testimine: Bash<pre><code># Kontrolli Nginx protsessi\nsudo systemctl status nginx\n\n# Kontrolli, kas port 80 on avatud\nsudo netstat -tlnp | grep :80\n\n# Testi HTTP p\u00e4ringuga\ncurl http://localhost\n</code></pre></p> </li> <li> <p>Brauseris (kui GUI on):</p> </li> <li>Avage http://localhost</li> <li>Peaks n\u00e4itama ilusat HTML lehte</li> </ol> <p>\ud83d\udca1 Anal\u00fc\u00fcsige: - Mitu \"changed\" oli esimesel k\u00e4ivitusel? - K\u00e4ivitage playbook uuesti - mitu \"changed\" n\u00fc\u00fcd? - Miks see nii on? (Hint: idempotency!)</p> <p>\ud83d\udd27 Troubleshooting: - Kui Nginx ei k\u00e4ivitu, kontrollige: <code>sudo journalctl -u nginx</code> - Kui port kinni, vaadake: <code>sudo ss -tlnp | grep :80</code></p>"},{"location":"ansible_basics/lab/#5-ansible-konfiguratsiooni-optimeerimine","title":"5. Ansible konfiguratsiooni optimeerimine","text":""},{"location":"ansible_basics/lab/#51-ansiblecfg-seadistamine-mugavuse-suurendamine","title":"5.1 ansible.cfg seadistamine - Mugavuse suurendamine","text":"<p>Miks ansible.cfg on kasulik: - Ei pea iga kord <code>-i inventory.ini</code> kirjutama - Paremad vaikimisi seadistused - SSH optimeeringud</p> <p>Loome konfiguratsiooni sammhaaval:</p>"},{"location":"ansible_basics/lab/#511-loo-fail","title":"5.1.1 Loo fail","text":"Bash<pre><code>touch ansible.cfg\nnano ansible.cfg\n</code></pre>"},{"location":"ansible_basics/lab/#512-lisage-pohiseadistused","title":"5.1.2 Lisage p\u00f5hiseadistused","text":"INI<pre><code>[defaults]\n# Inventory faili asukoht (n\u00fc\u00fcd ei pea -i iga kord kirjutama)\ninventory = inventory.ini\n</code></pre>"},{"location":"ansible_basics/lab/#513-ssh-seadistused-et-valtida-vigu","title":"5.1.3 SSH seadistused (et v\u00e4ltida vigu)","text":"<p>INI<pre><code># SSH seadistused\nhost_key_checking = False\nremote_user = kasutaja\nprivate_key_file = ~/.ssh/id_rsa\n</code></pre> Selgitus: - <code>host_key_checking = False</code> = ei k\u00fcsi SSH fingerprinte - <code>remote_user</code> = default kasutajanimi serverites</p>"},{"location":"ansible_basics/lab/#514-valjundi-parandused","title":"5.1.4 V\u00e4ljundi parandused","text":"<p>INI<pre><code># V\u00e4ljundi seadistused\nstdout_callback = yaml\npipelining = True\n</code></pre> Miks: YAML v\u00e4ljund on inimesele loetavam</p>"},{"location":"ansible_basics/lab/#515-performance-seadistused","title":"5.1.5 Performance seadistused","text":"INI<pre><code># Paralleelsus (kui palju serveritega korraga t\u00f6\u00f6tab)\nforks = 10\n\n# Logimise seadistused  \nlog_path = ./ansible.log\n</code></pre>"},{"location":"ansible_basics/lab/#516-ssh-optimeeringud-taiendav-sektsioon","title":"5.1.6 SSH optimeeringud (t\u00e4iendav sektsioon)","text":"INI<pre><code>[ssh_connection]\n# SSH optimeeringud\nssh_args = -o ControlMaster=auto -o ControlPersist=60s -o UserKnownHostsFile=/dev/null\ntimeout = 30\nretries = 3\n</code></pre>"},{"location":"ansible_basics/lab/#517-salvestage-ja-testiga","title":"5.1.7 Salvestage ja testiga","text":"Bash<pre><code># N\u00fc\u00fcd saate k\u00e4ivitada ilma -i liputa!\nansible all -m ping\n</code></pre> <p>Teste konfiguratsiooni: Bash<pre><code># N\u00fc\u00fcd ei pea -i inventory.ini m\u00e4\u00e4rama\nansible all -m ping\n\n# Logi kontrollimise\ntail -f ansible.log\n</code></pre></p>"},{"location":"ansible_basics/lab/#6-veatuvastus-ja-probleemide-lahendamine","title":"6. Veatuvastus ja probleemide lahendamine","text":""},{"location":"ansible_basics/lab/#61-levinud-probleemid-ja-lahendused","title":"6.1 Levinud probleemid ja lahendused","text":"<p>SSH \u00fchenduse probleemid: Bash<pre><code># Kontrolli SSH \u00fchendust k\u00e4sitsi\nssh -v kasutaja@target-host\n\n# SSH v\u00f5tme probleemid\nssh-add ~/.ssh/id_rsa\nchmod 600 ~/.ssh/id_rsa\nchmod 644 ~/.ssh/id_rsa.pub\n</code></pre></p> <p>Sudo \u00f5iguste probleemid: Bash<pre><code># Testide sudo \u00f5iguseid\nansible all -m command -a \"whoami\" --become\n\n# Sudo parooli k\u00fcsimine\nansible all -m command -a \"whoami\" --become --ask-become-pass\n</code></pre></p> <p>Python teegi probleemid: Bash<pre><code># Kontrolli Python'i\nansible all -m setup -a \"filter=ansible_python*\"\n\n# M\u00e4\u00e4ra Python'i asukoht\nansible all -m ping -e ansible_python_interpreter=/usr/bin/python3\n</code></pre></p>"},{"location":"ansible_basics/lab/#62-debugimise-playbook-opime-torkeid-leidma","title":"6.2 Debugimise playbook - \u00d5pime t\u00f5rkeid leidma","text":"<p>Miks debug playbook on vajalik: - Aitab m\u00f5ista, millised muutujad on saadaval - Kontrollib SSH ja sudo seadistusi - N\u00e4itab Python'i konfiguratsiooni</p> <p>Loome debug playbook etappide kaupa:</p>"},{"location":"ansible_basics/lab/#621-alustage-uue-failiga","title":"6.2.1 Alustage uue failiga","text":"Bash<pre><code>touch debug-playbook.yml\nnano debug-playbook.yml\n</code></pre>"},{"location":"ansible_basics/lab/#622-play-definitsioon","title":"6.2.2 Play definitsioon","text":"YAML<pre><code>---\n- name: \"Debug ja veatuvastus\"\n  hosts: all\n  gather_facts: yes\n\n  tasks:\n</code></pre>"},{"location":"ansible_basics/lab/#623-task-1-naita-susteemi-muutujaid","title":"6.2.3 Task 1 - N\u00e4ita s\u00fcsteemi muutujaid","text":"YAML<pre><code>    - name: \"N\u00e4ita operatsioonis\u00fcsteemi\"\n      debug:\n        msg: \"OS: {{ ansible_distribution }} {{ ansible_distribution_version }}\"\n</code></pre>"},{"location":"ansible_basics/lab/#624-task-2-kontrolli-kasutajat","title":"6.2.4 Task 2 - Kontrolli kasutajat","text":"<p>YAML<pre><code>    - name: \"Kontrolli SSH kasutaja\"\n      command: whoami\n      register: current_user\n\n    - name: \"N\u00e4ita kasutaja infot\"\n      debug:\n        msg: \"SSH kasutaja: {{ current_user.stdout }}, Ansible kasutaja: {{ ansible_user_id }}\"\n</code></pre> Selgitus: <code>register</code> salvestab k\u00e4su v\u00e4ljundi muutujasse</p>"},{"location":"ansible_basics/lab/#625-task-3-kontrolli-sudo","title":"6.2.5 Task 3 - Kontrolli sudo","text":"<p>YAML<pre><code>    - name: \"Kontrolli sudo \u00f5iguseid\"\n      command: whoami\n      become: yes\n      register: sudo_user\n      failed_when: false\n</code></pre> M\u00e4rkus: <code>failed_when: false</code> = \u00e4ra l\u00f5peta vea korral</p>"},{"location":"ansible_basics/lab/#626-task-4-naita-sudo-tulemust","title":"6.2.6 Task 4 - N\u00e4ita sudo tulemust","text":"YAML<pre><code>    - name: \"N\u00e4ita sudo tulemust\"\n      debug:\n        msg: \"Sudo kasutaja: {{ sudo_user.stdout | default('Sudo ei toimi') }}\"\n</code></pre>"},{"location":"ansible_basics/lab/#627-task-5-kontrolli-pythoni","title":"6.2.7 Task 5 - Kontrolli Python'i","text":"YAML<pre><code>    - name: \"Kontrolli Python'i\"\n      debug:\n        msg: \"Python: {{ ansible_python_interpreter | default(ansible_python.executable) }}\"\n</code></pre>"},{"location":"ansible_basics/lab/#628-kaivita-ja-analuusi","title":"6.2.8 K\u00e4ivita ja anal\u00fc\u00fcsi","text":"<p>Bash<pre><code>ansible-playbook -i inventory.ini debug-playbook.yml -v\n</code></pre> M\u00e4rkus: <code>-v</code> flag annab rohkem detaile</p>"},{"location":"ansible_basics/lab/#7-labi-hindamine-ja-reflektsioon","title":"7. Labi hindamine ja reflektsioon","text":""},{"location":"ansible_basics/lab/#71-tehnilised-saavutused","title":"7.1 Tehnilised saavutused","text":"<p>Kontrollige, et j\u00e4rgmised asjad toimivad:</p> <ul> <li> Ansible t\u00f6\u00f6tab - <code>ansible --version</code> n\u00e4itab versiooni</li> <li> SSH \u00fchendus toimib - saate serveritesse \u00fchenduda ilma paroolita</li> <li> Inventory on funktsionaalne - <code>ansible all -m ping</code> tagastab \"pong\"</li> <li> Ad-hoc k\u00e4sud t\u00f6\u00f6tavad - saate hallata faile ja pakette</li> <li> YAML s\u00fcntaks on selge - m\u00f5istate taandrimist ja struktuuri</li> <li> Esimene playbook toimib - k\u00f5ik taskid \u00f5nnestuvad (roheline v\u00e4ljund)</li> <li> Muutujad t\u00f6\u00f6tavad - saate muuta konfiguratsiooni muutujate kaudu</li> <li> Nginx on k\u00e4igus - <code>curl http://localhost</code> tagastab HTML</li> <li> Konfiguratsioon optimeeritud - <code>ansible.cfg</code> on seadistatud</li> </ul>"},{"location":"ansible_basics/lab/#72-kontseptuaalne-moistmine","title":"7.2 Kontseptuaalne m\u00f5istmine","text":"<p>Kontrollige oma m\u00f5istmist:</p> <ol> <li>Ansible arhitektuur:</li> <li>Selgitage oma s\u00f5nadega, miks Ansible on \"agentless\"</li> <li> <p>Mis vahe on \"control node\" ja \"managed node\" vahel?</p> </li> <li> <p>Idempotency:</p> </li> <li>Miks saab playbook'e turvaliselt korduvalt k\u00e4ivitada?</li> <li> <p>Mis vahe on \"changed\" ja \"ok\" state'il?</p> </li> <li> <p>YAML ja muutujad:</p> </li> <li>Miks on taandrimine YAML's nii oluline?</li> <li> <p>Kuidas muutujad teevad playbook'i korduvkasutatavaks?</p> </li> <li> <p>SSH ja turvalisus:</p> </li> <li>Miks on SSH v\u00f5tmed paremad kui paroolid?</li> <li>Kuidas Ansible tagab turvalise kommunikatsiooni?</li> </ol>"},{"location":"ansible_basics/lab/#73-praktilised-oskused","title":"7.3 Praktilised oskused","text":"<p>\ud83d\udd27 Proovige ise:</p> <ol> <li>Muutke Nginx playbook'i:</li> <li>Lisage uus muutuja <code>server_admin_email</code></li> <li> <p>Muutke HTML template'i seda kasutama</p> </li> <li> <p>Looge uus playbook:</p> </li> <li>Installige htop ja tree paketid</li> <li>Looge <code>/opt/tools/</code> kaust</li> <li> <p>Kirjutage info fail installitud t\u00f6\u00f6riistade kohta</p> </li> <li> <p>Eksperimenteerige ad-hoc k\u00e4skudega:</p> </li> <li>Kontrollige k\u00f5igi serverite disk space'i</li> <li>Looge fail k\u00f5ikides serverites praeguse kuup\u00e4eva ja ajaga</li> </ol>"},{"location":"ansible_basics/lab/#74-valmidus-jargmiseks","title":"7.4 Valmidus j\u00e4rgmiseks","text":"<p>Te olete valmis kodut\u00f6\u00f6ks, kui: - M\u00f5istate Ansible'i p\u00f5hikontseptsioone - Saate kirjutada lihtsat YAML s\u00fcntaksit - Oskate kasutada muutujaid ja template'e - M\u00f5istate playbook'ide struktuuri - Saate t\u00f5rkeid diagnoosida ja lahendada</p>"},{"location":"ansible_basics/lab/#8-jargmised-sammud","title":"8. J\u00e4rgmised sammud","text":"<p>Valmis kodut\u00f6\u00f6ks: - Kasutage siin \u00f5pitud oskusi LAMP stack playbook'i loomiseks - Rakendage learned patterns oma serverite automatiseerimiseks - Praktiseerige YAML s\u00fcntaksit ja playbook struktuuri</p> <p>J\u00e4rgmine n\u00e4dal (Ansible Advanced): - Roles ja Galaxy - Templates ja Jinja2 - Conditional logic ja loops - Multi-environment deployments</p>"},{"location":"ansible_basics/lab/#9-boonusulesanded-ansiblei-oskajatele","title":"9. BOONUS\u00dcLESANDED (Ansible'i oskajatele)","text":""},{"location":"ansible_basics/lab/#91-advanced-playbook-patterns","title":"9.1 Advanced Playbook Patterns","text":"YAML<pre><code># Advanced inventory and variables\n---\n- name: Advanced Ansible patterns\n  hosts: webservers\n  vars:\n    nginx_configs:\n      - { name: \"api\", port: 3000, upstream: \"app_servers\" }\n      - { name: \"admin\", port: 4000, upstream: \"admin_servers\" }\n\n  tasks:\n    # Dynamic configuration generation\n    - name: Generate nginx configs\n      template:\n        src: nginx-site.j2\n        dest: \"/etc/nginx/sites-available/{{ item.name }}\"\n      loop: \"{{ nginx_configs }}\"\n      notify: reload nginx\n\n    # Conditional deployments\n    - name: Deploy based on environment\n      git:\n        repo: \"{{ app_repo }}\"\n        dest: \"/var/www/{{ app_name }}\"\n        version: \"{{ 'main' if environment == 'production' else 'develop' }}\"\n      when: deployment_enabled | default(false)\n</code></pre>"},{"location":"ansible_basics/lab/#92-error-handling-ja-performance","title":"9.2 Error Handling ja Performance","text":"YAML<pre><code>---\n- name: Advanced error handling\n  hosts: all\n  tasks:\n    # Retry with exponential backoff\n    - name: Download with retries\n      get_url:\n        url: \"{{ app_url }}\"\n        dest: \"/tmp/app.tar.gz\"\n      register: download\n      retries: 5\n      delay: \"{{ 2 ** (ansible_loop.index0) }}\"\n      until: download is succeeded\n\n    # Block/rescue/always pattern\n    - name: Safe deployment\n      block:\n        - name: Deploy application\n          unarchive:\n            src: \"/tmp/app.tar.gz\"\n            dest: \"/var/www/\"\n      rescue:\n        - name: Rollback on failure\n          debug:\n            msg: \"Deployment failed, rolling back...\"\n      always:\n        - name: Cleanup\n          file:\n            path: \"/tmp/app.tar.gz\"\n            state: absent\n</code></pre>"},{"location":"ansible_basics/lab/#93-custom-modules-ja-advanced-features","title":"9.3 Custom Modules ja Advanced Features","text":"Bash<pre><code># Custom filter plugin\nmkdir -p filter_plugins\ncat &gt; filter_plugins/custom.py &lt;&lt; 'EOF'\nclass FilterModule(object):\n    def filters(self):\n        return {'custom_hash': self.custom_hash}\n\n    def custom_hash(self, data):\n        import hashlib\n        return hashlib.md5(str(data).encode()).hexdigest()[:8]\nEOF\n\n# Use in playbook\nansible-playbook -i inventory advanced.yml\n</code></pre>"},{"location":"ansible_basics/lab/#94-ansible-vault-ja-security","title":"9.4 Ansible Vault ja Security","text":"Bash<pre><code># Create encrypted variables\nansible-vault create secrets.yml\nansible-vault edit secrets.yml\n\n# Use in playbook\nansible-playbook site.yml --ask-vault-pass\n\n# Vault in CI/CD\necho \"vault_password\" &gt; .vault_pass\nansible-playbook site.yml --vault-password-file .vault_pass\n</code></pre> <p>\ud83c\udf89 H\u00e4sti tehtud! Te olete n\u00fc\u00fcd v\u00f5imelised automatiseerima nii p\u00f5hilisi kui ka keerukamaid serverihalduse \u00fclesandeid Ansible'iga!</p>"},{"location":"ansible_basics/lecture/","title":"Ansible Alused","text":""},{"location":"ansible_basics/lecture/#1-ansible-arhitektuur-ja-pohimotted","title":"1. Ansible Arhitektuur ja P\u00f5him\u00f5tted","text":""},{"location":"ansible_basics/lecture/#11-sissejuhatus-automatiseerimisse","title":"1.1 Sissejuhatus automatiseerimisse","text":"<p>S\u00fcsteemiadministreerimine traditsioonilistel meetoditel tekitab skaleerumisel m\u00e4rkimisv\u00e4\u00e4rseid v\u00e4ljakutseid. Suurtes infrastruktuurides, kus hallatakse k\u00fcmneid v\u00f5i sadu servereid, muutub k\u00e4sitsi konfiguratsioonide haldamine aegan\u00f5udvaks ja vigadele vastuv\u00f5tlikuks.</p> <p>Ansible on open-source automatiseerimisplatvorm, mis lahendab s\u00fcsteemihalduse, rakenduste juurutamise ja konfiguratsioonide haldamise \u00fclesandeid. Ansible'i peamised eelised on agentless arhitektuur, deklaratiivne s\u00fcntaks ja idempotentsed operatsioonid.</p>"},{"location":"ansible_basics/lecture/#12-ansible-arhitektuur","title":"1.2 Ansible arhitektuur","text":""},{"location":"ansible_basics/lecture/#121-agentless-lahenemine","title":"1.2.1 Agentless l\u00e4henemine","text":"<p>Ansible kasutab agentless arhitektuuri, mis eristab seda paljudest konkureerivtest lahendustest. See t\u00e4hendab, et hallatavates s\u00fcsteemides ei ole vaja installida ja hooldada t\u00e4iendavat tarkvara.</p> <pre><code>graph TB\n    subgraph \"Control Node\"\n        Ansible[Ansible Engine]\n        Inventory[Inventory]\n        Playbooks[Playbooks]\n    end\n\n    subgraph \"Managed Nodes\"\n        Web1[Web Server 1]\n        Web2[Web Server 2]\n        DB1[Database 1]\n        DB2[Database 2]\n    end\n\n    Ansible --&gt;|SSH| Web1\n    Ansible --&gt;|SSH| Web2\n    Ansible --&gt;|SSH| DB1\n    Ansible --&gt;|SSH| DB2\n\n    Inventory --&gt; Ansible\n    Playbooks --&gt; Ansible\n\n    style Ansible fill:#ff9999\n    style Inventory fill:#99ccff\n    style Playbooks fill:#99ff99\n    style Web1 fill:#ffcc99\n    style Web2 fill:#ffcc99\n    style DB1 fill:#cc99ff\n    style DB2 fill:#cc99ff</code></pre> <p>N\u00f5uded hallatavates s\u00fcsteemides: - SSH server aktiivsena - Python interpreter (versioon 2.7 v\u00f5i 3.5+) - Vajalikud s\u00fcsteemi \u00f5igused operatsioonide sooritamiseks</p>"},{"location":"ansible_basics/lecture/#122-pohikomponendid","title":"1.2.2 P\u00f5hikomponendid","text":"<p>Control Node Control node on s\u00fcsteem, kus Ansible on installitud ja kust k\u00e4ivitatakse automatiseerimise k\u00e4sud. Control node n\u00f5uded: - Unix-laadne operatsioonis\u00fcsteem (Linux, macOS) - Python 3.8 v\u00f5i uuem versioon - SSH klient</p> <p>Managed Nodes Managed nodes on sihtm\u00e4rgid, mida Ansible haldab. Need v\u00f5ivad olla f\u00fc\u00fcsilised serverid, virtuaalmasinad v\u00f5i pilveressursid.</p> <p>Inventory Inventory on struktureeritud fail v\u00f5i andmebaas, mis m\u00e4\u00e4ratleb hallatavate s\u00fcsteemide nimekirja ja nende grupeerimise loogika.</p> INI<pre><code>[webservers]\nweb1.example.com\nweb2.example.com\n\n[databases] \ndb1.example.com\ndb2.example.com\n\n[production:children]\nwebservers\ndatabases\n</code></pre> <p>Modules Moodulid on abstraktsed \u00fchikud, mis kapseldavad konkreetseid funktsionaalsusi. Ansible sisaldab \u00fcle 3000 mooduli, mis katavad s\u00fcsteemihalduse, v\u00f5rgukonfiguratsiooni, pilveplatformide ja rakenduste haldamise vajadused.</p>"},{"location":"ansible_basics/lecture/#13-toovoog","title":"1.3 T\u00f6\u00f6voog","text":"<p>Ansible'i t\u00e4itmists\u00fckkel koosneb j\u00e4rgmistest sammudest:</p> <pre><code>flowchart TD\n    A[Inventory lugemine] --&gt; B[SSH \u00fchendused]\n    B --&gt; C[Mooduli koodi edastamine]\n    C --&gt; D[Operatsioonide t\u00e4itmine]\n    D --&gt; E[Tulemuste kogumine]\n    E --&gt; F[Ajutiste failide eemaldamine]\n\n    style A fill:#99ccff\n    style B fill:#ffcc99\n    style C fill:#99ff99\n    style D fill:#ff9999\n    style E fill:#cc99ff\n    style F fill:#ffff99</code></pre> <ol> <li>Inventory lugemine - s\u00fcsteemide nimekirja laadimine</li> <li>SSH \u00fchenduste loomine - paralleelsed \u00fchendused sihtm\u00e4rkidega</li> <li>Mooduli koodi edastamine - vajalike Python skriptide ajutine kopeerimine</li> <li>Operatsioonide t\u00e4itmine - k\u00e4skude paralleelne k\u00e4ivitamine</li> <li>Tulemuste kogumine - v\u00e4ljundi ja staatuse tagastamine</li> <li>Ajutiste failide eemaldamine - puhastusoperatsioonid</li> </ol>"},{"location":"ansible_basics/lecture/#2-idempotency-printsiip","title":"2. Idempotency printsiip","text":"<p>Idempotency on Ansible'i p\u00f5hiprintsiip, mis tagab, et sama operatsiooni korduvk\u00e4ivitamine ei muuda s\u00fcsteemi olekut, kui soovitud olek on juba saavutatud.</p> Bash<pre><code># Esimene k\u00e4ivitamine - nginx installitakse\nansible all -m package -a \"name=nginx state=present\"\n\n# Teine k\u00e4ivitamine - nginx on juba olemas, muudatusi ei tehta\nansible all -m package -a \"name=nginx state=present\"\n</code></pre> <p>Idempotency eelised: - Turvalisus - operatsioonide korduvk\u00e4ivitamine ei tekita kahjulikke k\u00f5rvalm\u00f5jusid - Etteennustatavus - s\u00fcsteemi l\u00f5ppolek on alati sama - Usaldusv\u00e4\u00e4rsus - automatiseerimise skriptid on stabiilsed</p>"},{"location":"ansible_basics/lecture/#3-vordlus-konkurentidega","title":"3. V\u00f5rdlus konkurentidega","text":""},{"location":"ansible_basics/lecture/#31-ansible-vs-puppet","title":"3.1 Ansible vs Puppet","text":"Aspekt Ansible Puppet Arhitektuur Agentless Agent-p\u00f5hine Konfiguratsioon YAML Ruby DSL Mudel Push Pull \u00d5ppimisk\u00f5ver Madal K\u00f5rge"},{"location":"ansible_basics/lecture/#32-ansible-vs-chef","title":"3.2 Ansible vs Chef","text":"Aspekt Ansible Chef Keel YAML Ruby Seadistamine Lihtne Keeruline Skaleeritavus Hea V\u00e4ga hea \u00d6kos\u00fcsteem Lai Lai"},{"location":"ansible_basics/lecture/#4-praktiline-naide","title":"4. Praktiline n\u00e4ide","text":"<p>Lihtne \u00fchenduvuse testimine:</p> Bash<pre><code># SSH v\u00f5tmete seadistamine\nssh-keygen -t ed25519 -f ~/.ssh/ansible_key\nssh-copy-id -i ~/.ssh/ansible_key.pub user@target_host\n\n# Inventory loomine\necho \"target_host ansible_user=user\" &gt; inventory\n\n# \u00dchenduvuse testimine\nansible -i inventory target_host -m ping\n</code></pre> <p>Oodatav v\u00e4ljund: JSON<pre><code>target_host | SUCCESS =&gt; {\n    \"ansible_facts\": {\n        \"discovered_interpreter_python\": \"/usr/bin/python3\"\n    },\n    \"changed\": false,\n    \"ping\": \"pong\"\n}\n</code></pre></p>"},{"location":"ansible_basics/lecture/#5-ssh-ja-inventory-konfigureerimine","title":"5. SSH ja Inventory konfigureerimine","text":""},{"location":"ansible_basics/lecture/#51-ssh-autentimise-alused","title":"5.1 SSH autentimise alused","text":"<p>Ansible tugineb SSH protokollile kommunikatsiooniks hallatavate s\u00fcsteemidega. T\u00f5husa automatiseerimise saavutamiseks on vajalik seadistada v\u00f5tme-p\u00f5hine autentimine, mis elimineerib interaktiivse parooli sisestamise vajaduse.</p>"},{"location":"ansible_basics/lecture/#511-ssh-votmete-genereerimine","title":"5.1.1 SSH v\u00f5tmete genereerimine","text":"<p>SSH v\u00f5tmepaaride loomine toimub <code>ssh-keygen</code> utiliidiga. Soovitatav on kasutada Ed25519 algoritmi turvalisuse ja j\u00f5udluse optimaalse tasakaalu saavutamiseks.</p> Bash<pre><code># Ed25519 v\u00f5tme genereerimine\nssh-keygen -t ed25519 -C \"ansible-automation\" -f ~/.ssh/ansible_ed25519\n\n# RSA v\u00f5tme genereerimine (vajadusel)\nssh-keygen -t rsa -b 4096 -C \"ansible-automation\" -f ~/.ssh/ansible_rsa\n</code></pre> <p>Parameetrite selgitus: - <code>-t</code> - kr\u00fcptograafilise algoritmi m\u00e4\u00e4ramine - <code>-b</code> - v\u00f5tme pikkus bittides (RSA jaoks) - <code>-C</code> - kommentaar v\u00f5tme identifitseerimiseks - <code>-f</code> - v\u00e4ljundfaili asukoha m\u00e4\u00e4ramine</p>"},{"location":"ansible_basics/lecture/#512-ssh-agendi-konfigureerimine","title":"5.1.2 SSH agendi konfigureerimine","text":"<p>SSH agent h\u00f5lbustab privaatv\u00f5tmete haldamist, lubades autentimist ilma korduvate paroolide sisestamiseta.</p> Bash<pre><code># SSH agendi k\u00e4ivitamine\neval \"$(ssh-agent -s)\"\n\n# Privaatv\u00f5tme lisamine agenti\nssh-add ~/.ssh/ansible_ed25519\n\n# Agendis olevate v\u00f5tmete kontroll\nssh-add -l\n</code></pre> <p>Automaatse agendi k\u00e4ivitamise seadistamine shell'i konfiguratsioonis:</p> Bash<pre><code># ~/.bashrc v\u00f5i ~/.zshrc\nif [ -z \"$SSH_AUTH_SOCK\" ]; then\n    eval \"$(ssh-agent -s)\"\n    ssh-add ~/.ssh/ansible_ed25519 2&gt;/dev/null\nfi\n</code></pre>"},{"location":"ansible_basics/lecture/#513-avalike-votmete-levitamine","title":"5.1.3 Avalike v\u00f5tmete levitamine","text":"<p>Avalike v\u00f5tmete autoriseeritud v\u00f5tmete nimekirja lisamine:</p> Bash<pre><code># ssh-copy-id kasutamine (lihtsaim)\nssh-copy-id -i ~/.ssh/ansible_ed25519.pub kasutaja@sihtserver\n\n# K\u00e4sitsi kopeerimine\ncat ~/.ssh/ansible_ed25519.pub | ssh kasutaja@sihtserver \\\n  \"mkdir -p ~/.ssh &amp;&amp; cat &gt;&gt; ~/.ssh/authorized_keys\"\n\n# Batch levitamine\nfor server in server1 server2 server3; do\n    ssh-copy-id -i ~/.ssh/ansible_ed25519.pub kasutaja@$server\ndone\n</code></pre>"},{"location":"ansible_basics/lecture/#52-inventory-struktuur-ja-formaat","title":"5.2 Inventory struktuur ja formaat","text":""},{"location":"ansible_basics/lecture/#521-ini-formaat","title":"5.2.1 INI formaat","text":"<p>Traditsiooniline inventory formaat, sobiv lihtsamatele konfiguratsioonidele:</p> INI<pre><code># \u00dcksikud hostid\nmail.example.com\nweb1.example.com\nweb2.example.com\n\n# Hostide grupid\n[webservers]\nweb1.example.com\nweb2.example.com\nweb3.example.com\n\n[dbservers]\ndb1.example.com ansible_port=5432\ndb2.example.com ansible_port=5432\n\n# Grupihierarhia\n[production:children]\nwebservers\ndbservers\n\n# Grupi muutujad\n[webservers:vars]\nhttp_port=80\nhttps_port=443\nnginx_user=www-data\n\n[dbservers:vars]\ndb_port=3306\ndb_user=admin\n</code></pre>"},{"location":"ansible_basics/lecture/#522-yaml-formaat","title":"5.2.2 YAML formaat","text":"<p>Kaasaegne formaat, mis v\u00f5imaldab keerulisemat struktureerimist:</p> YAML<pre><code>all:\n  children:\n    webservers:\n      hosts:\n        web1.example.com:\n          ansible_user: ubuntu\n        web2.example.com:\n          ansible_user: ubuntu\n          ansible_port: 2222\n        web3.example.com:\n          ansible_user: centos\n      vars:\n        http_port: 80\n        https_port: 443\n        nginx_user: www-data\n\n    dbservers:\n      hosts:\n        db1.example.com:\n          ansible_port: 5432\n        db2.example.com:\n          ansible_port: 5432\n      vars:\n        db_port: 3306\n        db_user: admin\n\n    production:\n      children:\n        webservers:\n        dbservers:\n</code></pre>"},{"location":"ansible_basics/lecture/#523-dunaamiline-inventory","title":"5.2.3 D\u00fcnaamiline inventory","text":"<p>Suurte v\u00f5i muutuvate infrastruktuuride jaoks v\u00f5ib implementeerida d\u00fcnaamilise inventory genereerimise:</p> Python<pre><code>#!/usr/bin/env python3\nimport json\nimport requests\n\ndef get_inventory():\n    \"\"\"Genereeri inventory v\u00e4listest allikatest\"\"\"\n    inventory = {\n        'webservers': {\n            'hosts': [],\n            'vars': {'http_port': 80}\n        },\n        'dbservers': {\n            'hosts': [],\n            'vars': {'db_port': 3306}\n        },\n        '_meta': {\n            'hostvars': {}\n        }\n    }\n\n    # N\u00e4ide: loe serverid API-st\n    # servers = requests.get('https://api.company.com/servers').json()\n    # for server in servers:\n    #     inventory[server['group']]['hosts'].append(server['hostname'])\n\n    return inventory\n\nif __name__ == '__main__':\n    print(json.dumps(get_inventory(), indent=2))\n</code></pre>"},{"location":"ansible_basics/lecture/#6-ansible-konfigureerimine","title":"6. Ansible konfigureerimine","text":""},{"location":"ansible_basics/lecture/#61-ansiblecfg-faili-struktuur","title":"6.1 ansible.cfg faili struktuur","text":"<p>Ansible'i k\u00e4itumist saab kohandada konfiguratsiooni faili abil. Soovitatav on hoida <code>ansible.cfg</code> faili projekti juurkaustas.</p> INI<pre><code>[defaults]\n# Inventory asukoht\ninventory = inventory/\n\n# SSH seadistused\nhost_key_checking = False\nremote_user = ansible\nprivate_key_file = ~/.ssh/ansible_ed25519\n\n# Paralleelsuse seadistused\nforks = 10\ntimeout = 30\n\n# Logimise seadistused\nlog_path = ./ansible.log\ndisplay_skipped_hosts = False\n\n# Callback pluginide konfigureerimine\nstdout_callback = yaml\nbin_ansible_callbacks = True\n\n[ssh_connection]\n# SSH \u00fchenduste optimeerimine\nssh_args = -o ControlMaster=auto -o ControlPersist=60s -o UserKnownHostsFile=/dev/null\ncontrol_path_dir = ~/.ansible/cp\npipelining = True\nretries = 3\n\n[privilege_escalation]\nbecome = True\nbecome_method = sudo\nbecome_user = root\nbecome_ask_pass = False\n</code></pre>"},{"location":"ansible_basics/lecture/#62-konfiguratsiooni-prioriteet","title":"6.2 Konfiguratsiooni prioriteet","text":"<p>Ansible otsib konfiguratsiooni j\u00e4rgmises j\u00e4rjekorras:</p> <ol> <li>ANSIBLE_CONFIG keskkonna muutuja</li> <li>ansible.cfg praeguses t\u00f6\u00f6kaustas</li> <li>~/.ansible.cfg kasutaja kodukaustas</li> <li>/etc/ansible/ansible.cfg s\u00fcsteemi tasemel</li> </ol> <p>Kehtiva konfiguratsiooni kontroll:</p> Bash<pre><code># Konfiguratsiooni vaatamine\nansible-config view\n\n# K\u00f5ikide parameetrite dump\nansible-config dump\n</code></pre>"},{"location":"ansible_basics/lecture/#63-host-patterns-ja-sihtmarkide-valimine","title":"6.3 Host patterns ja sihtm\u00e4rkide valimine","text":"<p>Ansible v\u00f5imaldab paindlikku serverite valimist erinevate mustrite abil:</p> Bash<pre><code># K\u00f5ik hostid\nansible all -m ping\n\n# Konkreetne grupp\nansible webservers -m ping\n\n# Mitu gruppi\nansible webservers:dbservers -m ping\n\n# V\u00e4listamine\nansible all:!dbservers -m ping\n\n# L\u00f5ikumine\nansible webservers:&amp;production -m ping\n\n# Regulaaravaldised\nansible ~web.* -m ping\n\n# Vahemiku m\u00e4\u00e4ramine\nansible web[1:3] -m ping\n</code></pre>"},{"location":"ansible_basics/lecture/#7-uhenduse-diagnostika","title":"7. \u00dchenduse diagnostika","text":""},{"location":"ansible_basics/lecture/#71-pohilised-testid","title":"7.1 P\u00f5hilised testid","text":"Bash<pre><code># \u00dchenduvuse test\nansible all -m ping\n\n# SSH \u00fchenduse detailne test\nansible all -m command -a \"whoami\" -vvv\n\n# S\u00fcsteemi faktide kogumine\nansible all -m setup --tree /tmp/facts\n</code></pre>"},{"location":"ansible_basics/lecture/#72-tuupilised-probleemid-ja-lahendused","title":"7.2 T\u00fc\u00fcpilised probleemid ja lahendused","text":"<p>SSH v\u00f5tme probleemid: Bash<pre><code># V\u00f5tme \u00f5iguste kontroll\nchmod 600 ~/.ssh/ansible_ed25519\nchmod 644 ~/.ssh/ansible_ed25519.pub\n\n# SSH agendi kontroll\nssh-add -l\n</code></pre></p> <p>Host key verification: Bash<pre><code># Ajutine keelamine\nexport ANSIBLE_HOST_KEY_CHECKING=False\n\n# T\u00e4ielik keelamine\necho \"host_key_checking = False\" &gt;&gt; ansible.cfg\n</code></pre></p> <p>\u00d5iguste probleemid: Bash<pre><code># Sudo konfiguratsiooni test\nansible all -m command -a \"sudo whoami\"\n\n# Sudoers faili kontroll\nansible all -m shell -a \"sudo -l\"\n</code></pre></p>"},{"location":"ansible_basics/lecture/#8-inventory-best-practices","title":"8. Inventory best practices","text":""},{"location":"ansible_basics/lecture/#81-suurte-projektide-struktuur","title":"8.1 Suurte projektide struktuur","text":"Text Only<pre><code>inventory/\n\u251c\u2500\u2500 production/\n\u2502   \u251c\u2500\u2500 hosts.yml\n\u2502   \u251c\u2500\u2500 group_vars/\n\u2502   \u2502   \u251c\u2500\u2500 all/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 common.yml\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 vault.yml\n\u2502   \u2502   \u251c\u2500\u2500 webservers.yml\n\u2502   \u2502   \u2514\u2500\u2500 dbservers.yml\n\u2502   \u2514\u2500\u2500 host_vars/\n\u2502       \u251c\u2500\u2500 web1.example.com.yml\n\u2502       \u2514\u2500\u2500 db1.example.com.yml\n\u251c\u2500\u2500 staging/\n\u2514\u2500\u2500 development/\n</code></pre>"},{"location":"ansible_basics/lecture/#82-muutujate-hierarhia","title":"8.2 Muutujate hierarhia","text":"<p>Ansible muutujate prioriteet (k\u00f5rgem alistab madalam):</p> <ol> <li>Extra vars (<code>ansible-playbook -e</code>)</li> <li>Task vars</li> <li>Block vars</li> <li>Role ja include vars</li> <li>Play vars</li> <li>Host facts</li> <li>Host vars (inventory)</li> <li>Group vars (inventory)</li> <li>Group vars (all)</li> <li>Role defaults</li> </ol>"},{"location":"ansible_basics/lecture/#83-turvalisuse-aspektid","title":"8.3 Turvalisuse aspektid","text":"<p>Tundliku informatsiooni kaitsmine Ansible Vault'iga:</p> Bash<pre><code># Vault faili loomine\nansible-vault create group_vars/all/vault.yml\n\n# Vault faili redigeerimine\nansible-vault edit group_vars/all/vault.yml\n\n# Vault parooliga k\u00e4ivitamine\nansible-playbook --ask-vault-pass site.yml\n</code></pre>"},{"location":"ansible_basics/lecture/#9-ad-hoc-kaskude-kasutamine","title":"9. Ad-hoc k\u00e4skude kasutamine","text":""},{"location":"ansible_basics/lecture/#91-ad-hoc-kaskude-olemus-ja-rakendusala","title":"9.1 Ad-hoc k\u00e4skude olemus ja rakendusala","text":"<p>Ad-hoc k\u00e4sud on Ansible'i funktsioon, mis v\u00f5imaldab k\u00e4ivitada \u00fchekordse operatsioone otse k\u00e4surealt, ilma playbook'ide loomise vajaduseta. Need sobivad kiireteks uuringulisteks v\u00f5i diagnostilisteks toiminguteks.</p> <p>Kasutamise stsenaariumid:</p> <p>Sobivad rakendused: - S\u00fcsteemi oleku kiire kontroll - Diagnostiliste andmete kogumine - Incident response operatsioonid - Eksploratiivsed uuringud - Monitoring ja alerting</p> <p>Ebasobivad rakendused: - Keerulised mitme sammuga konfiguratsioonid - Regulaarsed hooldusoperatsioonid - Dokumenteerimist n\u00f5udvad protseduurid - Produktsiooni deployment'id</p> <p>S\u00fcntaksi struktuur:</p> <p>Ad-hoc k\u00e4skude p\u00f5hiline formaat:</p> Bash<pre><code>ansible &lt;target&gt; -m &lt;module&gt; -a \"&lt;arguments&gt;\" [options]\n</code></pre> <p>Komponendid: - <code>&lt;target&gt;</code> - inventory pattern v\u00f5i grupi nimi - <code>&lt;module&gt;</code> - kasutatav Ansible moodul - <code>&lt;arguments&gt;</code> - mooduli parameetrid - <code>[options]</code> - t\u00e4iendavad k\u00e4sulipud</p>"},{"location":"ansible_basics/lecture/#92-pohilised-moodulid","title":"9.2 P\u00f5hilised moodulid","text":""},{"location":"ansible_basics/lecture/#921-ping-uhenduvuse-testimine","title":"9.2.1 ping - \u00dchenduvuse testimine","text":"<p>Ping moodul kontrollib SSH \u00fchenduvust ja Python interpreteri olemasolu:</p> Bash<pre><code># K\u00f5ikide hostide test\nansible all -m ping\n\n# Konkreetse grupi test\nansible webservers -m ping\n\n# Pattern matching\nansible 'web*' -m ping\n\n# V\u00e4ljund t\u00fc\u00fcpilise eduka vastuse korral\nansible web1.example.com -m ping\n# web1.example.com | SUCCESS =&gt; {\n#     \"ansible_facts\": {\n#         \"discovered_interpreter_python\": \"/usr/bin/python3\"\n#     },\n#     \"changed\": false,\n#     \"ping\": \"pong\"\n# }\n</code></pre>"},{"location":"ansible_basics/lecture/#922-command-vs-shell-moodulid","title":"9.2.2 command vs shell moodulid","text":"<p>command moodul - turvalisem variant, mis ei luba shell'i funktsionaalsust:</p> Bash<pre><code># S\u00fcsteemi aja kuvamine\nansible all -m command -a \"date\"\n\n# Protsesside loetelu\nansible all -m command -a \"ps aux\"\n\n# Failis\u00fcsteemi statistika\nansible all -m command -a \"df -h\"\n\n# Shell operaatorid EI t\u00f6\u00f6ta\nansible all -m command -a \"ps aux | grep nginx\"  # EBA\u00d5NNESTUB\n</code></pre> <p>shell moodul - v\u00f5imaldab shell'i funktsionaalsust, kuid suurema turvariski hinnaga:</p> Bash<pre><code># Torudega k\u00e4sud\nansible all -m shell -a \"ps aux | grep nginx\"\n\n# Keskkonna muutujad\nansible all -m shell -a \"echo $HOME\"\n\n# K\u00e4su asendamine\nansible all -m shell -a \"kill $(pgrep -f nginx)\"\n\n# Failide \u00fcmbersuunamine\nansible all -m shell -a \"dmesg | tail -20 &gt; /tmp/kernel.log\"\n</code></pre>"},{"location":"ansible_basics/lecture/#923-package-tarkvarahaldus","title":"9.2.3 package - Tarkvarahaldus","text":"<p>Universaalne pakettide haldamise moodul:</p> Bash<pre><code># \u00dche paketi installimine\nansible all -m package -a \"name=htop state=present\" --become\n\n# Mitme paketi installimine\nansible all -m package -a \"name=curl,wget,git state=present\" --become\n\n# Paketi eemaldamine\nansible webservers -m package -a \"name=apache2 state=absent\" --become\n\n# Pakettide cache uuendamine (Debian/Ubuntu)\nansible ubuntu_hosts -m package -a \"update_cache=yes\" --become\n</code></pre> <p>Spetsiifilised pakettide haldurid:</p> Bash<pre><code># APT (Debian/Ubuntu)\nansible ubuntu_hosts -m apt -a \"name=nginx state=present update_cache=yes\" --become\n\n# YUM (RHEL/CentOS 7)\nansible centos_hosts -m yum -a \"name=nginx state=present\" --become\n\n# DNF (Fedora, RHEL 8+)\nansible fedora_hosts -m dnf -a \"name=nginx state=present\" --become\n</code></pre>"},{"location":"ansible_basics/lecture/#924-service-teenuste-haldamine","title":"9.2.4 service - Teenuste haldamine","text":"<p>S\u00fcsteemi teenuste kontroll:</p> Bash<pre><code># Teenuse k\u00e4ivitamine\nansible webservers -m service -a \"name=nginx state=started\" --become\n\n# Teenuse peatamine\nansible webservers -m service -a \"name=apache2 state=stopped\" --become\n\n# Teenuse taask\u00e4ivitamine\nansible webservers -m service -a \"name=nginx state=restarted\" --become\n\n# Autostart'i lubamine\nansible webservers -m service -a \"name=nginx enabled=yes\" --become\n\n# Kombineeritud operatsioon\nansible webservers -m service -a \"name=nginx state=started enabled=yes\" --become\n</code></pre>"},{"location":"ansible_basics/lecture/#925-file-failisusteemi-operatsioonid","title":"9.2.5 file - Failis\u00fcsteemi operatsioonid","text":"<p>Failide ja kataloogide haldamine:</p> Bash<pre><code># Kataloogi loomine\nansible all -m file -a \"path=/opt/application state=directory mode=0755\" --become\n\n# Faili loomine (touch)\nansible all -m file -a \"path=/tmp/marker state=touch\"\n\n# \u00d5iguste muutmine\nansible all -m file -a \"path=/etc/app.conf owner=app group=app mode=0640\" --become\n\n# Simbolilise lingi loomine\nansible all -m file -a \"src=/usr/bin/python3 dest=/usr/bin/python state=link\" --become\n\n# Failide kustutamine\nansible all -m file -a \"path=/tmp/tempfile state=absent\"\n\n# Rekursiivne \u00f5iguste m\u00e4\u00e4ramine\nansible all -m file -a \"path=/var/www state=directory owner=www-data group=www-data recurse=yes\" --become\n</code></pre>"},{"location":"ansible_basics/lecture/#926-copy-failide-edastamine","title":"9.2.6 copy - Failide edastamine","text":"<p>Sisu kopeerimine control node'st managed node'idesse:</p> Bash<pre><code># Faili kopeerimine\nansible webservers -m copy -a \"src=/local/config.conf dest=/etc/app/config.conf\" --become\n\n# Backup'iga kopeerimine\nansible webservers -m copy -a \"src=nginx.conf dest=/etc/nginx/nginx.conf backup=yes\" --become\n\n# Inline sisu loomine\nansible all -m copy -a \"content='server_tokens off;' dest=/etc/nginx/conf.d/security.conf\" --become\n\n# \u00d5igustega kopeerimine\nansible all -m copy -a \"src=script.sh dest=/usr/local/bin/script.sh mode=0755 owner=root\" --become\n</code></pre>"},{"location":"ansible_basics/lecture/#93-susteemi-diagnostika","title":"9.3 S\u00fcsteemi diagnostika","text":""},{"location":"ansible_basics/lecture/#931-riistvara-ja-susteemi-informatsioon","title":"9.3.1 Riistvara ja s\u00fcsteemi informatsioon","text":"<p>Setup moodul kogub p\u00f5hjalikku informatsiooni hallatavate s\u00fcsteemide kohta:</p> Bash<pre><code># Operatsioonis\u00fcsteemi informatsioon\nansible all -m setup -a \"filter=ansible_distribution*\"\n\n# M\u00e4lu informatsioon\nansible all -m setup -a \"filter=ansible_memory_mb\"\n\n# V\u00f5rgu konfiguratsioon\nansible all -m setup -a \"filter=ansible_default_ipv4\"\n\n# CPU informatsioon\nansible all -m setup -a \"filter=ansible_processor*\"\n\n# Kettaruumi informatsioon\nansible all -m setup -a \"filter=ansible_mounts\"\n\n# K\u00f5ik faktid (mahukad andmed)\nansible all -m setup --tree /tmp/facts/\n</code></pre>"},{"location":"ansible_basics/lecture/#932-performance-monitoring","title":"9.3.2 Performance monitoring","text":"<p>S\u00fcsteemi j\u00f5udluse kontroll:</p> Bash<pre><code># S\u00fcsteemi koormus\nansible all -m command -a \"uptime\"\n\n# M\u00e4lu kasutus\nansible all -m shell -a \"free -h\"\n\n# Kettakasutus\nansible all -m shell -a \"df -h\"\n\n# Top protsessid CPU j\u00e4rgi\nansible all -m shell -a \"ps aux --sort=-%cpu | head -10\"\n\n# Top protsessid m\u00e4lu j\u00e4rgi\nansible all -m shell -a \"ps aux --sort=-%mem | head -10\"\n\n# I/O statistika\nansible all -m shell -a \"iostat -x 1 1\" \n\n# Network statistika\nansible all -m shell -a \"ss -tuln\"\n</code></pre>"},{"location":"ansible_basics/lecture/#933-logide-analuus","title":"9.3.3 Logide anal\u00fc\u00fcs","text":"<p>S\u00fcsteemi logide kiire uurimine:</p> Bash<pre><code># S\u00fcsteemi logide viimaseid ridu\nansible all -m shell -a \"journalctl -n 20 --no-pager\"\n\n# Specific teenuse logid\nansible webservers -m shell -a \"journalctl -u nginx -n 10 --no-pager\"\n\n# Error'ite otsimine\nansible all -m shell -a \"journalctl --since='1 hour ago' -p err --no-pager\"\n\n# Kerneli s\u00f5numid\nansible all -m shell -a \"dmesg | tail -20\"\n\n# Faili-p\u00f5hised logid\nansible webservers -m shell -a \"tail -20 /var/log/nginx/error.log\"\n</code></pre>"},{"location":"ansible_basics/lecture/#94-tapsemad-operatsioonid","title":"9.4 T\u00e4psemad operatsioonid","text":""},{"location":"ansible_basics/lecture/#941-kasutajate-haldamine","title":"9.4.1 Kasutajate haldamine","text":"Bash<pre><code># Kasutaja loomine\nansible all -m user -a \"name=appuser shell=/bin/bash home=/home/appuser\" --become\n\n# Kasutaja grupi muutmine\nansible all -m user -a \"name=appuser groups=sudo,www-data append=yes\" --become\n\n# SSH v\u00f5tme lisamine\nansible all -m authorized_key -a \"user=appuser key='{{ lookup('file', '~/.ssh/id_rsa.pub') }}'\" --become\n</code></pre>"},{"location":"ansible_basics/lecture/#942-vorgu-diagnostika","title":"9.4.2 V\u00f5rgu diagnostika","text":"Bash<pre><code># \u00dchenduvuse test\nansible all -m command -a \"ping -c 3 google.com\"\n\n# DNS lahendamine\nansible all -m command -a \"nslookup example.com\"\n\n# Pordid kuulamas\nansible all -m shell -a \"netstat -tlnp\"\n\n# Aktiivsed \u00fchendused\nansible all -m shell -a \"ss -tupln\"\n</code></pre>"},{"location":"ansible_basics/lecture/#95-kasurea-lipud-ja-optioonid","title":"9.5 K\u00e4surea lipud ja optioonid","text":""},{"location":"ansible_basics/lecture/#951-privilege-escalation","title":"9.5.1 Privilege escalation","text":"Bash<pre><code># Sudo kasutamine\nansible all -m package -a \"name=htop state=present\" --become\n\n# Konkreetse kasutajana k\u00e4ivitamine\nansible all -m command -a \"whoami\" --become-user=postgres --become\n\n# Sudo meetodi m\u00e4\u00e4ramine\nansible all -m command -a \"id\" --become-method=su --become\n</code></pre>"},{"location":"ansible_basics/lecture/#952-paralleelsuse-kontroll","title":"9.5.2 Paralleelsuse kontroll","text":"Bash<pre><code># J\u00e4rjestikune t\u00e4itmine\nansible all -m ping --forks=1\n\n# Suurem paralleelsus\nansible all -m setup --forks=20\n</code></pre>"},{"location":"ansible_basics/lecture/#953-sihtmarkide-piiramine","title":"9.5.3 Sihtm\u00e4rkide piiramine","text":"Bash<pre><code># Pattern'iga piiramine\nansible 'web*' -m ping\n\n# Grupi v\u00e4listamine\nansible all:!databases -m command -a \"uptime\"\n\n# Kombineeritud tingimused\nansible webservers:&amp;production -m service -a \"name=nginx state=restarted\" --become\n\n# Hosti limiteerimine\nansible all --limit web1.example.com,web2.example.com -m ping\n</code></pre>"},{"location":"ansible_basics/lecture/#954-kuiva-kaivitamise-reziim","title":"9.5.4 Kuiva k\u00e4ivitamise re\u017eiim","text":"Bash<pre><code># Kontroll ilma muudatusteta\nansible all -m package -a \"name=nginx state=present\" --check\n\n# Muudatuste kuvamine\nansible all -m copy -a \"src=test.conf dest=/etc/test.conf\" --check --diff\n</code></pre>"},{"location":"ansible_basics/lecture/#96-batch-operatsioonid","title":"9.6 Batch operatsioonid","text":""},{"location":"ansible_basics/lecture/#961-mitme-kasu-jarjestus","title":"9.6.1 Mitme k\u00e4su j\u00e4rjestus","text":"<p>Keerulisemate \u00fclesannete jaoks v\u00f5ib kombineerida mitu ad-hoc k\u00e4sku:</p> Bash<pre><code>#!/bin/bash\n# Veebiserveri kiire restart\nansible webservers -m service -a \"name=nginx state=stopped\" --become\nansible webservers -m command -a \"sleep 5\"\nansible webservers -m service -a \"name=nginx state=started\" --become\nansible webservers -m shell -a \"curl -I http://localhost\" \n</code></pre>"},{"location":"ansible_basics/lecture/#962-informatsioon-kogumise-skript","title":"9.6.2 Informatsioon kogumise skript","text":"Bash<pre><code>#!/bin/bash\n# S\u00fcsteemi auditi skript\necho \"=== System Information ===\" &gt; audit.log\nansible all -m setup -a \"filter=ansible_distribution*\" &gt;&gt; audit.log\necho \"=== Disk Usage ===\" &gt;&gt; audit.log  \nansible all -m shell -a \"df -h\" &gt;&gt; audit.log\necho \"=== Memory Usage ===\" &gt;&gt; audit.log\nansible all -m shell -a \"free -h\" &gt;&gt; audit.log\necho \"=== Running Services ===\" &gt;&gt; audit.log\nansible all -m shell -a \"systemctl list-units --type=service --state=running --no-pager\" &gt;&gt; audit.log\n</code></pre>"},{"location":"ansible_basics/lecture/#10-yaml-suntaks-ja-playbookide-alused","title":"10. YAML s\u00fcntaks ja Playbook'ide alused","text":""},{"location":"ansible_basics/lecture/#101-yaml-konfiguratsioonikeel","title":"10.1 YAML konfiguratsioonikeel","text":"<p>YAML (YAML Ain't Markup Language) on inimloetav andmete serialiseerimise standard, mida Ansible kasutab konfiguratsioonifailide ja playbook'ide kirjutamiseks. YAML-i eesm\u00e4rk on pakkuda lihtsat ja intuitiivset s\u00fcntaksit keeruliste andmestruktuuride kirjeldamiseks.</p> <p>YAML vs alternatiivsed formaadid:</p> <p>YAML: YAML<pre><code>application:\n  name: \"web-service\"\n  version: \"1.2.3\"\n  ports:\n    - 80\n    - 443\n  configuration:\n    debug: false\n    max_connections: 1000\n</code></pre></p> <p>JSON ekvivalent: JSON<pre><code>{\n  \"application\": {\n    \"name\": \"web-service\",\n    \"version\": \"1.2.3\",\n    \"ports\": [80, 443],\n    \"configuration\": {\n      \"debug\": false,\n      \"max_connections\": 1000\n    }\n  }\n}\n</code></pre></p> <p>XML ekvivalent: XML<pre><code>&lt;application&gt;\n  &lt;name&gt;web-service&lt;/name&gt;\n  &lt;version&gt;1.2.3&lt;/version&gt;\n  &lt;ports&gt;\n    &lt;port&gt;80&lt;/port&gt;\n    &lt;port&gt;443&lt;/port&gt;\n  &lt;/ports&gt;\n  &lt;configuration&gt;\n    &lt;debug&gt;false&lt;/debug&gt;\n    &lt;max_connections&gt;1000&lt;/max_connections&gt;\n  &lt;/configuration&gt;\n&lt;/application&gt;\n</code></pre></p>"},{"location":"ansible_basics/lecture/#102-yaml-suntaksi-reeglid","title":"10.2 YAML s\u00fcntaksi reeglid","text":""},{"location":"ansible_basics/lecture/#1021-taandrimise-nouded","title":"10.2.1 Taandrimise n\u00f5uded","text":"<p>YAML kasutab taandrimist hierarhia m\u00e4\u00e4ramiseks. Taandrimine peab olema j\u00e4rjekindel ja kasutama t\u00fchikuid:</p> YAML<pre><code># \u00d5ige struktuur\nparent:\n  child1: value1\n  child2: value2\n  nested_parent:\n    nested_child: nested_value\n\n# Vale struktuur\nparent:\nchild1: value1          # Vale tase\n  child2: value2\n    nested_parent:      # Inconsistent indentation\n  nested_child: value   # Vale tase\n</code></pre>"},{"location":"ansible_basics/lecture/#1022-andmetuubid","title":"10.2.2 Andmet\u00fc\u00fcbid","text":"<p>Skalaarid: YAML<pre><code>string_value: \"Hello World\"\ninteger_value: 42\nfloat_value: 3.14159\nboolean_true: true\nboolean_false: false\nnull_value: null\n</code></pre></p> <p>Loendid (Arrays): YAML<pre><code># Kompaktne formaat\nfruits: [apple, banana, orange]\n\n# Laiendatud formaat\nfruits:\n  - apple\n  - banana\n  - orange\n\n# Objektide loend\nservers:\n  - name: web1\n    ip: 192.168.1.10\n  - name: web2\n    ip: 192.168.1.11\n</code></pre></p> <p>V\u00f5tme-v\u00e4\u00e4rtuse paarid (Dictionaries): YAML<pre><code>server_config:\n  hostname: web1.example.com\n  port: 80\n  ssl_enabled: true\n  allowed_ips:\n    - 192.168.1.0/24\n    - 10.0.0.0/8\n</code></pre></p>"},{"location":"ansible_basics/lecture/#1023-mitme-rea-stringid","title":"10.2.3 Mitme rea stringid","text":"<p>Literal style (|) - s\u00e4ilitab reavahetused: YAML<pre><code>description: |\n  See on pikk kirjeldus,\n  mis sisaldab mitut rida\n  ja s\u00e4ilitab k\u00f5ik reavahetused.\n</code></pre></p> <p>Folded style (&gt;) - \u00fchendab ridadeks: YAML<pre><code>summary: &gt;\n  See tekst kirjutatakse\n  mitmel real, aga tulemuseks\n  on \u00fcks pikk rida.\n</code></pre></p>"},{"location":"ansible_basics/lecture/#103-playbookide-struktuur","title":"10.3 Playbook'ide struktuur","text":""},{"location":"ansible_basics/lecture/#1031-playbooki-anatoomia","title":"10.3.1 Playbook'i anatoomia","text":"<p>Playbook koosneb \u00fchest v\u00f5i mitmest \"play'st\", mis on suunatud konkreetsetele hostidele:</p> YAML<pre><code>---\n- name: \"Esimene play - veebiserveri seadistamine\"\n  hosts: webservers\n  become: yes\n  vars:\n    http_port: 80\n    server_name: example.com\n\n  tasks:\n    - name: \"Nginx'i installimine\"\n      package:\n        name: nginx\n        state: present\n\n- name: \"Teine play - andmebaasi seadistamine\"  \n  hosts: dbservers\n  become: yes\n\n  tasks:\n    - name: \"MySQL installimine\"\n      package:\n        name: mysql-server\n        state: present\n</code></pre>"},{"location":"ansible_basics/lecture/#1032-play-komponendid","title":"10.3.2 Play komponendid","text":"<p>Hosts directive - m\u00e4\u00e4rab sihtm\u00e4rgid, kus play k\u00e4ivitatakse:</p> YAML<pre><code>hosts: all                    # K\u00f5ik inventory hostid\nhosts: webservers            # Konkreetne grupp\nhosts: web*.example.com      # Pattern matching\nhosts: webservers:dbservers  # Mitme grupi kombinatsioon\nhosts: all:!production       # V\u00e4listamisega\n</code></pre> <p>Variables - muutujate defineerimine play tasemel:</p> YAML<pre><code>vars:\n  app_name: \"myapp\"\n  app_version: \"2.1.0\"\n  app_port: 8080\n  app_users:\n    - admin\n    - operator\n  app_config:\n    debug: false\n    timeout: 30\n</code></pre> <p>Tasks - \u00fclesannete loend, mis t\u00e4idetakse j\u00e4rjekorras:</p> YAML<pre><code>tasks:\n  - name: \"L\u00fchike, kirjeldav \u00fclesande nimi\"\n    module_name:\n      parameter1: value1\n      parameter2: value2\n    when: condition\n    tags: [tag1, tag2]\n</code></pre>"},{"location":"ansible_basics/lecture/#104-muutujate-kasutamine","title":"10.4 Muutujate kasutamine","text":""},{"location":"ansible_basics/lecture/#1041-muutujate-interpoleerimine","title":"10.4.1 Muutujate interpoleerimine","text":"<p>YAML-is kasutatakse Jinja2 template s\u00fcntaksit muutujate asendamiseks:</p> YAML<pre><code>- name: \"Rakenduse seadistamine\"\n  hosts: webservers\n  vars:\n    app_name: \"webstore\"\n    app_port: 8080\n    config_path: \"/etc/{{ app_name }}\"\n\n  tasks:\n    - name: \"Loo konfiguratsioonikaust {{ config_path }}\"\n      file:\n        path: \"{{ config_path }}\"\n        state: directory\n        mode: '0755'\n\n    - name: \"Genereeri konfiguratsioonifail\"\n      copy:\n        content: |\n          [application]\n          name={{ app_name }}\n          port={{ app_port }}\n          debug=false\n        dest: \"{{ config_path }}/app.conf\"\n</code></pre>"},{"location":"ansible_basics/lecture/#1042-muutujate-allikad","title":"10.4.2 Muutujate allikad","text":"<p>Ansible v\u00f5tab muutujaid mitmest allikast hierarhilises j\u00e4rjekorras:</p> <ol> <li>Extra vars (<code>-e</code> k\u00e4sureal)</li> <li>Task variables</li> <li>Block variables  </li> <li>Role variables</li> <li>Play variables</li> <li>Host facts</li> <li>Host variables</li> <li>Group variables</li> <li>Default variables</li> </ol> YAML<pre><code># group_vars/webservers.yml\nnginx_port: 80\nnginx_user: www-data\nssl_certificate: \"/etc/ssl/certs/{{ ansible_fqdn }}.crt\"\n\n# host_vars/web1.example.com.yml  \nnginx_port: 8080\ncustom_config: true\n</code></pre>"},{"location":"ansible_basics/lecture/#105-handlers-susteem","title":"10.5 Handlers s\u00fcsteem","text":"<p>Handlers on erik\u00fclesanded, mis k\u00e4ivitatakse ainult notification'i peale ja alles play l\u00f5pus:</p> YAML<pre><code>- name: \"Nginx'i konfigureerimine\"\n  hosts: webservers\n  become: yes\n\n  tasks:\n    - name: \"Nginx p\u00f5hikonfiguratsiooni uuendamine\"\n      template:\n        src: nginx.conf.j2\n        dest: /etc/nginx/nginx.conf\n      notify:\n        - restart nginx\n        - reload systemd\n\n    - name: \"SSL sertifikaadi paigaldamine\"\n      copy:\n        src: \"{{ ssl_cert_file }}\"\n        dest: /etc/ssl/certs/nginx.crt\n      notify: restart nginx\n\n  handlers:\n    - name: restart nginx\n      service:\n        name: nginx\n        state: restarted\n\n    - name: reload systemd\n      systemd:\n        daemon_reload: yes\n</code></pre> <p>Handler'i k\u00e4itumise reeglid: - K\u00e4ivitatakse ainult notification'i korral - K\u00e4ivitatakse play l\u00f5pus isegi siis, kui mitu task'i sama handler'it notify'ib - Ei k\u00e4ivitata, kui task eba\u00f5nnestub (v.a force_handlers: yes)</p>"},{"location":"ansible_basics/lecture/#11-praktiline-naide-lamp-stack","title":"11. Praktiline n\u00e4ide: LAMP stack","text":"<p>Kompleksne playbook veebiserveri infrastruktuuri seadistamiseks:</p> YAML<pre><code>---\n- name: \"LAMP stack'i paigaldamine ja konfigureerimine\"\n  hosts: webservers\n  become: yes\n  vars:\n    mysql_root_password: \"{{ vault_mysql_root_password }}\"\n    app_database: \"webapp_db\"\n    app_user: \"webapp_user\"\n    app_password: \"{{ vault_app_password }}\"\n    web_root: \"/var/www/html\"\n    php_packages:\n      - php\n      - php-mysql\n      - php-curl\n      - php-gd\n      - libapache2-mod-php\n\n  pre_tasks:\n    - name: \"S\u00fcsteemi uuendamine\"\n      package:\n        update_cache: yes\n        upgrade: dist\n\n  tasks:\n    - name: \"Apache veebiserveri installimine\"\n      package:\n        name: apache2\n        state: present\n      notify: enable apache\n\n    - name: \"MySQL serveri installimine\"\n      package:\n        name:\n          - mysql-server\n          - python3-pymysql\n        state: present\n      notify: \n        - start mysql\n        - secure mysql\n\n    - name: \"PHP ja moodulite installimine\"\n      package:\n        name: \"{{ php_packages }}\"\n        state: present\n      notify: restart apache\n\n    - name: \"Apache moodulite lubamine\"\n      apache2_module:\n        name: \"{{ item }}\"\n        state: present\n      loop:\n        - rewrite\n        - ssl\n      notify: restart apache\n\n    - name: \"Rakenduse kataloogi loomine\"\n      file:\n        path: \"{{ web_root }}/{{ app_database }}\"\n        state: directory\n        owner: www-data\n        group: www-data\n        mode: '0755'\n\n    - name: \"PHP test lehe loomine\"\n      template:\n        src: index.php.j2\n        dest: \"{{ web_root }}/index.php\"\n        owner: www-data\n        group: www-data\n        mode: '0644'\n\n    - name: \"MySQL root parooli seadistamine\"\n      mysql_user:\n        name: root\n        password: \"{{ mysql_root_password }}\"\n        login_unix_socket: /var/run/mysqld/mysqld.sock\n        state: present\n\n    - name: \"Rakenduse andmebaasi loomine\"\n      mysql_db:\n        name: \"{{ app_database }}\"\n        login_user: root\n        login_password: \"{{ mysql_root_password }}\"\n        state: present\n\n    - name: \"Rakenduse kasutaja loomine\"\n      mysql_user:\n        name: \"{{ app_user }}\"\n        password: \"{{ app_password }}\"\n        priv: \"{{ app_database }}.*:ALL\"\n        login_user: root\n        login_password: \"{{ mysql_root_password }}\"\n        state: present\n\n  handlers:\n    - name: enable apache\n      service:\n        name: apache2\n        enabled: yes\n        state: started\n\n    - name: restart apache\n      service:\n        name: apache2\n        state: restarted\n\n    - name: start mysql\n      service:\n        name: mysql\n        state: started\n        enabled: yes\n\n    - name: secure mysql\n      mysql_user:\n        name: \"\"\n        host_all: yes\n        state: absent\n        login_user: root\n        login_password: \"{{ mysql_root_password }}\"\n\n  post_tasks:\n    - name: \"Teenuste oleku kontroll\"\n      service_facts:\n\n    - name: \"Kinnitada Apache'i t\u00f6\u00f6tamine\"\n      uri:\n        url: \"http://{{ ansible_default_ipv4.address }}\"\n        method: GET\n        status_code: 200\n</code></pre>"},{"location":"ansible_basics/lecture/#12-playbooki-kaivitamine-ja-debugimine","title":"12. Playbook'i k\u00e4ivitamine ja debugimine","text":""},{"location":"ansible_basics/lecture/#121-pohilised-kaivitamise-voimalused","title":"12.1 P\u00f5hilised k\u00e4ivitamise v\u00f5imalused","text":"Bash<pre><code># Tavap\u00e4rane k\u00e4ivitamine\nansible-playbook site.yml\n\n# Inventory m\u00e4\u00e4ramine\nansible-playbook -i inventory/production site.yml\n\n# Muutujate edastamine\nansible-playbook -e \"app_version=2.1.0\" site.yml\n\n# Kuiv k\u00e4ivitamine\nansible-playbook --check site.yml\n\n# Muudatuste kuvamine\nansible-playbook --check --diff site.yml\n</code></pre>"},{"location":"ansible_basics/lecture/#122-selektiivne-kaivitamine","title":"12.2 Selektiivne k\u00e4ivitamine","text":"Bash<pre><code># Ainult konkreetsed hostid\nansible-playbook --limit webservers site.yml\n\n# Konkreetse task'iga alustamine\nansible-playbook --start-at-task \"MySQL installimine\" site.yml\n\n# Tagide kasutamine\nansible-playbook --tags \"database\" site.yml\n\n# Tagide v\u00e4listamine\nansible-playbook --skip-tags \"testing\" site.yml\n</code></pre>"},{"location":"ansible_basics/lecture/#123-debugimine-ja-verbose-valjund","title":"12.3 Debugimine ja verbose v\u00e4ljund","text":"Bash<pre><code># P\u00f5hiline verbose\nansible-playbook -v site.yml\n\n# Detailsem v\u00e4ljund\nansible-playbook -vv site.yml\n\n# Connection debugging\nansible-playbook -vvv site.yml\n\n# SSH debugging\nansible-playbook -vvvv site.yml\n</code></pre>"},{"location":"ansible_basics/lecture/#13-best-practices","title":"13. Best practices","text":""},{"location":"ansible_basics/lecture/#131-playbooki-struktuur","title":"13.1 Playbook'i struktuur","text":"YAML<pre><code>---\n# Dokumentatsioon playbook'i alguses\n# Autor: IT meeskond\n# Eesm\u00e4rk: Veebiserveri t\u00e4ielik seadistamine\n# Versioon: 1.2.0\n\n- name: \"Selge ja kirjeldav play nimi\"\n  hosts: webservers\n  become: yes\n  gather_facts: yes\n\n  vars:\n    # Muutujate gruppeerimine ja kommentaarid\n    # Rakenduse konfiguratsioon\n    app_name: \"webstore\"\n    app_version: \"2.1.0\"\n\n    # Andmebaasi seadistused  \n    db_name: \"{{ app_name }}_production\"\n    db_user: \"{{ app_name }}_user\"\n\n  pre_tasks:\n    - name: \"Eeltingimuste kontroll\"\n      assert:\n        that:\n          - app_name is defined\n          - app_version is defined\n        fail_msg: \"N\u00f5utavad muutujad ei ole m\u00e4\u00e4ratud\"\n\n  tasks:\n    - name: \"Konkreetne ja arusaadav task'i nimi\"\n      module_name:\n        parameter: value\n      tags: [installation, webserver]\n      when: ansible_os_family == \"Debian\"\n\n  post_tasks:\n    - name: \"L\u00f5pukontrollid ja validateerimised\"\n      uri:\n        url: \"http://localhost\"\n        status_code: 200\n</code></pre>"},{"location":"ansible_basics/lecture/#132-vigade-kasitlemise-strateegiad","title":"13.2 Vigade k\u00e4sitlemise strateegiad","text":"YAML<pre><code>tasks:\n  - name: \"Kriitilise teenuse k\u00e4ivitamine\"\n    service:\n      name: critical-service\n      state: started\n    register: service_result\n    failed_when: service_result.rc != 0\n\n  - name: \"Mittekriitilise operatsiooni katse\"\n    command: /opt/scripts/optional-task.sh\n    ignore_errors: yes\n\n  - name: \"Retry loogikaga operatsioon\"\n    uri:\n      url: \"http://api.external.com/status\"\n      method: GET\n    retries: 3\n    delay: 10\n    until: result.status == 200\n</code></pre>"},{"location":"ansible_basics/lecture/#kokkuvote","title":"Kokkuv\u00f5te","text":"<p>Ansible Basics peat\u00fckk andis p\u00f5hjaliku \u00fclevaate Ansible'i arhitektuurist, SSH konfiguratsioonist, inventory haldamisest, ad-hoc k\u00e4skudest ja playbook'ide kirjutamisest. Need teadmised on aluseks keerulisemate automatiseerimislahenduste loomisele ja infrastruktuuri kui koodi p\u00f5him\u00f5tete rakendamisele.</p> <p>J\u00e4rgnevates peat\u00fckkides k\u00e4sitletakse Ansible'i t\u00e4psemaid funktsioone, sealhulgas rolle, template'e, vault'i ja multi-environment deployment'e.</p>"},{"location":"ansible_basics/reading_materials/","title":"Ansible s\u00fcvak\u00e4sitlus","text":"<p>Ansible'i agentless arhitektuur erineb fundamentaalselt teistest konfiguratsioonihalduse t\u00f6\u00f6riistadest. Selle m\u00f5istmine on kriitiline, sest see m\u00f5jutab k\u00f5ike - alates j\u00f5udlusest kuni turvalisuseni.</p> <pre><code>graph TD\n    A[Control Node] --&gt;|SSH| B[Web Server 1]\n    A --&gt;|SSH| C[Web Server 2]\n    A --&gt;|SSH| D[Database Server]\n    A --&gt;|SSH| E[Load Balancer]\n\n    F[Puppet Master] --&gt;|Pull Request| G[Puppet Agent 1]\n    F --&gt;|Pull Request| H[Puppet Agent 2]\n    F --&gt;|Pull Request| I[Puppet Agent 3]\n\n    subgraph \"Ansible Architecture\"\n        A\n        B\n        C\n        D\n        E\n    end\n\n    subgraph \"Traditional Agent-based\"\n        F\n        G\n        H\n        I\n    end</code></pre> <p>Traditsiooniline agent-p\u00f5hine l\u00e4henemine n\u00f5uab iga hallatava s\u00fcsteemi jaoks spetsiaalse tarkvara installimist. Puppet agent, Chef client, Salt minion - k\u00f5ik need peavad t\u00f6\u00f6tama taustal, tarbima ressursse ja olema pidevalt ajakohased. Ansible'i SSH-p\u00f5hine kommunikatsioon kasutab aga infrastruktuuri, mis juba eksisteerib igas Unix-p\u00f5hises s\u00fcsteemis.</p> Aspekt Ansible (Agentless) Puppet/Chef (Agent-based) Installatsioon Ainult control node'il Igal hallatav s\u00fcsteemil Ressursikasutus Minimalne Agent tarbib RAM/CPU Turvalisus SSH (standard protokoll) Spetsiaalne agent port Skaleeritavus Paralleelne SSH Agent pull interval V\u00f5rguliiklus Push-based Pull-based Offline t\u00f6\u00f6 V\u00f5imalik Piiratud <p>SSH-protokoll pole juhuslik valik. See on k\u00f5ige laialdasemalt kasutatav ja h\u00e4sti testitud remote access protokoll enterprise keskkonnas. SSH v\u00f5tmed on juba hallatud, port 22 on juba avatud, logid juba konfiguratsiooni jaoks olemas. Ansible lihtsalt kasutab seda, mis juba seal on.</p>"},{"location":"ansible_basics/reading_materials/#playbooki-taitmise-tsukkel","title":"Playbook'i t\u00e4itmise ts\u00fckkel","text":"<pre><code>sequenceDiagram\n    participant User\n    participant Ansible\n    participant SSH\n    participant Target\n\n    User-&gt;&gt;Ansible: ansible-playbook site.yml\n    Ansible-&gt;&gt;Ansible: Parse YAML\n    Ansible-&gt;&gt;Ansible: Build task list\n\n    loop For each host\n        Ansible-&gt;&gt;SSH: Establish connection\n        SSH-&gt;&gt;Target: Connect\n\n        loop For each task\n            Ansible-&gt;&gt;Target: Transfer module\n            Target-&gt;&gt;Target: Execute module\n            Target-&gt;&gt;Ansible: Return results\n            Ansible-&gt;&gt;Ansible: Check idempotency\n        end\n\n        SSH-&gt;&gt;SSH: Close connection\n    end\n\n    Ansible-&gt;&gt;User: Report results</code></pre> <p>Arhitektuuri teine oluline aspekt on push vs pull mudel. Puppet ja Chef kasutavad pull mudelit - agendid k\u00fcsivad regulaarselt serverilt, kas on midagi uut teha. Ansible kasutab push mudelit - k\u00e4ivitad playbook'i siis, kui tahad muudatust. See annab t\u00e4pse kontrolli selle \u00fcle, millal ja kuidas muudatused rakendatakse.</p>"},{"location":"ansible_basics/reading_materials/#yaml-kui-konfiguratsioonikeel","title":"YAML kui konfiguratsioonikeel","text":"<p>YAML pole lihtsalt data formaat - see on konfiguratsioonikeel, mis peegeldab hirarhilisi seoseid viisil, mida JSON v\u00f5i XML ei suuda sama intuitiivselt edastada. Ansible'is muutub YAML struktuuri m\u00f5istmine eriti oluliseks, sest see m\u00e4\u00e4rab t\u00e4itmise j\u00e4rjekorra ja konteksti.</p> YAML Element Ansible Kontekst N\u00e4ide Document Playbook algus <code>---</code> List Tasks, hosts, vars <code>- name: Install nginx</code> Dictionary Task parameetrid <code>apt: name=nginx state=present</code> String V\u00e4\u00e4rtused <code>name: \"My task\"</code> Boolean Flags <code>become: yes</code> Variable Jinja2 template <code>{{ ansible_hostname }}</code> <pre><code>graph LR\n    A[YAML Document] --&gt; B[Play 1]\n    A --&gt; C[Play 2]\n\n    B --&gt; D[hosts: webservers]\n    B --&gt; E[vars: app_name]\n    B --&gt; F[tasks]\n\n    F --&gt; G[Task 1: Install]\n    F --&gt; H[Task 2: Configure]\n    F --&gt; I[Task 3: Start]\n\n    G --&gt; J[Module: apt]\n    H --&gt; K[Module: template]\n    I --&gt; L[Module: service]</code></pre> <p>YAML'i range taandrimise s\u00fcsteem pole b\u00fcrokraatia - see on funktsioon. Taandrimine m\u00e4\u00e4rab andmete hierarhia ja seel\u00e4bi ka Ansible'i k\u00e4itumise. Vale taandrimine v\u00f5ib t\u00e4hendada, et task k\u00e4ivitatakse vale host'i vastu v\u00f5i \u00fcldse vahele j\u00e4etakse.</p>"},{"location":"ansible_basics/reading_materials/#moodulite-okosusteem-ja-idempotentsus","title":"Moodulite \u00f6kos\u00fcsteem ja idempotentsus","text":"<p>Ansible'i j\u00f5ud peitub selle laialdases moodulite kogumikus. Iga moodul pole lihtsalt funktsioon - see on abstraktsioon konkreetse tehnoloogia v\u00f5i s\u00fcsteemi haldamiseks. Mooduli valik m\u00f5jutab otseselt seda, kui hooldatav ja turvalisne teie automatiseering on.</p> Mooduli kategooria N\u00e4ited Kasutusjuhud System <code>service</code>, <code>user</code>, <code>cron</code> OS taseme haldus Package <code>apt</code>, <code>yum</code>, <code>pip</code> Tarkvara installimine File <code>copy</code>, <code>template</code>, <code>lineinfile</code> Failide haldus Network <code>uri</code>, <code>get_url</code>, <code>firewalld</code> V\u00f5rgu konfigureerimine Cloud <code>ec2</code>, <code>azure_rm_*</code>, <code>gcp_*</code> Pilve ressursid Database <code>mysql_user</code>, <code>postgresql_db</code> Andmebaasi haldus <pre><code>flowchart TD\n    A[Ansible Task] --&gt; B{Check Current State}\n    B --&gt;|State OK| C[Skip - No Change]\n    B --&gt;|State Different| D[Apply Change]\n    D --&gt; E[Verify New State]\n    E --&gt;|Success| F[Report Changed]\n    E --&gt;|Failure| G[Report Error]\n\n    style C fill:#90EE90\n    style F fill:#FFD700\n    style G fill:#FF6B6B</code></pre> <p>Idempotentsus on Ansible'i s\u00fcdames. See t\u00e4hendab, et sama playbook'i korduvad k\u00e4ivitamised ei muuda s\u00fcsteemi olukorda, kui soovitud olek on juba saavutatud. See pole automaatne - iga moodul peab seda toetama oma loogikaga.</p> <p>Idempotentse mooduli kirjutamine n\u00f5uab kolme sammu: kontrollida praegust olukorda, v\u00f5rrelda soovitud olukorraga, ja muuta ainult vajadusel. Halvasti kirjutatud moodul v\u00f5ib iga k\u00e4ivitamisel midagi muuta, isegi kui pole vaja.</p>"},{"location":"ansible_basics/reading_materials/#inventory-haldamise-strateegiad","title":"Inventory haldamise strateegiad","text":"<p>Inventory pole lihtsalt hostide nimekiri - see on abstraktsioon teie infrastruktuuri kohta. H\u00e4sti disainitud inventory peegeldab teie organisatsiooni struktuuri ja muudab automatiseerimise intuitiivseks.</p> Inventory t\u00fc\u00fcp Struktuur Sobivus Static (INI) <code>[webservers]</code> V\u00e4ikesed, stabiilsed keskkonnad Static (YAML) Hierarhiline Komplekssed grupid ja muutujad Dynamic Script/plugin Pilve keskkonnad Mixed Static + dynamic H\u00fcbriid infrastruktuur <pre><code>graph TD\n    A[Inventory Root] --&gt; B[Production]\n    A --&gt; C[Staging]\n    A --&gt; D[Development]\n\n    B --&gt; E[Web Tier]\n    B --&gt; F[App Tier]\n    B --&gt; G[DB Tier]\n\n    E --&gt; H[web-prod-01]\n    E --&gt; I[web-prod-02]\n\n    F --&gt; J[app-prod-01]\n    F --&gt; K[app-prod-02]\n\n    G --&gt; L[db-prod-01]\n\n    style B fill:#FF6B6B\n    style C fill:#FFD700\n    style D fill:#90EE90</code></pre> <p>Grupi muutujad (<code>group_vars</code>) v\u00f5imaldavad defineerida konfiguratsiooni, mis rakendub k\u00f5igile grupi liikmetele. Host muutujad (<code>host_vars</code>) alistavad grupi muutujad konkreetse hosti jaoks. See hierarhia loob paindliku s\u00fcsteemi, kus saate m\u00e4\u00e4rata \u00fcldseid reegleid ja teha erandeid vajadusel.</p> <p>Dynamic inventory muutub oluliseks pilve keskkonnas, kus serverid tulevad ja l\u00e4hevad. AWS EC2 plugin v\u00f5ib automaatselt avastada instance'id, grupeerida neid tagide j\u00e4rgi ja pakkuda metadata't muutujatena. See t\u00e4hendab, et teie Ansible kood t\u00f6\u00f6tab s\u00f5ltumata sellest, mitu instance'i parasjagu t\u00f6\u00f6tab.</p>"},{"location":"ansible_roles/homework/","title":"Ansible Roles Homework: Ehita sama infrastruktuur nii Ansible kui Puppet'iga","text":"<p>Eesm\u00e4rk: Deploy sama infrastruktuuri m\u00f5lema t\u00f6\u00f6riistaga ja v\u00f5rdle praktikas  </p> <p>Te saate valmis starter kood - fookus on deployment'il ja praktilisel v\u00f5rdlusel!</p>"},{"location":"ansible_roles/homework/#1-projekt-veebserveri-andmebaasi-seadistamine","title":"1. Projekt: Veebserveri + Andmebaasi seadistamine","text":"<p>Mida te ehitate: - Nginx veebiserver kohandatud konfiguratsiooniga - PostgreSQL andmebaas algse skeemiga - SSL sertifikaadid (ise-allkirjastatud testimiseks) - S\u00fcsteemi monitooring p\u00f5hiliste tervise kontrollidega - Logide p\u00f6\u00f6ramise konfiguratsioon</p> <p>Mida te \u00f5pite: - Ansible vs Puppet praktilised erinevused - Konfiguratsioonihalduse t\u00f6\u00f6vood - Infrastruktuuri deployment strateegiad - T\u00f6\u00f6riistaspetsiifilised debug ja probleemilahendus</p>"},{"location":"ansible_roles/homework/#2-ansible-vs-puppet-miks-vordleme","title":"2. Ansible vs Puppet - Miks v\u00f5rdleme?","text":"<p>Miks on oluline m\u00f5ista erinevaid t\u00f6\u00f6riistu?</p>"},{"location":"ansible_roles/homework/#21-ansible-push-based-lahenemine","title":"2.1 Ansible - Push-based l\u00e4henemine","text":"<ul> <li>Kuidas t\u00f6\u00f6tab: Kontrollserver saadab k\u00e4sud sihtmasinatele</li> <li>Eelised: Lihtne alustada, YAML s\u00fcntaks, agentless</li> <li>Puudused: Vajab SSH \u00fchendust, v\u00e4hem keerukaid funktsioone</li> <li>Kus kasutada: V\u00e4iksemad meeskonnad, lihtsad automatiseerimised</li> </ul>"},{"location":"ansible_roles/homework/#22-puppet-pull-based-lahenemine","title":"2.2 Puppet - Pull-based l\u00e4henemine","text":"<ul> <li>Kuidas t\u00f6\u00f6tab: Sihtmasinad ise k\u00fcsivad konfiguratsiooni serverilt</li> <li>Eelised: V\u00f5imas, keerukad funktsioonid, agent-based</li> <li>Puudused: Keerulisem seadistada, Ruby s\u00fcntaks</li> <li>Kus kasutada: Suured ettev\u00f5tted, keerukad infrastruktuurid</li> </ul> <p>Miks praktiline v\u00f5rdlus on oluline? - N\u00e4ete erinevusi k\u00e4itumises - M\u00f5istate, millal mida kasutada - \u00d5pite debug'ima m\u00f5lemat t\u00f6\u00f6riista - Saate praktilise kogemuse</p>"},{"location":"ansible_roles/homework/#3-repository-seadistamine","title":"3. Repository seadistamine","text":""},{"location":"ansible_roles/homework/#31-klooni-starter-repository","title":"3.1 Klooni starter repository","text":"Bash<pre><code># Klooni kodut\u00f6\u00f6 starter valmis failidega\ngit clone https://github.com/[teacher-repo]/ansible-puppet-comparison.git\ncd ansible-puppet-comparison\n\n# Loo oma t\u00f6\u00f6 branch\ngit checkout -b homework-[your-name]\n\n# Kontrolli starter struktuuri\nls -la\n# Peaksite n\u00e4gema: ansible/, puppet/, docs/, README.md\n</code></pre>"},{"location":"ansible_roles/homework/#32-kontrolli-starter-faile","title":"3.2 Kontrolli starter faile","text":"<p>Repository sisaldab: - <code>ansible/</code> - Ansible playbook'i baas (vajab SSL ja virtual hosts lisamist) - <code>puppet/</code> - Puppet manifest'i baas (vajab SSL ja monitoring lisamist) - <code>vagrant/</code> - Test VM'ide konfiguratsioon (valmis kasutamiseks) - <code>requirements.md</code> - Mis te peate lisama</p>"},{"location":"ansible_roles/homework/#33-tutvu-starter-koodiga","title":"3.3 Tutvu starter koodiga","text":"<p>Ansible struktuur: Bash<pre><code>cd ansible/\nls -la\n# Peaksite n\u00e4gema:\n# - inventory/ (sihtmachinad)\n# - roles/ (nginx, postgresql)\n# - site.yml (peamine playbook)\n# - requirements.md (mis vaja lisada)\n</code></pre></p> <p>Puppet struktuur: Bash<pre><code>cd ../puppet/\nls -la\n# Peaksite n\u00e4gema:\n# - manifests/ (Puppet kood)\n# - modules/ (nginx, postgresql)\n# - hiera/ (andmed)\n# - requirements.md (mis vaja lisada)\n</code></pre></p> <p>Miks see struktuur on oluline? - Ansible: Playbook \u2192 Roles \u2192 Tasks - Puppet: Manifests \u2192 Classes \u2192 Resources - M\u00f5lemad j\u00e4rgivad modulaarset l\u00e4henemist - Kood on organiseeritud ja taaskasutatav</p>"},{"location":"ansible_roles/homework/#4-ehita-ansible-deployment","title":"4. Ehita Ansible deployment","text":""},{"location":"ansible_roles/homework/#41-kaivita-test-keskkond","title":"4.1 K\u00e4ivita test keskkond","text":"Bash<pre><code># K\u00e4ivita VM testimiseks\ncd ../vagrant/\nvagrant up ansible-vm\n\n# \u00dchenda VM'iga\nvagrant ssh ansible-vm\n</code></pre> <p>Miks kasutame Vagrant'i? - Isolatsioon: Ei m\u00f5juta teie p\u00f5his\u00fcsteemi - Korratavus: Iga\u00fcks saab sama keskkonna - Kiire: V\u00f5imaldab kiiresti testida ja kustutada - Turvaline: V\u00f5ite eksperimenteerida vabalt</p>"},{"location":"ansible_roles/homework/#42-lisa-ssl-konfiguratsioon","title":"4.2 Lisa SSL konfiguratsioon","text":"<p>Starters on ainult basic nginx + postgresql. Peate lisama:</p> Bash<pre><code>cd ../ansible/\n\n# Lisa SSL task'id (roles/nginx/tasks/ssl.yml)\n# Kohandada nginx template'i SSL jaoks  \n# Lisada virtual hosts konfiguratsioon\n\n# Vaata requirements.md faili, mis t\u00e4pselt vaja\ncat requirements.md\n</code></pre> <p>Mida peate lisama SSL jaoks:</p>"},{"location":"ansible_roles/homework/#421-ssl-sertifikaatide-genereerimine","title":"4.2.1 SSL sertifikaatide genereerimine","text":"YAML<pre><code># roles/nginx/tasks/ssl.yml\n- name: \"Create SSL directory\"\n  file:\n    path: /etc/nginx/ssl\n    state: directory\n    mode: '0755'\n\n- name: \"Generate self-signed SSL certificate\"\n  command: openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt -subj \"/C=EE/ST=Tallinn/L=Tallinn/O=Test/CN=localhost\"\n  args:\n    creates: /etc/nginx/ssl/nginx.crt\n</code></pre>"},{"location":"ansible_roles/homework/#422-nginx-ssl-konfiguratsioon","title":"4.2.2 Nginx SSL konfiguratsioon","text":"Nginx Configuration File<pre><code># roles/nginx/templates/nginx.conf.j2\nserver {\n    listen 80;\n    server_name localhost;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl;\n    server_name localhost;\n\n    ssl_certificate /etc/nginx/ssl/nginx.crt;\n    ssl_certificate_key /etc/nginx/ssl/nginx.key;\n\n    location / {\n        root /var/www/html;\n        index index.html;\n    }\n}\n</code></pre> <p>Miks SSL on oluline? - Turvalisus: Kr\u00fcptitud \u00fchendused - Praktika: Enamik p\u00e4ris rakendusi kasutab HTTPS - \u00d5ppimine: SSL konfiguratsioon on oluline oskus - Testimine: N\u00e4ete, kuidas t\u00f6\u00f6tab turvaline \u00fchendus</p>"},{"location":"ansible_roles/homework/#43-lisa-virtual-hosts","title":"4.3 Lisa virtual hosts","text":"<p>Virtual hosts v\u00f5imaldavad \u00fchel serveril mitut veebisaiti:</p> YAML<pre><code># roles/nginx/tasks/vhosts.yml\n- name: \"Create virtual host directories\"\n  file:\n    path: \"{{ item }}\"\n    state: directory\n    mode: '0755'\n  loop:\n    - /var/www/site1\n    - /var/www/site2\n\n- name: \"Create virtual host content\"\n  copy:\n    content: |\n      &lt;h1&gt;Site 1&lt;/h1&gt;\n      &lt;p&gt;This is site 1 content&lt;/p&gt;\n    dest: /var/www/site1/index.html\n    mode: '0644'\n</code></pre> <p>Miks virtual hosts on olulised? - Ressursi s\u00e4\u00e4stmine: \u00dcks server, mitut rakendust - Organiseerimine: Eraldi kontekstid erinevatele projektidele - Praktika: Paljud ettev\u00f5tted kasutavad virtual hoste - Skaleerimine: V\u00f5imaldab kasvada ilma uute serverite lisamata</p>"},{"location":"ansible_roles/homework/#44-kaivita-ja-testi","title":"4.4 K\u00e4ivita ja testi","text":"Bash<pre><code># Proovi oma laiendatud versiooni\nansible-playbook -i inventory/local site.yml --ask-become-pass\n\n# Kontrolli teenuseid\nsudo systemctl status nginx postgresql\ncurl -k https://localhost  # SSL peaks t\u00f6\u00f6tama!\n\n# Testi virtual hoste\ncurl -k https://localhost/site1\ncurl -k https://localhost/site2\n</code></pre> <p>Miks testimine on oluline? - Veakontroll: Veenduge, et k\u00f5ik t\u00f6\u00f6tab - Dokumentatsioon: N\u00e4ete, mis t\u00f6\u00f6tab ja mis mitte - \u00d5ppimine: Testimine on oluline oskus - Usaldus: Saate usaldada oma automatiseerimist</p>"},{"location":"ansible_roles/homework/#45-commit-oma-too","title":"4.5 Commit oma t\u00f6\u00f6","text":"Bash<pre><code># Kui k\u00f5ik t\u00f6\u00f6tab\ngit add .\ngit commit -m \"Lisasin SSL ja virtual hosts Ansible'ile - t\u00f6\u00f6tab\"\n</code></pre>"},{"location":"ansible_roles/homework/#5-ehita-puppet-deployment","title":"5. Ehita Puppet deployment","text":""},{"location":"ansible_roles/homework/#51-lulitu-puppet-vmile","title":"5.1 L\u00fclitu Puppet VM'ile","text":"Bash<pre><code># H\u00e4vita eelmine VM ja k\u00e4ivita puppet VM\nvagrant destroy ansible-vm\nvagrant up puppet-vm\nvagrant ssh puppet-vm\n</code></pre> <p>Miks eraldi VM? - Puhas keskkond: Ei m\u00f5juta eelmist t\u00f6\u00f6d - V\u00f5rdlus: Saate v\u00f5rrelda m\u00f5lemat l\u00e4henemist - Praktika: Reaalses elus kasutate erinevaid masinaid - Debug: Lihtsam lahendada probleeme</p>"},{"location":"ansible_roles/homework/#52-lisa-samad-asjad-puppetiga","title":"5.2 Lisa samad asjad Puppet'iga","text":"<p>Puppet kood on veel poolik - pead lisama:</p> Bash<pre><code>cd ../puppet/\n\n# SSL sertifikaatide genereerimine\n# Nginx SSL konfiguratsioon\n# Virtual hosts setup\n# PostgreSQL initial schema\n\n# Vaata requirements.md - mis pead t\u00e4pselt tegema\ncat ../requirements.md\n</code></pre> <p>Puppet SSL konfiguratsioon:</p>"},{"location":"ansible_roles/homework/#521-ssl-sertifikaatide-genereerimine","title":"5.2.1 SSL sertifikaatide genereerimine","text":"Puppet<pre><code># modules/nginx/manifests/ssl.pp\nclass nginx::ssl {\n  file { '/etc/nginx/ssl':\n    ensure =&gt; 'directory',\n    mode   =&gt; '0755',\n  }\n\n  exec { 'generate-ssl-cert':\n    command =&gt; 'openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt -subj \"/C=EE/ST=Tallinn/L=Tallinn/O=Test/CN=localhost\"',\n    creates =&gt; '/etc/nginx/ssl/nginx.crt',\n    path    =&gt; '/usr/bin',\n    require =&gt; File['/etc/nginx/ssl'],\n  }\n}\n</code></pre>"},{"location":"ansible_roles/homework/#522-nginx-ssl-konfiguratsioon","title":"5.2.2 Nginx SSL konfiguratsioon","text":"Puppet<pre><code># modules/nginx/templates/nginx.conf.erb\nserver {\n    listen 80;\n    server_name localhost;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl;\n    server_name localhost;\n\n    ssl_certificate /etc/nginx/ssl/nginx.crt;\n    ssl_certificate_key /etc/nginx/ssl/nginx.key;\n\n    location / {\n        root /var/www/html;\n        index index.html;\n    }\n}\n</code></pre> <p>Miks Puppet s\u00fcntaks on erinev? - Ruby p\u00f5hine: Puppet kasutab Ruby s\u00fcntaksit - Deklaratiivne: Kirjeldate, mis peab olema, mitte kuidas - Idempotent: Puppet kontrollib olekut ja teeb ainult vajalikud muudatused - V\u00f5imas: Rohkem keerukaid funktsioone kui Ansible</p>"},{"location":"ansible_roles/homework/#53-lisa-monitoring","title":"5.3 Lisa monitoring","text":"<p>Monitoring v\u00f5imaldab kontrollida teenuste t\u00f6\u00f6d:</p> Puppet<pre><code># modules/monitoring/manifests/health.pp\nclass monitoring::health {\n  file { '/usr/local/bin/health-check.sh':\n    content =&gt; '#!/bin/bash\n      if systemctl is-active --quiet nginx; then\n        echo \"Nginx is running\"\n        exit 0\n      else\n        echo \"Nginx is not running\"\n        exit 1\n      fi',\n    mode    =&gt; '0755',\n  }\n\n  cron { 'health-check':\n    command =&gt; '/usr/local/bin/health-check.sh &gt;&gt; /var/log/health.log 2&gt;&amp;1',\n    minute  =&gt; '*/5',\n  }\n}\n</code></pre> <p>Miks monitoring on oluline? - Probleemide avastamine: Varane hoiatamine - T\u00f6\u00f6kindlus: Veenduge, et teenused t\u00f6\u00f6tavad - Praktika: K\u00f5ik p\u00e4ris s\u00fcsteemid vajavad monitooringut - Debug: Aitab leida probleeme</p>"},{"location":"ansible_roles/homework/#54-rakenda-oma-puppet-kood","title":"5.4 Rakenda oma Puppet kood","text":"Bash<pre><code># Proovi oma versiooni\nsudo puppet apply --modulepath=modules manifests/site.pp\n\n# Kontrolli, et sama tulemus mis Ansible'iga\nsudo systemctl status nginx postgresql\ncurl -k https://localhost  # SSL peaks t\u00f6\u00f6tama!\n\n# Testi monitoring\nsudo /usr/local/bin/health-check.sh\n</code></pre>"},{"location":"ansible_roles/homework/#55-commit-puppet-too","title":"5.5 Commit Puppet t\u00f6\u00f6","text":"Bash<pre><code># Kui sama tulemus mis Ansible'iga\ngit add .\ngit commit -m \"Lisasin samad asjad Puppet'iga - sama tulemus\"\n</code></pre>"},{"location":"ansible_roles/homework/#6-vordle-ja-analuusi","title":"6. V\u00f5rdle ja anal\u00fc\u00fcsi","text":""},{"location":"ansible_roles/homework/#61-motle-labi-mis-oli-erinev","title":"6.1 M\u00f5tle l\u00e4bi, mis oli erinev","text":"<p>P\u00e4rast m\u00f5lema t\u00f6\u00f6riista kasutamist:</p> Bash<pre><code># Lihtsalt testi m\u00f5lemad veel kord\ncurl -k https://localhost  # Kas m\u00f5lemad t\u00f6\u00f6tavad?\n\n# Commit kogu oma t\u00f6\u00f6\ngit add .\ngit commit -m \"M\u00f5lemad deploymentid t\u00f6\u00f6tavad - Ansible ja Puppet\"\ngit push origin homework-[your-name]\n</code></pre>"},{"location":"ansible_roles/homework/#62-luhike-vordlus","title":"6.2 L\u00fchike v\u00f5rdlus","text":"<p>Kirjuta 2-3 lauset oma kogemusest:</p> <ul> <li>Mida m\u00e4rkasid Ansible ja Puppet vahel?</li> <li>Mis oli lihtsam/keerulisem?</li> <li>Mida eelistaksid ja miks?</li> </ul>"},{"location":"ansible_roles/homework/#7-lopeta-ja-esita","title":"7. L\u00f5peta ja esita","text":""},{"location":"ansible_roles/homework/#71-kirjuta-pohjalik-readmemd","title":"7.1 Kirjuta p\u00f5hjalik README.md","text":"Markdown<pre><code># Kodut\u00f6\u00f6 - Ehitasin sama asja Ansible ja Puppet'iga\n\n## Mida ehitasin\n- Laiensid basic nginx + postgresql starter koodi\n- Lisasin SSL sertifikaadid ja HTTPS konfiguratsioon\n- Lisasin virtual hosts funktsionaalsuse\n- Lisasin p\u00f5hilise monitooringu\n- Tegin seda nii Ansible kui Puppet'iga\n\n## Praktiline v\u00f5rdlus\n\n### Ansible kogemus\n- **Seadistamine:** Lihtne ja kiire\n- **S\u00fcntaks:** YAML oli selge ja loetav\n- **Debug:** Hea veateadete kvaliteet\n- **Dokumentatsioon:** Palju n\u00e4iteid ja \u00f5petusi\n\n### Puppet kogemus\n- **Seadistamine:** Keerulisem, aga v\u00f5imas\n- **S\u00fcntaks:** Ruby vajab harjumist\n- **Debug:** Rohkem keeruline, aga detailne\n- **Dokumentatsioon:** Hea, aga v\u00e4hem algajas\u00f5bralik\n\n## Eelistus ja p\u00f5hjendus\nMa eelistaks **[Ansible/Puppet]** sest [2-3 lauset p\u00f5hjendust].\n\n## \u00d5pitud oskused\n- SSL sertifikaatide konfigureerimine\n- Virtual hosts seadistamine\n- Monitooringu lisamine\n- T\u00f6\u00f6riistade v\u00f5rdlemine praktikas\n- Debug ja probleemilahendus\n\n---\nTehtud [kuup\u00e4ev] - m\u00f5lemad deploymentid t\u00f6\u00f6tavad!\n</code></pre>"},{"location":"ansible_roles/homework/#72-loplik-push-ja-esitamine","title":"7.2 L\u00f5plik push ja esitamine","text":"Bash<pre><code># L\u00f5plik commit\ngit add .\ngit commit -m \"L\u00f5petasin kodut\u00f6\u00f6 - m\u00f5lemad deploymentid t\u00f6\u00f6tavad\"\n\n# Push GitHub'i\ngit push origin homework-[your-name]\n\n# Kontrolli, et k\u00f5ik on GitHub'is\necho \"Kontrolli: https://github.com/[your-username]/ansible-puppet-comparison\"\n</code></pre>"},{"location":"ansible_roles/homework/#kkk","title":"KKK","text":"<p>Q: Kas pean m\u00f5lemad deploymentid tegema? A: Jah, see on kodut\u00f6\u00f6 eesm\u00e4rk - v\u00f5rrelda m\u00f5lemat l\u00e4henemist.</p> <p>Q: Mis teha, kui \u00fcks ei t\u00f6\u00f6ta? A: Proovi debug'ida ja k\u00fcsi abi. Kui \u00fcks t\u00f6\u00f6tab, saad selle esitada.</p> <p>Q: Kas pean kirjutama pika v\u00f5rdluse? A: Ei, piisab l\u00fchikest, aga p\u00f5hjalikust anal\u00fc\u00fcsist.</p> <p>Q: Millal on t\u00e4htaeg? A: J\u00e4rgmise n\u00e4dala alguseks. Hilinemine = punktide kaotus.</p> <p>Head konfiguratsioonihaldust!</p>"},{"location":"ansible_roles/lab/","title":"Ansible Roles Lab: Nginx Role","text":"<p>Eesm\u00e4rk: Luua t\u00f6\u00f6tav Ansible role</p>"},{"location":"ansible_roles/lab/#lab-ulesanded","title":"Lab \u00fclesanded","text":""},{"location":"ansible_roles/lab/#ulesanne-1-role-struktuuri-loomine","title":"\u00dclesanne 1: Role struktuuri loomine","text":"Bash<pre><code># Looge t\u00f6\u00f6kataloog\nmkdir ~/ansible-roles-lab &amp;&amp; cd ~/ansible-roles-lab\nmkdir roles &amp;&amp; cd roles\n\n# Genereerige role struktuur\nansible-galaxy init nginx-custom\n\n# Liikuge role kausta\ncd nginx-custom\n</code></pre> <p>Checkpoint: <code>ls -la</code> peaks n\u00e4itama 8 kausta/faili</p>"},{"location":"ansible_roles/lab/#ulesanne-2-defaults-seadistamine","title":"\u00dclesanne 2: Defaults seadistamine","text":"<p>Fail: <code>defaults/main.yml</code></p> <p>N\u00f5uded: - Defineerige v\u00e4hemalt 5 muutujat nginx jaoks - \u00dcks muutuja peab kasutama Jinja2 (n\u00e4iteks: <code>{{ ansible_processor_vcpus }}</code>) - Dokumenteerige kommentaaridega</p> <p>Vihje: M\u00f5elge portidele, kasutajatele, SSL-ile</p> <p>Test: Bash<pre><code>ansible -m debug -a \"var=nginx_port\" localhost -e \"@defaults/main.yml\"\n</code></pre></p>"},{"location":"ansible_roles/lab/#ulesanne-3-installation-tasks","title":"\u00dclesanne 3: Installation tasks","text":"<p>Fail: <code>tasks/install.yml</code></p> <p>N\u00f5uded: 1. Update package cache (ainult Debian/Ubuntu) 2. Install nginx 3. Create nginx user 4. Create directories: <code>/var/www/html</code>, <code>/etc/nginx/sites-available</code>, <code>/etc/nginx/sites-enabled</code></p> <p>Looge ka: <code>tasks/main.yml</code> YAML<pre><code>---\n- include_tasks: install.yml\n</code></pre></p> <p>Test: Bash<pre><code>ansible-playbook --syntax-check tasks/main.yml\n</code></pre></p>"},{"location":"ansible_roles/lab/#ulesanne-4-nginx-template","title":"\u00dclesanne 4: Nginx template","text":"<p>Fail: <code>templates/nginx.conf.j2</code></p> <p>N\u00f5uded: - Kasutage v\u00e4hemalt 3 muutujat defaults'ist - Lisage conditional block ({% if %}) - Worker processes peab s\u00f5ltuma CPU tuumadest</p> <p>N\u00e4ide algus: Nginx Configuration File<pre><code>user {{ nginx_user }};\nworker_processes {{ nginx_worker_processes }};\n\nevents {\n    worker_connections {{ nginx_worker_connections }};\n}\n\nhttp {\n    # Teie kood siia\n}\n</code></pre></p> <p>Fail: <code>tasks/configure.yml</code> YAML<pre><code>---\n- name: Deploy nginx config\n  template:\n    src: nginx.conf.j2\n    dest: /etc/nginx/nginx.conf\n    backup: yes\n  notify: restart nginx\n</code></pre></p> <p>Test: Template peab genereeruma ilma vigadeta</p>"},{"location":"ansible_roles/lab/#ulesanne-5-handlers","title":"\u00dclesanne 5: Handlers","text":"<p>Fail: <code>handlers/main.yml</code></p> <p>N\u00f5uded: 1. Handler \"restart nginx\" 2. Handler \"reload nginx\"</p> <p>Test: Handler peab olema <code>service</code> mooduliga</p>"},{"location":"ansible_roles/lab/#ulesanne-6-virtual-hosts","title":"\u00dclesanne 6: Virtual hosts","text":"<p>Fail: <code>templates/vhost.conf.j2</code></p> Nginx Configuration File<pre><code>server {\n    listen {{ item.port | default(80) }};\n    server_name {{ item.name }};\n    root {{ item.root | default('/var/www/html') }};\n\n    # Lisa SSL kui item.ssl == true\n}\n</code></pre> <p>Fail: <code>tasks/vhosts.yml</code></p> <p>N\u00f5uded: 1. Loop l\u00e4bi <code>nginx_vhosts</code> listi 2. Create vhost config igale saidile 3. Create document root kataloogid 4. Enable sites (symlink)</p> <p>defaults/main.yml lisa: YAML<pre><code>nginx_vhosts: []\n# nginx_vhosts:\n#   - name: example.com\n#     port: 80\n#     root: /var/www/example\n</code></pre></p>"},{"location":"ansible_roles/lab/#ulesanne-7-ssl-sertifikaadid","title":"\u00dclesanne 7: SSL sertifikaadid","text":"<p>Fail: <code>tasks/ssl.yml</code></p> <p>N\u00f5uded: 1. Genereeri self-signed cert kui <code>nginx_ssl_enabled: true</code> 2. Kasuta OpenSSL k\u00e4sku 3. Cert kehtib 365 p\u00e4eva</p> <p>K\u00e4sk vihjeks: Bash<pre><code>openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n  -keyout /etc/ssl/private/nginx.key \\\n  -out /etc/ssl/certs/nginx.crt \\\n  -subj \"/C=EE/ST=Harjumaa/L=Tallinn/O=School/CN=localhost\"\n</code></pre></p>"},{"location":"ansible_roles/lab/#ulesanne-8-idempotency-test","title":"\u00dclesanne 8: Idempotency test","text":"<p>Fail: <code>tasks/main.yml</code></p> <p>\u00dchendage k\u00f5ik taskid: YAML<pre><code>---\n- include_tasks: install.yml\n- include_tasks: configure.yml\n- include_tasks: ssl.yml\n  when: nginx_ssl_enabled | default(false)\n- include_tasks: vhosts.yml\n  when: nginx_vhosts | length &gt; 0\n</code></pre></p> <p>Test: K\u00e4ivitage 2x j\u00e4rjest, teine kord ei tohi midagi muuta Bash<pre><code>ansible-playbook test.yml\nansible-playbook test.yml  # K\u00f5ik peab olema \"ok\", mitte \"changed\"\n</code></pre></p>"},{"location":"ansible_roles/lab/#ulesanne-9-test-playbook","title":"\u00dclesanne 9: Test playbook","text":"<p>Fail: <code>~/ansible-roles-lab/test.yml</code></p> YAML<pre><code>---\n- name: Test nginx role\n  hosts: localhost\n  connection: local\n  become: yes\n\n  vars:\n    nginx_ssl_enabled: true\n    nginx_vhosts:\n      - name: test.local\n        port: 8080\n        ssl: true\n\n  roles:\n    - nginx-custom\n\n  post_tasks:\n    - name: Check nginx\n      uri:\n        url: \"http://localhost:8080\"\n      ignore_errors: yes\n</code></pre> <p>L\u00f5pptest: Bash<pre><code>ansible-playbook test.yml --ask-become-pass\nsudo systemctl status nginx\ncurl http://localhost:8080\n</code></pre></p>"},{"location":"ansible_roles/lab/#hindamiskriteeriumid","title":"Hindamiskriteeriumid","text":""},{"location":"ansible_roles/lab/#kohustuslik-5p","title":"Kohustuslik (5p)","text":"<ul> <li> Role struktuur \u00f5ige</li> <li> Nginx installeerub</li> <li> Template t\u00f6\u00f6tab</li> <li> Handler t\u00f6\u00f6tab</li> <li> Idempotent</li> </ul>"},{"location":"ansible_roles/lab/#lisapunktid","title":"Lisapunktid","text":"<ul> <li> SSL t\u00f6\u00f6tab (+1p)</li> <li> Virtual hosts t\u00f6\u00f6tab (+1p)</li> <li> Validation tasks (+1p)</li> <li> README.md (+1p)</li> <li> Meta informatsioon (+1p)</li> </ul>"},{"location":"ansible_roles/lab/#vihjed-probleemide-korral","title":"Vihjed probleemide korral","text":"<p>Nginx ei k\u00e4ivitu: Bash<pre><code>sudo nginx -t  # Kontrolli konfiguratsiooni\nsudo journalctl -u nginx  # Vaata logisid\n</code></pre></p> <p>Template ei genereeru: Bash<pre><code>ansible -m template -a \"src=nginx.conf.j2 dest=/tmp/test.conf\" localhost\n</code></pre></p> <p>Handler ei k\u00e4ivitu: - Kontrollige, kas task muutis midagi (changed: true) - Notify nimi peab t\u00e4pselt klappima</p>"},{"location":"ansible_roles/lab/#esitamine","title":"Esitamine","text":"<ol> <li>Push GitHub'i: <code>ansible-roles-lab/</code> kaust</li> <li>README.md peab sisaldama kasutamise n\u00e4idet</li> <li>Role peab t\u00f6\u00f6tama Ubuntu 20.04/22.04</li> </ol>"},{"location":"ansible_roles/lecture/","title":"Ansible Roles: Roles ja Puppet","text":"<p>Tere tulemast tagasi! Eelmisel n\u00e4dalal \u00f5ppisime Ansible'i variables, templates ja vault'i kasutamist. T\u00e4na astume j\u00e4rgmise suure sammu - \u00f5pime kirjutama professionaalset infrastruktuuri koodi ja v\u00f5rdleme erinevaid t\u00f6\u00f6riistu.</p>"},{"location":"ansible_roles/lecture/#vagrant-testing-environment","title":"Vagrant Testing Environment","text":""},{"location":"ansible_roles/lecture/#loeng-1-vagrant-basics-for-testing","title":"Loeng 1: Vagrant Basics for Testing","text":""},{"location":"ansible_roles/lecture/#miks-me-vajame-testikeskkonda","title":"Miks me vajame testikeskkonda?","text":"<p>Kui t\u00f6\u00f6tate Ansible playbook'ide v\u00f5i Puppet manifest'idega, ei saa neid testida toodangu serverites! Vajate turvalist keskkonda, kus:</p> <ul> <li>V\u00f5ib katki minna - kui midagi l\u00e4heb valesti</li> <li>Kiire reset - uus puhas server sekundites  </li> <li>Erinevad OS'id - Ubuntu, CentOS, Debian testimiseks</li> <li>Ei maksa raha - cloud VM'ide asemel</li> </ul> <p>Vagrant lahendab t\u00e4pselt selle probleemi!</p>"},{"location":"ansible_roles/lecture/#mis-on-vagrant","title":"Mis on Vagrant?","text":"<p>Vagrant = Virtual Machine management tool:</p> Bash<pre><code># Looge VM sekunditega\nvagrant init ubuntu/jammy64\nvagrant up\n\n# \u00dchendage VM'iga\nvagrant ssh\n\n# H\u00e4vitage ja alustage uuest\nvagrant destroy -f\nvagrant up\n</code></pre>"},{"location":"ansible_roles/lecture/#vagrant-project-setup","title":"Vagrant Project Setup","text":""},{"location":"ansible_roles/lecture/#basic-vagrantfile","title":"Basic Vagrantfile:","text":"Ruby<pre><code># Vagrantfile\nVagrant.configure(\"2\") do |config|\n  # Base box (OS image)\n  config.vm.box = \"ubuntu/jammy64\"\n\n  # VM resources\n  config.vm.provider \"virtualbox\" do |vb|\n    vb.memory = \"2048\"\n    vb.cpus = 2\n  end\n\n  # Network settings\n  config.vm.network \"private_network\", ip: \"192.168.56.10\"\n\n  # Shared folders\n  config.vm.synced_folder \".\", \"/vagrant\"\n\n  # Ansible provisioning\n  config.vm.provision \"ansible\" do |ansible|\n    ansible.playbook = \"site.yml\"\n    ansible.inventory_path = \"inventory/vagrant\"\n  end\nend\n</code></pre>"},{"location":"ansible_roles/lecture/#multi-vm-setup","title":"Multi-VM Setup:","text":"Ruby<pre><code>Vagrant.configure(\"2\") do |config|\n  # Ansible test VM\n  config.vm.define \"ansible-vm\" do |ansible|\n    ansible.vm.box = \"ubuntu/jammy64\"\n    ansible.vm.network \"private_network\", ip: \"192.168.56.11\"\n    ansible.vm.hostname = \"ansible-test\"\n  end\n\n  # Puppet test VM  \n  config.vm.define \"puppet-vm\" do |puppet|\n    puppet.vm.box = \"ubuntu/jammy64\"\n    puppet.vm.network \"private_network\", ip: \"192.168.56.12\"\n    puppet.vm.hostname = \"puppet-test\"\n  end\nend\n</code></pre>"},{"location":"ansible_roles/lecture/#vagrant-lifecycle","title":"Vagrant Lifecycle","text":"<pre><code>flowchart TD\n    A[\ud83d\udcdd vagrant init&lt;br/&gt;Loo Vagrantfile] --&gt; B[\u2705 vagrant validate&lt;br/&gt;Kontrolli konfiguratsiooni]\n    B --&gt; C[\ud83d\ude80 vagrant up&lt;br/&gt;K\u00e4ivita VM]\n    C --&gt; D[\ud83d\udd17 vagrant ssh&lt;br/&gt;\u00dchenda VM'iga]\n    D --&gt; E[\u23f8 vagrant halt&lt;br/&gt;Peata VM]\n    E --&gt; F[\ud83d\udd04 vagrant reload&lt;br/&gt;Restart VM]\n    F --&gt; G[\ud83d\uddd1 vagrant destroy&lt;br/&gt;Kustuta VM]\n\n    style A fill:#99ccff\n    style B fill:#99ff99\n    style C fill:#ffcc99\n    style D fill:#ff9999\n    style E fill:#cc99ff\n    style F fill:#ffff99\n    style G fill:#ff99cc</code></pre> Bash<pre><code># Projekt setup\nvagrant init                # Loo Vagrantfile\nvagrant validate            # Kontrolli konfiguratsiooni\n\n# VM management\nvagrant up                 # K\u00e4ivita VM\nvagrant ssh                # \u00dchenda VM'iga\nvagrant halt               # Peata VM\nvagrant reload             # Restart VM\nvagrant destroy            # Kustuta VM\n\n# Snapshots ja info\nvagrant snapshot save clean    # Salvesta snapshot\nvagrant snapshot restore clean # Taasta snapshot\nvagrant status                 # Vaata VM olekut\n</code></pre>"},{"location":"ansible_roles/lecture/#vagrant-ansible-integration","title":"Vagrant + Ansible Integration","text":"<p>Automaatne provisioning: Ruby<pre><code>config.vm.provision \"ansible\" do |ansible|\n  ansible.playbook = \"site.yml\"\n  ansible.inventory_path = \"inventory\"\n  ansible.limit = \"all\"\n  ansible.verbose = \"v\"\nend\n</code></pre></p> <p>Manual provisioning: Bash<pre><code># VM k\u00e4imas, provisioning k\u00e4sitsi\nvagrant up --no-provision\nvagrant ssh\n# VM sees: install Ansible, run playbooks\n</code></pre></p>"},{"location":"ansible_roles/lecture/#demo-quick-vagrant-test","title":"Demo: Quick Vagrant Test","text":"Bash<pre><code># Loo test projekt\nmkdir vagrant-demo &amp;&amp; cd vagrant-demo\n\n# Initialize Vagrant\nvagrant init ubuntu/jammy64\n\n# Start VM\nvagrant up\n\n# Connect and test\nvagrant ssh\nsudo apt update\nexit\n\n# Cleanup\nvagrant destroy -f\n</code></pre> <p>\ud83d\udca1 Protip: Vagrant'iga saate testida sama playbook'i erinevatel OS'idel!</p>"},{"location":"ansible_roles/lecture/#ansible-roles-tutvustus","title":"Ansible Roles tutvustus","text":""},{"location":"ansible_roles/lecture/#loeng-2-ansible-roles-architecture","title":"Loeng 2: Ansible Roles Architecture","text":""},{"location":"ansible_roles/lecture/#miks-vajame-rolee-spagettikood-probleem","title":"Miks vajame role'e? Spagettikood probleem","text":"<p>Kujutage ette olukorda: teie boss tuleb teie juurde ja \u00fctleb:</p> <p>\"Palun seadista mulle 50 veebiserveri, 20 andmebaasiserveri ja 30 monitoring serveri. K\u00f5ik peavad olema identse konfiguratsiooniga ja ma vajan seda homme valmis.\"</p> <p>Kuidas te seda tegema hakkaksite?</p> <p>Enamik algajaid hakkab kirjutama \u00fcht suurt playbook'i:</p> YAML<pre><code># monster-playbook.yml - 800+ rida \u00f5udust!\n- name: \"K\u00f5ik \u00fches failis - \u00e4ra tehke kunagi nii!\"\n  hosts: all\n  tasks:\n    # 100 task'i nginx jaoks\n    - name: \"Install nginx\"\n    - name: \"Configure nginx main config\"  \n    - name: \"Setup nginx virtual hosts\"\n    - name: \"Generate SSL certificates for nginx\"\n    - name: \"Configure nginx security headers\"\n    # ... veel 95 task'i nginx jaoks\n\n    # 80 task'i mysql jaoks\n    - name: \"Install mysql server\"\n    - name: \"Configure mysql users\"\n    - name: \"Setup mysql databases\"\n    # ... veel 77 task'i mysql jaoks\n\n    # 60 task'i monitoring jaoks\n    - name: \"Install prometheus\"\n    - name: \"Configure grafana\"\n    # ... veel 58 task'i monitoring jaoks\n\n    # 40 task'i backup jaoks\n    # 30 task'i SSL jaoks\n    # 50 task'i security jaoks\n    # ja nii edasi...\n</code></pre> <p>See on kohutav lahendus! Miks?</p> <ol> <li>V\u00f5imatu lugeda - 800+ rida \u00fches failis</li> <li>V\u00f5imatu testida - peate testima kogu faili korraga</li> <li>Ei saa korduvkasutada - kui vajate nginx'i teises projektis?</li> <li>Meeskonnat\u00f6\u00f6 v\u00f5imatu - kuidas jagada kolleegidega?</li> <li>Muudatused riskantne - \u00fche asja muutmine v\u00f5ib midagi muud l\u00f5hkuda</li> </ol> <p>Ma olen n\u00e4inud selliseid 2000+ realisi playbook'e p\u00e4ris firmades. Need on nagu spagettikood - keegi ei tea, mis kuhu kuulub!</p>"},{"location":"ansible_roles/lecture/#mis-on-ansible-role-lego-klotsid-meetod","title":"Mis on Ansible Role? LEGO klotsid meetod","text":"<p>Ansible Role on nagu LEGO klots.</p> <p>M\u00f5elge LEGO peale: - Iga klots teeb \u00fchte asja h\u00e4sti (auto ratas, sein, katus) - Klotsid on standardsed - sobivad alati kokku - Klotsid on korduvkasutatavad - sama ratas sobib auto ja lennuki k\u00fclge - Klotsid on kombineeritavad - saate ehitada maju, autosid, linnu</p> <p>Role'id t\u00f6\u00f6tavad t\u00e4pselt samamoodi:</p> YAML<pre><code># site.yml - selge ja lihtne!\n- name: \"Web servers setup\"\n  hosts: webservers\n  roles:\n    - common      # P\u00f5hiseadistused (SSH, users, firewall)\n    - nginx       # Ainult veebiserver  \n    - php         # Ainult PHP runtime\n    - ssl         # Ainult SSL sertifikaadid\n\n- name: \"Database servers setup\"\n  hosts: dbservers\n  roles:\n    - common      # SAMA common role!\n    - mysql       # Ainult andmebaas\n    - backup      # Ainult varundamine\n\n- name: \"Monitoring servers setup\"\n  hosts: monitoring\n  roles:\n    - common      # SAMA common role taas!\n    - prometheus  # Ainult monitoring\n    - grafana     # Ainult dashboardid\n</code></pre> <p>Vaadake, mis toimus: - <code>common</code> role kasutatakse kolmes erinevas kohas - Iga role teeb ainult \u00fchte asja - Kood on selge ja loetav - Saame osasid eraldi testida</p>"},{"location":"ansible_roles/lecture/#rolei-anatoomia-maja-ehitamise-meetod","title":"Role'i anatoomia: Maja ehitamise meetod","text":"<p>M\u00f5elge role'ile nagu maja ehitamisele. Igal osalisel on oma koht ja eesm\u00e4rk:</p> Text Only<pre><code>nginx-role/\n\u251c\u2500\u2500 README.md              # \"Kasutusjuhend\" - kuidas role't kasutada\n\u251c\u2500\u2500 meta/main.yml          # \"Ehitusluba\" - dependencies, n\u00f5uded\n\u251c\u2500\u2500 defaults/main.yml      # \"Standardmaterjalid\" - vaikimisi seaded\n\u251c\u2500\u2500 vars/main.yml          # \"Kindlad materjalid\" - muutumatud seaded\n\u251c\u2500\u2500 tasks/main.yml         # \"Ehitusplaan\" - sammud j\u00e4rjest\n\u251c\u2500\u2500 handlers/main.yml      # \"H\u00e4ires\u00fcsteemid\" - reaktsioonid muudatustele\n\u251c\u2500\u2500 templates/             # \"Kohandatavad osad\" - konfiguratsioonifailid\n\u2502   \u2514\u2500\u2500 nginx.conf.j2\n\u251c\u2500\u2500 files/                 # \"Valmis detailid\" - skriptid, sertifikaadid\n\u2502   \u2514\u2500\u2500 startup.sh\n\u2514\u2500\u2500 tests/                 # \"Kontrollid\" - kas maja p\u00fcsib p\u00fcsti\n    \u2514\u2500\u2500 test.yml\n</code></pre>"},{"location":"ansible_roles/lecture/#iga-kausta-eesmark","title":"Iga kausta eesm\u00e4rk:","text":"<p><code>tasks/</code> = Ehitusplaan - Sisaldab k\u00f5iki samme, mis role teeb - Alati alustage siit role'i lugemisel</p> <p><code>defaults/</code> = Standardmaterjalid - Vaikimisi seaded, mida saab muuta - Madalaim prioriteet - k\u00f5ik muu kirjutab \u00fcle</p> <p><code>vars/</code> = Kindlad materjalid - Seaded, mida role ise m\u00e4\u00e4rab - K\u00f5rge prioriteet - raske \u00fcle kirjutada</p> <p><code>templates/</code> = Kohandatavad osad - Konfiguratsioonifailid, mida saab muutujatega kohandada - Kasutab Jinja2 template engine'i</p> <p><code>files/</code> = Valmis detailid - Staatilised failid, mis kopeeritakse otse - Skriptid, sertifikaadid, etc.</p> <p><code>handlers/</code> = H\u00e4ires\u00fcsteemid - K\u00e4ivitatakse ainult siis, kui midagi muutus - Tavaliselt teenuste restart'imine</p> <p><code>meta/</code> = Ehitusluba - Kirjeldab, mida role vajab t\u00f6\u00f6ks - Dependencies teiste role'idega</p>"},{"location":"ansible_roles/lecture/#lihtne-nginx-role-naide","title":"Lihtne nginx role n\u00e4ide","text":"<p>Vaatame, kuidas lihtsaim nginx role v\u00e4lja n\u00e4eks:</p> <p><code>tasks/main.yml</code> - mis me teeme: YAML<pre><code>---\n- name: \"Install Nginx (alati kirjutage selged nimed!)\"\n  package:\n    name: nginx\n    state: present\n\n- name: \"Configure Nginx (kasutame template'i)\"\n  template:\n    src: nginx.conf.j2\n    dest: /etc/nginx/nginx.conf\n  notify: restart nginx    # See k\u00e4ivitab handler'i!\n\n- name: \"Start Nginx (enable = autostart boot'imisel)\"\n  service:\n    name: nginx\n    state: started\n    enabled: yes\n</code></pre></p> <p><code>defaults/main.yml</code> - vaikimisi seaded: YAML<pre><code>---\nnginx_port: 80              # Enamik tahab port 80\nnginx_user: www-data        # Ubuntu standard user\nnginx_worker_processes: 2   # M\u00f5istlik algus\nnginx_max_connections: 1024 # Piisav v\u00e4ikesele saidile\n</code></pre></p> <p><code>templates/nginx.conf.j2</code> - konfiguratsioon: Nginx Configuration File<pre><code>user {{ nginx_user }};\nworker_processes {{ nginx_worker_processes }};\n\nevents {\n    worker_connections {{ nginx_max_connections }};\n}\n\nhttp {\n    server {\n        listen {{ nginx_port }};\n        server_name _;\n        root /var/www/html;\n        index index.html;\n    }\n}\n</code></pre></p> <p><code>handlers/main.yml</code> - reaktsioonid: YAML<pre><code>---\n- name: restart nginx\n  service:\n    name: nginx\n    state: restarted\n</code></pre></p> <p>N\u00e4ete, kui lihtne see on? Iga fail teeb \u00fchte asja ja need t\u00f6\u00f6tavad koos!</p>"},{"location":"ansible_roles/lecture/#variable-precedence-muutujate-hierarhia","title":"Variable Precedence: Muutujate hierarhia","text":"<p>Ansible'is on muutujatel t\u00e4htsusj\u00e4rjekord. See on \u00fcks keerulisemaid teemasid, aga v\u00e4ga oluline m\u00f5ista!</p> <p>K\u00f5rgemad kirjutavad \u00fcle madalamad:</p> Text Only<pre><code>1. Command line (-e var=value)    \u2190 K\u00d5IGE TUGEVAM (k\u00e4sk)\n2. Task vars                      \n3. Block vars\n4. Role vars                      \u2190 vars/main.yml\n5. Include vars\n6. Set_facts\n7. Registered vars\n8. Host facts\n9. Play vars\n10. Host vars\n11. Group vars  \n12. Role defaults                 \u2190 K\u00d5IGE N\u00d5RGEM (soovitus)\n</code></pre>"},{"location":"ansible_roles/lecture/#praktiline-naide-hierarhiast","title":"Praktiline n\u00e4ide hierarhiast:","text":"YAML<pre><code># defaults/main.yml (k\u00f5ige n\u00f5rgem)\nnginx_port: 80\n\n# vars/main.yml (tugev)\nnginx_port: 8080\n\n# playbook.yml (tugevam)\n- role: nginx\n  vars:\n    nginx_port: 9000\n\n# K\u00e4sureal (k\u00f5ige tugevam)\nansible-playbook site.yml -e nginx_port=3000\n</code></pre> <p>Tulemus: nginx kuulab port 3000!</p>"},{"location":"ansible_roles/lecture/#kuidas-seda-meeles-pidada","title":"Kuidas seda meeles pidada:","text":"<ul> <li>Role defaults = \"Soovitused\" (n\u00f5rgad)</li> <li>Role vars = \"Reeglid\" (tugevad)  </li> <li>Play vars = \"K\u00e4sud\" (tugevamad)</li> <li>Extra vars = \"K\u00e4sklused\" (k\u00f5ige tugevamad)</li> </ul>"},{"location":"ansible_roles/lecture/#roleide-kasutamine-playbookis","title":"Role'ide kasutamine playbook'is","text":""},{"location":"ansible_roles/lecture/#lihtne-kasutamine","title":"Lihtne kasutamine:","text":"YAML<pre><code>- name: \"Deploy web application\"\n  hosts: webservers\n  become: yes\n  roles:\n    - nginx\n    - php\n    - mysql-client\n</code></pre>"},{"location":"ansible_roles/lecture/#muutujatega-kasutamine","title":"Muutujatega kasutamine:","text":"YAML<pre><code>- name: \"Custom web server setup\"\n  hosts: webservers\n  become: yes\n  roles:\n    - role: nginx\n      vars:\n        nginx_port: 8080\n        nginx_ssl_enabled: true\n        nginx_worker_processes: 4\n</code></pre>"},{"location":"ansible_roles/lecture/#conditional-roleid","title":"Conditional role'id:","text":"YAML<pre><code>- name: \"Environment-specific deployment\"\n  hosts: all\n  become: yes\n  roles:\n    - common\n    - role: nginx\n      when: \"'webservers' in group_names\"\n    - role: mysql\n      when: \"'dbservers' in group_names\"\n    - role: monitoring\n      when: app_env == \"production\"\n</code></pre>"},{"location":"ansible_roles/lecture/#role-creation-best-practices","title":"Role Creation Best Practices","text":""},{"location":"ansible_roles/lecture/#loeng-3-professionaalsed-standardid","title":"Loeng 3: Professionaalsed standardid","text":"<p>N\u00fc\u00fcd kui teate, mis on role, \u00f5pime, kuidas teha neid \u00f5igesti. Ma olen n\u00e4inud tuhandeid halbu role'e - aga hea uudis on see, et on lihtsad reeglid, mis muudavad teie role'id professionaalseteks!</p>"},{"location":"ansible_roles/lecture/#reegel-1-single-responsibility-principle","title":"Reegel 1: Single Responsibility Principle","text":"<p>\"\u00dcks role = \u00fcks vastutus\"</p> <p>See on k\u00f5ige olulisem reegel. Iga role peaks tegema t\u00e4pselt \u00fchte asja ja tegema seda h\u00e4sti.</p>"},{"location":"ansible_roles/lecture/#hea-lahenemine","title":"Hea l\u00e4henemine \u2705","text":"Text Only<pre><code>roles/\n\u251c\u2500\u2500 nginx/         # AINULT veebiserver\n\u251c\u2500\u2500 mysql/         # AINULT andmebaas\n\u251c\u2500\u2500 php/           # AINULT PHP runtime\n\u251c\u2500\u2500 ssl/           # AINULT SSL sertifikaadid\n\u251c\u2500\u2500 backup/        # AINULT varundamine\n\u2514\u2500\u2500 monitoring/    # AINULT j\u00e4lgimine\n</code></pre>"},{"location":"ansible_roles/lecture/#halb-lahenemine","title":"Halb l\u00e4henemine \u274c","text":"Text Only<pre><code>roles/\n\u2514\u2500\u2500 web-stack/     # Teeb K\u00d5IKE korraga:\n                   # nginx + mysql + php + ssl + backup + monitoring\n</code></pre> <p>Miks see halb? - Kui MySQL vajab parandust, peate puutuma nginx'iga - Ei saa nginx'i kasutada ilma MySQL'ita - Raske testida - peate testima k\u00f5ike korraga - Suur ja keeruline - keegi ei saa aru</p> <p>Praktiline n\u00e4ide:</p> <p>Kujutage ette, et teil on <code>web-stack</code> role, mis teeb k\u00f5ike. Siis tuleb uus projekt, kus vaja ainult nginx'i (ilma MySQL'ita). Mida te teete?</p> <ol> <li>Halvad valikud:</li> <li>Kopeerite koodi ja eemaldatae MySQL osad (DRY printsiipi rikkumine)</li> <li>Lisate tuhandeeid <code>when</code> tingimusi (keeruline)</li> <li> <p>Kasutate kogu role'i ja ignoreerite MySQL'i (raisatud ressursid)</p> </li> <li> <p>Hea valik:</p> </li> <li>Kasutate eraldi <code>nginx</code> role'i - t\u00f6\u00f6tab kohe!</li> </ol>"},{"location":"ansible_roles/lecture/#reegel-2-8020-konfigureeritavus","title":"Reegel 2: 80/20 Konfigureeritavus","text":"<p>80% juhtudest peaks role t\u00f6\u00f6tama vaikimisi seadetega!</p> <p>See t\u00e4hendab, et algajad saavad kohe alustada, aga eksperdid saavad k\u00f5ike muuta.</p>"},{"location":"ansible_roles/lecture/#algajasobralik-defaults","title":"Algajas\u00f5bralik defaults","text":"YAML<pre><code># defaults/main.yml - lihtne ja toimib kohe\nwebserver_port: 80                    # K\u00f5ik teavad port 80\nwebserver_ssl_enabled: false          # SSL on optional\nwebserver_user: www-data              # Ubuntu standard\nwebserver_worker_processes: 2         # M\u00f5istlik algus\n\n# Lihtsad moodulid\nwebserver_modules:\n  - rewrite    # URL rewriting\n  - ssl        # HTTPS support\n</code></pre>"},{"location":"ansible_roles/lecture/#eksperdi-voimalused","title":"Eksperdi v\u00f5imalused","text":"YAML<pre><code># playbook.yml - ekspert saab k\u00f5ike muuta\n- role: webserver\n  vars:\n    webserver_port: 443\n    webserver_ssl_enabled: true\n    webserver_ssl_cert: \"/path/to/custom.pem\"\n    webserver_worker_processes: 8\n\n    # Eksperdi moodulid\n    webserver_modules:\n      - rewrite\n      - ssl\n      - headers\n      - deflate\n      - geoip\n      - rate_limit\n\n    # T\u00e4iesti custom konfiguratsioon\n    webserver_custom_config: |\n      # Minu spetsiaalne konfiguratsioon\n      gzip on;\n      gzip_types text/css application/javascript;\n\n      location /api/ {\n          proxy_pass http://backend;\n          proxy_set_header Host $host;\n      }\n</code></pre> <p>V\u00f5tmepunktid: - Defaults peavad olema turvalised ja m\u00f5istlikud - K\u00f5ik peab olema \u00fcle kirjutatav advanced kasutajatele - Dokumentatsioon peab sisaldama n\u00e4iteid m\u00f5lemale tasemele</p>"},{"location":"ansible_roles/lecture/#reegel-3-multi-os-tugi","title":"Reegel 3: Multi-OS tugi","text":"<p>Professionaalne role toetab mitut operatsioonis\u00fcsteemi. See t\u00e4hendab, et sama role t\u00f6\u00f6tab Ubuntu's, Debian'is, CentOS'is, jne.</p>"},{"location":"ansible_roles/lecture/#kuidas-seda-organiseerida","title":"Kuidas seda organiseerida:","text":"Text Only<pre><code>webserver-role/\n\u251c\u2500\u2500 vars/\n\u2502   \u251c\u2500\u2500 main.yml           # \u00dchised muutujad\n\u2502   \u251c\u2500\u2500 Debian.yml         # Ubuntu/Debian spetsiifilised\n\u2502   \u251c\u2500\u2500 RedHat.yml         # CentOS/RHEL spetsiifilised\n\u2502   \u2514\u2500\u2500 Ubuntu.yml         # Ubuntu erip\u00e4rad\n\u2514\u2500\u2500 tasks/\n    \u251c\u2500\u2500 main.yml           # Peamine loogika\n    \u251c\u2500\u2500 install-Debian.yml # Debian installeerimise viis\n    \u2514\u2500\u2500 install-RedHat.yml # RedHat installeerimise viis\n</code></pre>"},{"location":"ansible_roles/lecture/#smart-approach-os-detection","title":"Smart approach - OS detection:","text":"<p><code>tasks/main.yml</code>: YAML<pre><code>---\n- name: \"Load OS-specific variables (smart trick!)\"\n  include_vars: \"{{ item }}\"\n  with_first_found:\n    - \"{{ ansible_distribution }}.yml\"        # Ubuntu.yml\n    - \"{{ ansible_os_family }}.yml\"           # Debian.yml\n    - \"main.yml\"                              # fallback\n\n- name: \"Install packages (OS-specific way)\"\n  include_tasks: \"install-{{ ansible_os_family }}.yml\"\n\n- name: \"Configure webserver (universal)\"\n  include_tasks: configure.yml\n</code></pre></p> <p><code>vars/Debian.yml</code> (Ubuntu/Debian): YAML<pre><code>---\nwebserver_package: \"nginx\"\nwebserver_service: \"nginx\"  \nwebserver_config_path: \"/etc/nginx\"\nwebserver_user: \"www-data\"        # Debian kasutab www-data\nwebserver_group: \"www-data\"\nwebserver_log_path: \"/var/log/nginx\"\n</code></pre></p> <p><code>vars/RedHat.yml</code> (CentOS/RHEL): YAML<pre><code>---\nwebserver_package: \"nginx\"\nwebserver_service: \"nginx\"\nwebserver_config_path: \"/etc/nginx\"\nwebserver_user: \"nginx\"           # RedHat kasutab nginx\nwebserver_group: \"nginx\"\nwebserver_log_path: \"/var/log/nginx\"\n</code></pre></p> <p>Miks see on kasulik? - Role t\u00f6\u00f6tab automaatselt erinevates OS'ides - Ei pea meeles pidama OS erinevusi - Saate testida mitmes keskkonnas</p>"},{"location":"ansible_roles/lecture/#reegel-4-alati-valideerige-sisendeid","title":"Reegel 4: Alati valideerige sisendeid!","text":"<p>Ma olen n\u00e4inud tudengeid, kes unustavad valideerimise. Tulemus on segadus ja cryptic error message'id.</p> <p>Iga role peaks kontrollima: 1. Kas kohustuslikud muutujad on m\u00e4\u00e4ratud? 2. Kas muutujate v\u00e4\u00e4rtused on m\u00f5istlikud? 3. Kas s\u00fcsteem vastab n\u00f5uetele?</p>"},{"location":"ansible_roles/lecture/#parameetrite-valideerimine","title":"Parameetrite valideerimine","text":"<p><code>tasks/validate.yml</code>: YAML<pre><code>---\n- name: \"Validate port number (critical check!)\"\n  assert:\n    that:\n      - webserver_port is defined\n      - webserver_port is number\n      - webserver_port &gt; 0\n      - webserver_port &lt; 65536\n    fail_msg: |\n      ERROR: webserver_port must be a valid port number (1-65535)\n      Current value: {{ webserver_port | default('undefined') }}\n\n- name: \"Validate SSL settings when enabled\"\n  assert:\n    that:\n      - webserver_ssl_cert_path is defined\n      - webserver_ssl_key_path is defined\n      - webserver_ssl_cert_path | length &gt; 0\n      - webserver_ssl_key_path | length &gt; 0\n    fail_msg: |\n      ERROR: SSL sertifikaadi teed peavad olema m\u00e4\u00e4ratud kui SSL on lubatud!\n      webserver_ssl_cert_path: {{ webserver_ssl_cert_path | default('undefined') }}\n      webserver_ssl_key_path: {{ webserver_ssl_key_path | default('undefined') }}\n  when: webserver_ssl_enabled | default(false)\n\n- name: \"Check available disk space\"\n  assert:\n    that:\n      - ansible_mounts | selectattr('mount', 'equalto', '/') | list | first | map(attribute='size_available') | first &gt; 1000000000\n    fail_msg: \"ERROR: Vaja v\u00e4hemalt 1GB vaba ruumi root partitsioonil\"\n\n- name: \"Validate worker processes count\"\n  assert:\n    that:\n      - webserver_worker_processes is number\n      - webserver_worker_processes &gt; 0\n      - webserver_worker_processes &lt;= (ansible_processor_vcpus * 2)\n    fail_msg: |\n      ERROR: Worker processes arv peab olema 1 kuni {{ ansible_processor_vcpus * 2 }}\n      (max 2x CPU core'ide arv)\n      Current value: {{ webserver_worker_processes }}\n</code></pre></p>"},{"location":"ansible_roles/lecture/#susteemi-nouete-kontroll","title":"S\u00fcsteemi n\u00f5uete kontroll","text":"YAML<pre><code>- name: \"Check minimum RAM requirement\"\n  assert:\n    that:\n      - ansible_memtotal_mb &gt;= 512\n    fail_msg: \"ERROR: Vaja v\u00e4hemalt 512MB RAM'i. Hetkel: {{ ansible_memtotal_mb }}MB\"\n\n- name: \"Check if required user exists or can be created\"\n  user:\n    name: \"{{ webserver_user }}\"\n    state: present\n  check_mode: yes\n  register: user_check\n  failed_when: false\n\n- name: \"Create webserver user if doesn't exist\"\n  user:\n    name: \"{{ webserver_user }}\"\n    system: yes\n    shell: /bin/false\n    home: \"/var/lib/{{ webserver_user }}\"\n    createhome: no\n  when: user_check is failed\n</code></pre>"},{"location":"ansible_roles/lecture/#reegel-5-taskide-organiseerimine","title":"Reegel 5: Task'ide organiseerimine","text":"<p><code>tasks/main.yml</code> peaks olema nagu sisukord - selge \u00fclevaade, mis toimub.</p>"},{"location":"ansible_roles/lecture/#hea-struktuur","title":"Hea struktuur:","text":"YAML<pre><code>---\n# tasks/main.yml - sisukord\n- name: \"Validate input parameters (safety first!)\"\n  include_tasks: validate.yml\n\n- name: \"Load OS-specific variables\"  \n  include_vars: \"{{ ansible_os_family }}.yml\"\n\n- name: \"Install packages and dependencies\"\n  include_tasks: install.yml\n\n- name: \"Configure webserver\"\n  include_tasks: configure.yml\n\n- name: \"Setup SSL certificates\"\n  include_tasks: ssl.yml\n  when: webserver_ssl_enabled | default(false)\n\n- name: \"Configure virtual hosts\"\n  include_tasks: vhosts.yml\n  when: webserver_vhosts | length &gt; 0\n\n- name: \"Start and enable services\"\n  include_tasks: service.yml\n\n- name: \"Run post-installation tests\"\n  include_tasks: test.yml\n  when: webserver_run_tests | default(true)\n</code></pre>"},{"location":"ansible_roles/lecture/#miks-see-on-hea","title":"Miks see on hea?","text":"<ol> <li>Selge \u00fclevaade - n\u00e4ete kohe, mis toimub</li> <li>Modulaarne - iga osa eraldi failis</li> <li>Conditional - mittevajalikud osad j\u00e4etakse vahele</li> <li>Testitav - saate osi eraldi k\u00e4ivitada</li> </ol>"},{"location":"ansible_roles/lecture/#taskide-nimetamine","title":"Task'ide nimetamine","text":"<p>Head nimed: YAML<pre><code>- name: \"Install Nginx and required dependencies\"\n- name: \"Generate SSL certificate for {{ webserver_domain }}\"\n- name: \"Configure Nginx virtual host for {{ item.domain }}\"\n- name: \"Restart Nginx service if configuration changed\"\n</code></pre></p> <p>Halvad nimed: YAML<pre><code>- name: \"install\"\n- name: \"config\"\n- name: \"setup stuff\"\n- name: \"do things\"\n</code></pre></p>"},{"location":"ansible_roles/lecture/#dependency-management","title":"Dependency Management","text":"<p>M\u00f5nikord teie role vajab teisi role'e. N\u00e4iteks <code>wordpress</code> role vajab <code>nginx</code>, <code>php</code> ja <code>mysql</code> role'e.</p>"},{"location":"ansible_roles/lecture/#meta-dependencies","title":"Meta dependencies:","text":"YAML<pre><code># meta/main.yml\ndependencies:\n  - role: common\n    vars:\n      common_packages:\n        - curl\n        - wget\n        - unzip\n\n  - role: nginx\n    vars:\n      nginx_modules:\n        - rewrite\n        - ssl\n\n  - role: php\n    vars:\n      php_version: \"8.1\"\n      php_extensions:\n        - mysql\n        - gd\n        - curl\n    when: wordpress_install_php | default(true)\n\n  - role: mysql\n    vars:\n      mysql_databases:\n        - name: \"{{ wordpress_db_name }}\"\n      mysql_users:\n        - name: \"{{ wordpress_db_user }}\"\n          password: \"{{ wordpress_db_password }}\"\n          priv: \"{{ wordpress_db_name }}.*:ALL\"\n    when: wordpress_manage_database | default(true)\n</code></pre> <p>Mis toimub: 1. Kui kutsute <code>wordpress</code> role'i, k\u00e4ivitatakse automaatselt k\u00f5ik dependencies 2. Igale dependency'le saate anda eraldi muutujad 3. Saate dependency'sid v\u00e4lja l\u00fclitada <code>when</code> tingimustega</p>"},{"location":"ansible_roles/lecture/#ansible-galaxy","title":"Ansible Galaxy","text":""},{"location":"ansible_roles/lecture/#loeng-4-galaxy-ecosystem","title":"Loeng 4: Galaxy ecosystem","text":"<p>N\u00fc\u00fcd kui oskate role'e luua, \u00f5pime, kuidas kasutada maailma suurimat Ansible role'ide repositooriumi. Miks teha k\u00f5ike ise, kui saate kasutada teiste head t\u00f6\u00f6d?</p>"},{"location":"ansible_roles/lecture/#mis-on-ansible-galaxy","title":"Mis on Ansible Galaxy?","text":"<p>Ansible Galaxy on nagu App Store programmeerijatele:</p> <p>\ud83d\udce6 20,000+ valmis role'i \ud83d\udd0d Kiire otsing ja filtreerimine \u2b50 Reitingud ja arvustused \ud83c\udf0d Jagamine kogukonnaga </p>"},{"location":"ansible_roles/lecture/#praktiline-naide","title":"Praktiline n\u00e4ide","text":"<p>Probleem: Boss tahab Jenkins + MySQL + SSL serveri homme valmis.</p> <p>Ilma Galaxy'ta: 3-5 p\u00e4eva role'ide kirjutamist Galaxy'ga: 1 tund role'ide allalaadimist ja konfigureerimist</p>"},{"location":"ansible_roles/lecture/#roleide-allalaadimine","title":"Role'ide allalaadimine","text":""},{"location":"ansible_roles/lecture/#otsimine","title":"Otsimine","text":"Bash<pre><code># Veebi kaudu (algajatele)\nfirefox https://galaxy.ansible.com/\n\n# K\u00e4surealt (kiire)\nansible-galaxy search nginx\nansible-galaxy search --author geerlingguy\n</code></pre>"},{"location":"ansible_roles/lecture/#installimine","title":"Installimine","text":"Bash<pre><code># \u00dcks role\nansible-galaxy install geerlingguy.nginx\n\n# Konkreetne versioon (production!)\nansible-galaxy install geerlingguy.nginx,2.8.0\n\n# GitHubist otse\nansible-galaxy install git+https://github.com/geerlingguy/ansible-role-nginx.git\n</code></pre>"},{"location":"ansible_roles/lecture/#requirements-fail-professional-way","title":"Requirements fail (professional way)","text":"YAML<pre><code># requirements.yml\n---\n- name: geerlingguy.nginx\n  version: \"2.8.0\"        # Lukusta versioon!\n\n- name: geerlingguy.mysql\n  version: \"4.3.0\"\n\n- name: geerlingguy.php\n  version: \"4.9.0\"\n\n# Custom GitHubi role\n- src: https://github.com/mycompany/custom-role.git\n  scm: git\n  version: main\n  name: mycompany.custom\n</code></pre> Bash<pre><code># Installige k\u00f5ik korraga\nansible-galaxy install -r requirements.yml\n</code></pre>"},{"location":"ansible_roles/lecture/#parimad-galaxy-roleid","title":"Parimad Galaxy role'id","text":"<p>Jeff Geerling on Ansible kogukonna kuningas - tema role'id on alati head:</p> YAML<pre><code># Top soovitused\n- name: geerlingguy.apache     # Apache veebiserver\n- name: geerlingguy.nginx      # Nginx veebiserver\n- name: geerlingguy.mysql      # MySQL database\n- name: geerlingguy.php        # PHP runtime  \n- name: geerlingguy.docker     # Docker engine\n- name: geerlingguy.certbot    # Let's Encrypt SSL\n- name: geerlingguy.firewall   # UFW firewall\n- name: geerlingguy.jenkins    # Jenkins CI/CD\n</code></pre>"},{"location":"ansible_roles/lecture/#taielik-lamp-stack-naide","title":"T\u00e4ielik LAMP stack n\u00e4ide","text":"YAML<pre><code># site.yml - 10 minutiga valmis!\n- name: \"LAMP stack Galaxy role'idega\"\n  hosts: webservers\n  become: yes\n\n  vars:\n    # Apache konfiguratsioon\n    apache_vhosts:\n      - servername: \"mysite.com\"\n        documentroot: \"/var/www/mysite\"\n\n    # MySQL andmebaas\n    mysql_databases:\n      - name: \"mysite_db\"\n    mysql_users:\n      - name: \"mysite_user\"\n        password: \"{{ vault_mysql_password }}\"\n        priv: \"mysite_db.*:ALL\"\n\n    # PHP seaded\n    php_packages:\n      - php8.1\n      - php8.1-mysql\n      - php8.1-curl\n\n  roles:\n    - geerlingguy.apache\n    - geerlingguy.mysql\n    - geerlingguy.php\n    - geerlingguy.certbot    # Automaatne HTTPS!\n</code></pre>"},{"location":"ansible_roles/lecture/#galaxy-best-practices","title":"Galaxy best practices","text":""},{"location":"ansible_roles/lecture/#versioonide-lukustamine","title":"Versioonide lukustamine","text":"YAML<pre><code># Production'is ALATI fikseeritud versioonid\n- name: geerlingguy.nginx\n  version: \"3.1.4\"          # T\u00e4pne versioon\n- name: geerlingguy.mysql  \n  version: \"&gt;=4.0.0,&lt;5.0.0\" # Versioonivahemik\n</code></pre>"},{"location":"ansible_roles/lecture/#roleide-uuendamine","title":"Role'ide uuendamine","text":"Bash<pre><code># Kontrollige, mis on installitud\nansible-galaxy list\n\n# Uuendage k\u00f5iki\nansible-galaxy install -r requirements.yml --force\n\n# Uuendage ainult \u00fchte\nansible-galaxy install geerlingguy.nginx --force\n</code></pre>"},{"location":"ansible_roles/lecture/#roleide-kasutamine-koos","title":"Role'ide kasutamine koos","text":"YAML<pre><code># Kombineerige Galaxy ja oma role'e\n- name: \"Hybrid deployment\"\n  hosts: webservers\n  roles:\n    - geerlingguy.nginx      # Galaxy'st\n    - geerlingguy.certbot    # Galaxy'st  \n    - my-custom-app          # Oma role\n    - company.monitoring     # Firma role\n</code></pre>"},{"location":"ansible_roles/lecture/#oma-roleide-publitseerimine","title":"Oma role'ide publitseerimine","text":"<p>Kui teie role on valmis, saate selle Galaxy'sse panna:</p> <ol> <li>GitHub'i repo loomine</li> <li>Galaxy metadata lisamine (<code>meta/main.yml</code>)</li> <li>Role'i importimine Galaxy'sse</li> <li>Automaatne s\u00fcnkroniseerimine seadistamine</li> </ol>"},{"location":"ansible_roles/lecture/#puppet-vs-ansible","title":"Puppet vs Ansible","text":""},{"location":"ansible_roles/lecture/#loeng-5-configuration-management-vordlus","title":"Loeng 5: Configuration Management v\u00f5rdlus","text":"<p>Configuration Management t\u00f6\u00f6riistade maailmas on kaks suurt m\u00e4ngijat. Peate teadma m\u00f5lemat, et osata valida \u00f5iget t\u00f6\u00f6riista \u00f5igeks t\u00f6\u00f6ks.</p>"},{"location":"ansible_roles/lecture/#miks-vorrelda-puppetiga","title":"Miks v\u00f5rrelda Puppet'iga?","text":"<p>Ansible - mida me \u00f5pime, populaarne DevOps meeskondades Puppet - enterprise'i standard, suur ettev\u00f5tetes</p> <p>Analoogia: Ansible on nagu Tesla (uus, innovaatiline), Puppet on nagu Mercedes (traditsiooniliselt usaldusv\u00e4\u00e4re, enterprise fookus).</p>"},{"location":"ansible_roles/lecture/#fundamentaalsed-erinevused","title":"Fundamentaalsed erinevused","text":""},{"location":"ansible_roles/lecture/#arhitektuur","title":"Arhitektuur","text":"<p>Ansible (Agentless - SSH p\u00f5hine): Text Only<pre><code>Teie arvuti \u2192 SSH \u2192 Serverid\n     \u2193\n   Te kontrollite\n   Push mudel\n</code></pre></p> <p>Puppet (Agent-based - Pull mudel): Text Only<pre><code>Puppet Master \u2190 Agents k\u00fcsivad ise (iga 30 min)\n     \u2193              \u2193\n  Manifest'id    Puppet Agent'id\n</code></pre></p> <p>Praktiline erinevus: - Ansible: Te k\u00e4ivitate k\u00e4su \u2192 asjad juhtuvad kohe - Puppet: Te muudate konfiguratsiooni \u2192 serverid k\u00fcsivad hiljem muudatusi</p>"},{"location":"ansible_roles/lecture/#keele-erinevus","title":"Keele erinevus","text":"<p>Ansible - YAML (tutav): YAML<pre><code>- name: \"Install and start Apache\"\n  package:\n    name: apache2\n    state: present\n\n- name: \"Start Apache service\"\n  service:\n    name: apache2\n    state: started\n    enabled: yes\n</code></pre></p> <p>Puppet - DSL (uus keel): Puppet<pre><code>package { 'apache2':\n  ensure =&gt; installed,\n}\n\nservice { 'apache2':\n  ensure  =&gt; running,\n  enable  =&gt; true,\n  require =&gt; Package['apache2'],\n}\n</code></pre></p> <p>\u00d5ppimisk\u00f5ver: - Ansible: Kui oskate YAML'i, oskate Ansible'i (1-2 n\u00e4dalat) - Puppet: Peate \u00f5ppima uut keelt (1-2 kuud)</p>"},{"location":"ansible_roles/lecture/#praktiline-vordlus-sama-ulesanne-molemas","title":"Praktiline v\u00f5rdlus: Sama \u00fclesanne m\u00f5lemas","text":"<p>\u00dclesanne: Nginx + SSL + automaatne k\u00e4ivitamine</p>"},{"location":"ansible_roles/lecture/#ansible-lahendus","title":"Ansible lahendus:","text":"YAML<pre><code>- name: \"Nginx with SSL setup\"\n  hosts: webservers\n  become: yes\n  tasks:\n    - name: \"Install packages\"\n      package:\n        name: ['nginx', 'ssl-cert']\n        state: present\n\n    - name: \"Generate SSL certificate\"\n      command: &gt;\n        openssl req -new -x509 -days 365 -nodes\n        -out /etc/ssl/certs/server.crt\n        -keyout /etc/ssl/private/server.key\n        -subj \"/C=EE/ST=Harju/L=Tallinn/O=Company/CN={{ ansible_fqdn }}\"\n      args:\n        creates: /etc/ssl/certs/server.crt\n\n    - name: \"Configure Nginx\"\n      template:\n        src: nginx.conf.j2\n        dest: /etc/nginx/nginx.conf\n      notify: reload nginx\n\n    - name: \"Start Nginx\"\n      service:\n        name: nginx\n        state: started\n        enabled: yes\n</code></pre>"},{"location":"ansible_roles/lecture/#puppet-lahendus","title":"Puppet lahendus:","text":"Puppet<pre><code>class webserver (\n  String $ssl_cert_path = '/etc/ssl/certs/server.crt',\n  String $ssl_key_path = '/etc/ssl/private/server.key',\n) {\n\n  package { ['nginx', 'ssl-cert']:\n    ensure =&gt; installed,\n  }\n\n  exec { 'generate-ssl-cert':\n    command =&gt; \"openssl req -new -x509 -days 365 -nodes \\\n                -out ${ssl_cert_path} \\\n                -keyout ${ssl_key_path} \\\n                -subj '/C=EE/ST=Harju/L=Tallinn/O=Company/CN=${facts['fqdn']}'\",\n    creates =&gt; $ssl_cert_path,\n    path    =&gt; ['/usr/bin', '/bin'],\n    require =&gt; Package['nginx'],\n  }\n\n  file { '/etc/nginx/nginx.conf':\n    ensure  =&gt; present,\n    content =&gt; template('webserver/nginx.conf.erb'),\n    require =&gt; Package['nginx'],\n    notify  =&gt; Service['nginx'],\n  }\n\n  service { 'nginx':\n    ensure  =&gt; running,\n    enable  =&gt; true,\n    require =&gt; File['/etc/nginx/nginx.conf'],\n  }\n}\n</code></pre> <p>Puppet templates (ERB): ERB<pre><code># nginx.conf.erb\nserver {\n    listen 443 ssl;\n    server_name &lt;%= @fqdn %&gt;;\n\n    ssl_certificate &lt;%= @ssl_cert_path %&gt;;\n    ssl_certificate_key &lt;%= @ssl_key_path %&gt;;\n\n    &lt;% if @enable_gzip -%&gt;\n    gzip on;\n    gzip_types text/plain application/json;\n    &lt;% end -%&gt;\n}\n</code></pre></p> <p>Mis erinevust m\u00e4rkate? - Ansible: k\u00e4sk-k\u00e4sult, loogiline j\u00e4rjekord - Puppet: declarative, Puppet otsustab j\u00e4rjekorra</p>"},{"location":"ansible_roles/lecture/#millal-kasutada-mida","title":"Millal kasutada mida?","text":""},{"location":"ansible_roles/lecture/#ansible-on-parem-kui","title":"Ansible on parem kui:","text":"<p>\u2705 V\u00e4iksemad keskkonnad (&lt; 500 serverit)</p> <p>SSH connection'id ei skaleeeru h\u00e4sti suurte arvudega</p> <p>\u2705 DevOps meeskonnad </p> <p>YAML on tuttav, hea CI/CD integratsioon</p> <p>\u2705 Kiire arendus ja deployment</p> <p>Ei vaja agent'ide seadistamist, kohe valmis</p> <p>\u2705 Multi-cloud keskkonnad</p> <p>SSH t\u00f6\u00f6tab k\u00f5ikjal, erinevates keskkondades</p> <p>\u2705 Container orchestration</p> <p>Hea integratsioon Docker/Kubernetes'iga</p> <p>N\u00e4ited: - Startup'i web application deployment - Development environmentide seadistamine - CI/CD pipeline automation - Cloud infrastructure provisioning</p>"},{"location":"ansible_roles/lecture/#puppet-on-parem-kui","title":"Puppet on parem kui:","text":"<p>\u2705 Suuremad keskkonnad (1000+ serverit)</p> <p>Agent'id t\u00f6\u00f6tavad paralleelselt, Master koordineerib</p> <p>\u2705 Enterprise compliance n\u00f5uded</p> <p>24/7 monitoring, automatic configuration drift detection</p> <p>\u2705 Traditional IT meeskonnad</p> <p>Rohkem infrastructure-focused, v\u00e4hem development</p> <p>\u2705 Long-term infrastructure management</p> <p>Agent'id j\u00e4lgivad ja parandavad konfiguratsiooni pidevalt</p> <p>\u2705 Regulatory compliance</p> <p>SOX, HIPAA, PCI DSS - built-in auditing ja reporting</p> <p>N\u00e4ited: - Enterprise data center management - Financial services (banking, insurance) - Healthcare systems (HIPAA compliance) - Government agencies - Large corporate Windows AD environments</p>"},{"location":"ansible_roles/lecture/#skaleeritavuse-vordlus","title":"Skaleeritavuse v\u00f5rdlus","text":""},{"location":"ansible_roles/lecture/#ansible-limitatsioonid","title":"Ansible limitatsioonid:","text":"Bash<pre><code># 1000 serveriga SSH v\u00f5ib olla aeglane\nansible-playbook -f 50 playbook.yml  # Max 50 paralleelset\n</code></pre> <p>Probleemid suurtes keskkondades: - SSH connection pool t\u00e4is - V\u00f5rgu ribalaius - Control machine'i CPU/memory</p>"},{"location":"ansible_roles/lecture/#puppet-eelised-suurtes-keskkondades","title":"Puppet eelised suurtes keskkondades:","text":"Bash<pre><code># 10,000+ serverit ei ole probleem\n# Iga agent pull'ib iseseisvalt\n# Master delegeerib t\u00f6\u00f6d\n</code></pre> <p>Miks see t\u00f6\u00f6tab paremini: - Hajutatud arhitektuur - Agents t\u00f6\u00f6tavad paralleelselt - Master optimeerib ressursse</p>"},{"location":"ansible_roles/lecture/#infrastructure-drift-ja-compliance","title":"Infrastructure Drift ja Compliance","text":""},{"location":"ansible_roles/lecture/#ansible-fire-and-forget","title":"Ansible - \"Fire and forget\":","text":"Text Only<pre><code>1. K\u00e4ivitate playbook'i \u2192 serverid on \u00f5iges olekus\n2. 2 n\u00e4dalat hiljem \u2192 keegi muudab midagi k\u00e4sitsi  \n3. Ansible ei tea sellest midagi\n4. J\u00e4rgmine deployment \u2192 parandab tagasi\n</code></pre> <p>Plussid: Lihtne, ei vaja agente Miinused: Ei j\u00e4lgi drift'i, v\u00f5imalikud security augud</p>"},{"location":"ansible_roles/lecture/#puppet-pidev-jalgimine","title":"Puppet - Pidev j\u00e4lgimine:","text":"Text Only<pre><code>1. Agent k\u00e4ib iga 30 minuti tagant\n2. Kontrollib konfiguratsiooni\n3. Parandab automaatselt drift'i\n4. Reporteerib k\u00f5ik muudatused PuppetDB'sse\n5. Saate alert'e kui keegi konfiguratsiooni muudab\n</code></pre> <p>Plussid: Pidev compliance, drift detection Miinused: Keerulisem setup, vajab agente</p>"},{"location":"ansible_roles/lecture/#decision-matrix","title":"Decision Matrix","text":"Kriteerium V\u00e4ike env Suur env Dev team Ops team Startup Enterprise Learning curve Ansible \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 Puppet \u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50"},{"location":"ansible_roles/lecture/#enterprise-features-vordlus","title":"Enterprise features v\u00f5rdlus","text":"Feature Ansible Puppet Web UI AWX/Tower (complex setup) Built-in Puppet Console Reporting Limited, manual Comprehensive PuppetDB Role-based access Tower/AWX only Built-in RBAC Compliance auditing Manual scripts Automatic reporting Change tracking Git history Built-in change tracking Node classification Inventory groups External Node Classifier"},{"location":"ansible_roles/lecture/#hybrid-lahenemine","title":"Hybrid l\u00e4henemine","text":"<p>Paljud organisatsioonid kasutavad m\u00f5lemat:</p> YAML<pre><code># Ansible infrastructure provisioning ja deployment\n- name: \"Initial server setup\"\n  hosts: new_servers\n  tasks:\n    - name: \"Create cloud environment\"\n      local_action: ...\n\n    - name: \"Install Puppet agent\"\n      package: \n        name: puppet-agent \n        state: present\n\n# Puppet ongoing configuration management\n# Agents pull konfiguratsiooni iga 30 minuti tagant\n# Hoiab compliance ja drift prevention\n</code></pre> <p>Reaalne n\u00e4ide: Netflix - Ansible: Initial server provisioning, application deployment - Puppet: Ongoing configuration management, compliance - Result: Best of both worlds!</p>"},{"location":"ansible_roles/lecture/#minu-soovitus","title":"Minu soovitus","text":"<p>Algajatele ja v\u00e4iksematele projektidele: Alustage Ansible'iga! - Lihtsam \u00f5ppida - Kiirem alustada - Hea CI/CD integratsioon</p> <p>Kui vajadused kasvavad: - 1000+ serverit - Strict compliance n\u00f5uded - 24/7 monitoring vajadus - Enterprise audit requirements</p> <p>Siis kaaluge Puppet'i v\u00f5i hybrid l\u00e4henemist!</p>"},{"location":"ansible_roles/lecture/#kokkuvote","title":"Kokkuv\u00f5te","text":"<p>Role'id lahendavad suured probleemid:</p> <p>\u2705 Korduvkasutatavus - sama role mitmes projektis \u2705 Testitavus - iga role eraldi testida \u2705 Loetavus - selge struktuur \u2705 Meeskonnat\u00f6\u00f6 - lihtne jagada \u2705 Hooldatavus - muudatused isoleeritud  </p> <p>M\u00f5lemad t\u00f6\u00f6riistad on head, aga erinevatel juhtudel:</p> <p>Ansible = Tesla - innovaatiline, kiire, sobib modernsele DevOps'ile Puppet = Mercedes - traditsiooniliselt usaldusv\u00e4\u00e4re, enterprise-ready</p>"},{"location":"ci_cd_advanced/homework/","title":"Kodut\u00f6\u00f6 - Projekti L\u00f5petamine","text":""},{"location":"ci_cd_advanced/homework/#ulesanne-1-kodutoo-eesmark","title":"\u00dclesanne 1: Kodut\u00f6\u00f6 Eesm\u00e4rk","text":"<p>L\u00f5peta oma automatiseerimise projekt ja dokumenteeri see professionaalselt. See on sinu v\u00f5imalus n\u00e4idata k\u00f5iki oskusi, mida oled kursuse jooksul \u00f5ppinud.</p>"},{"location":"ci_cd_advanced/homework/#ulesanne-2-projekti-dokumenteerimine","title":"\u00dclesanne 2: Projekti Dokumenteerimine","text":""},{"location":"ci_cd_advanced/homework/#readmemd-loomine","title":"README.md Loomine","text":"<p>Loo p\u00f5hjalik README.md fail oma projekti jaoks:</p> <p>Markdown<pre><code># Minu Automatiseerimise Projekt\n\n## Projekti Kirjeldus\n[Kirjelda oma projekti \u00fcksikasjalikult:\n- Millist probleemi see lahendab?\n- Miks see on oluline?\n- Mis oli su eesm\u00e4rk?]\n\n## Kasutatud Tehnoloogiad\n\nM\u00e4rgi \u00e4ra k\u00f5ik tehnoloogiad, mida kasutasid:\n\n- [ ] **Git** - Versioonihaldus ja koost\u00f6\u00f6\n- [ ] **Docker** - Konteinerimine ja pakendamine\n- [ ] **Ansible** - Konfiguratsioonihaldus\n- [ ] **Terraform** - Infrastruktuur kui kood\n- [ ] **CI/CD** - Pidev integratsioon ja tarneahel\n- [ ] **Muud:** [Nimeta t\u00e4iendavad t\u00f6\u00f6riistad]\n\n## Projekti Struktuur\n</code></pre> projekt/ \u251c\u2500\u2500 README.md \u251c\u2500\u2500 docker/ \u2502   \u251c\u2500\u2500 Dockerfile \u2502   \u2514\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 ansible/ \u2502   \u251c\u2500\u2500 playbook.yml \u2502   \u2514\u2500\u2500 inventory/ \u251c\u2500\u2500 terraform/ \u2502   \u251c\u2500\u2500 main.tf \u2502   \u2514\u2500\u2500 variables.tf \u251c\u2500\u2500 .github/ \u2502   \u2514\u2500\u2500 workflows/ \u2514\u2500\u2500 docs/ Text Only<pre><code>## Kuidas Kasutada\n\n### Eeltingimused\n- Docker ja Docker Compose\n- [Muud vajalikud t\u00f6\u00f6riistad]\n\n### Samm-sammulised Juhised\n1. **Klooni repository:**\n   ```bash\n   git clone https://github.com/sinu-kasutajanimi/projekti-nimi.git\n   cd projekti-nimi\n   ```\n\n2. **K\u00e4ivita projekt:**\n   ```bash\n   # Lisa konkreetsed k\u00e4sud\n   ```\n\n3. **Kontrolli tulemust:**\n   ```bash\n   # Kuidas kontrollida, et k\u00f5ik t\u00f6\u00f6tab\n   ```\n\n## Projekti Tulemused\n\n### Mida \u00d5ppisin\n- [Konkreetsed oskused, mida omandatud]\n- [V\u00e4ljakutsed, millega silmitsi seisid]\n- [Kuidas probleeme lahendasid]\n\n### J\u00e4rgmised Sammud\n- [Kuidas saaks projekti edasi arendada]\n- [Millised uued tehnoloogiad huvitavad]\n\n## Autorid\n- **Nimi:** [Sinu nimi]\n- **Kursus:** Automatiseerimine\n- **Aasta:** 2025\n</code></pre></p>"},{"location":"ci_cd_advanced/homework/#ulesanne-3-github-repository-seadistamine","title":"\u00dclesanne 3: GitHub Repository Seadistamine","text":""},{"location":"ci_cd_advanced/homework/#repository-loomine","title":"Repository Loomine","text":"<p>Loo GitHub repository ja seadista see \u00f5igesti:</p> Bash<pre><code># 1. Loo uus repository GitHubis (l\u00e4bi veebiliidese)\n# 2. Klooni see kohalikku arvutisse\ngit clone https://github.com/sinu-kasutajanimi/projekti-nimi.git\ncd projekti-nimi\n\n# 3. Kopeeri oma projektifailid kausta\n# 4. Lisa failid Git'i\ngit add .\ngit commit -m \"Algne projekti import\"\n\n# 5. Push'i GitHubi\ngit push origin main\n</code></pre>"},{"location":"ci_cd_advanced/homework/#vajalikud-failid","title":"Vajalikud Failid","text":"<p>Veendu, et sul on j\u00e4rgmised failid:</p> <ol> <li>README.md - Projekti dokumentatsioon</li> <li>.gitignore - Eiratavad failid</li> <li>LICENSE - Litsentsi info (valikuline)</li> </ol> <p>.gitignore n\u00e4ide: Text Only<pre><code># Docker\n*.log\n.env\n\n# Terraform\n*.tfstate\n*.tfstate.backup\n.terraform/\n\n# Ansible\n*.retry\n\n# IDE\n.vscode/\n.idea/\n\n# OS\n.DS_Store\nThumbs.db\n</code></pre></p>"},{"location":"ci_cd_advanced/homework/#ulesanne-4-projekti-esitlus","title":"\u00dclesanne 4: Projekti Esitlus","text":""},{"location":"ci_cd_advanced/homework/#esitluse-ettevalmistus","title":"Esitluse Ettevalmistus","text":"<p>Valmista ette 3-5 minutiline esitlus, mis sisaldab:</p>"},{"location":"ci_cd_advanced/homework/#slaid-1-projekti-tutvustus","title":"Slaid 1: Projekti Tutvustus","text":"<ul> <li>Projekti nimi ja eesm\u00e4rk</li> <li>P\u00f5hiline funktsioon</li> </ul>"},{"location":"ci_cd_advanced/homework/#slaid-2-tehnilised-lahendused","title":"Slaid 2: Tehnilised Lahendused","text":"<ul> <li>Kasutatud tehnoloogiad</li> <li>Arhitektuuri \u00fclevaade</li> <li>Huvitavamad lahendused</li> </ul>"},{"location":"ci_cd_advanced/homework/#slaid-3-valjakutsed-ja-oppimine","title":"Slaid 3: V\u00e4ljakutsed ja \u00d5ppimine","text":"<ul> <li>Suurimad raskused</li> <li>Kuidas neid lahendasid</li> <li>Peamised \u00f5ppetunnid</li> </ul>"},{"location":"ci_cd_advanced/homework/#slaid-4-demo","title":"Slaid 4: Demo","text":"<ul> <li>L\u00fchike n\u00e4idis projekti t\u00f6\u00f6st</li> <li>Ekraanipildid v\u00f5i reaalajas demo</li> </ul>"},{"location":"ci_cd_advanced/homework/#slaid-5-jargmised-sammud","title":"Slaid 5: J\u00e4rgmised Sammud","text":"<ul> <li>Kuidas projekti edasi arendada</li> <li>Uued tehnoloogiad, mida tahaksid \u00f5ppida</li> </ul>"},{"location":"ci_cd_advanced/homework/#esitluse-nouanded","title":"Esitluse N\u00f5uanded","text":"<ul> <li>N\u00e4ita koodi - \u00e4ra ainult r\u00e4\u00e4gi sellest</li> <li>Valmista demo ette - testi enne esitlust</li> <li>Ole uhke - sa oled palju \u00f5ppinud!</li> <li>Jaga kogemusi - mis oli raske, mis lihtne?</li> </ul>"},{"location":"ci_cd_advanced/homework/#ulesanne-5-projekti-hindamine","title":"\u00dclesanne 5: Projekti Hindamine","text":""},{"location":"ci_cd_advanced/homework/#kontroll-loend","title":"Kontroll-loend","text":"<p>Kontrolli enne esitamist:</p>"},{"location":"ci_cd_advanced/homework/#tehniline-pool","title":"Tehniline Pool","text":"<ul> <li> K\u00f5ik kood on GitHubis</li> <li> README.md on t\u00e4ielik ja selge</li> <li> Projekt k\u00e4ivitub juhiste j\u00e4rgi</li> <li> K\u00f5ik kasutatud tehnoloogiad on dokumenteeritud</li> </ul>"},{"location":"ci_cd_advanced/homework/#dokumentatsioon","title":"Dokumentatsioon","text":"<ul> <li> Projekti eesm\u00e4rk on selgelt kirjeldatud</li> <li> Paigaldamise juhised on olemas</li> <li> Kasutamise n\u00e4ited on lisatud</li> <li> \u00d5ppetunnid on dokumenteeritud</li> </ul>"},{"location":"ci_cd_advanced/homework/#esitlus","title":"Esitlus","text":"<ul> <li> Slaidid on valmis</li> <li> Demo on testitud</li> <li> Aeg on planeeritud (3-5 minutit)</li> </ul>"},{"location":"ci_cd_advanced/homework/#hinne-kujuneb","title":"Hinne Kujuneb","text":"<ul> <li>60% - Projekti funktsioon ja tehniline kvaliteet</li> <li>25% - Dokumentatsiooni kvaliteet</li> <li>15% - Esitluse selgus ja ettevalmistus</li> </ul>"},{"location":"ci_cd_advanced/homework/#ulesanne-6-jargmised-sammud","title":"\u00dclesanne 6: J\u00e4rgmised Sammud","text":""},{"location":"ci_cd_advanced/homework/#oppimise-jatkamine","title":"\u00d5ppimise J\u00e4tkamine","text":"<p>Soovitatavad j\u00e4rgmised sammud:</p>"},{"location":"ci_cd_advanced/homework/#tehnoloogiate-suvendamine","title":"Tehnoloogiate S\u00fcvendamine","text":"<ol> <li>Kubernetes - konteinerite orkestratsioon</li> <li>Monitoring - Prometheus, Grafana</li> <li>Security - turvaliste praktikate \u00f5ppimine</li> <li>Cloud Platforms - AWS, Azure, GCP</li> </ol>"},{"location":"ci_cd_advanced/homework/#praktilised-projektid","title":"Praktilised Projektid","text":"<ol> <li>Microservices arhitektuur - mitme teenuse haldamine</li> <li>Infrastructure as Code - t\u00e4ielik automatiseerimine</li> <li>GitOps - Git-p\u00f5hine t\u00f6\u00f6voog</li> <li>Chaos Engineering - s\u00fcsteemi vastupidavuse testimine</li> </ol>"},{"location":"ci_cd_advanced/homework/#kogukond-ja-vorgustik","title":"Kogukond ja V\u00f5rgustik","text":"<ol> <li>GitHub - panusta avatud l\u00e4htekoodiga projektidesse</li> <li>DevOps Estonia - kohalik kogukond</li> <li>Konverentsid - DevOpsDays, KubeCon</li> <li>Sertifikaadid - AWS, Azure, Kubernetes</li> </ol>"},{"location":"ci_cd_advanced/homework/#karjaari-areng","title":"Karj\u00e4\u00e4ri Areng","text":"<p>DevOps rollidega tutvumine: - DevOps Engineer - automatiseerimine ja infrastruktuur - Site Reliability Engineer - s\u00fcsteemi usaldusv\u00e4\u00e4rsus - Platform Engineer - arendajate platformide loomine - Cloud Architect - pilvelahenduste disain</p>"},{"location":"ci_cd_advanced/homework/#kokkuvote","title":"Kokkuv\u00f5te","text":"<p>Palju \u00f5nne! Oled edukalt l\u00f5petanud automatiseerimise kursuse!</p>"},{"location":"ci_cd_advanced/homework/#mida-sa-nuud-oskad","title":"Mida Sa N\u00fc\u00fcd Oskad","text":"<ul> <li>Git - versioonihaldus ja koost\u00f6\u00f6</li> <li>Docker - rakenduste pakendamine</li> <li>Ansible - serverite konfigureerimine  </li> <li>Terraform - infrastruktuuri kood</li> <li>\u2705 CI/CD - automaatne testimine ja rakendamine</li> </ul>"},{"location":"ci_cd_advanced/homework/#su-jargmised-voimalused","title":"Su J\u00e4rgmised V\u00f5imalused","text":"<ul> <li>J\u00e4tka \u00f5ppimist - tehnoloogiad arenevad kiiresti</li> <li>Ehita projekte - praktika on parim \u00f5petaja</li> <li>V\u00f5ta osa kogukonnast - jaga kogemusi ja \u00f5pi teistelt</li> <li>Otsi praktikat - rakenda oskusi p\u00e4riselu projektides</li> </ul> <p>Edu edasistel DevOps teekondadel! \ud83d\ude80</p>"},{"location":"ci_cd_advanced/homework/#lisaressursid","title":"Lisaressursid","text":""},{"location":"ci_cd_advanced/homework/#dokumentatsioon_1","title":"Dokumentatsioon","text":"<ul> <li>Git dokumentatsioon</li> <li>Docker dokumentatsioon</li> <li>Ansible dokumentatsioon</li> <li>Terraform dokumentatsioon</li> </ul>"},{"location":"ci_cd_advanced/homework/#kogukond","title":"Kogukond","text":"<ul> <li>DevOps Estonia</li> <li>GitHub Estonia</li> <li>Slack kogukond</li> </ul>"},{"location":"ci_cd_advanced/homework/#kursuse-materjalid","title":"Kursuse Materjalid","text":"<ul> <li>Kursuse veebileht</li> <li>GitHub repository</li> </ul>"},{"location":"ci_cd_advanced/lab/","title":"CI/CD Advanced Lab: T\u00e4ielik Automatiseerimine","text":""},{"location":"ci_cd_advanced/lab/#labi-eesmark","title":"Lab'i eesm\u00e4rk","text":"<p>T\u00e4na teeme L\u00d5PPPROJEKTI! Kasutame K\u00d5IKI oskusi, mida \u00f5ppisime:</p> <ul> <li>Git (N\u00e4dal 9) \u2192 Version control ja collaboration</li> <li>Ansible (N\u00e4dal 11-15) \u2192 Server configuration</li> <li>Docker (N\u00e4dal 19-21) \u2192 Containerization</li> <li>Terraform (N\u00e4dal 23) \u2192 Infrastructure as Code</li> <li>CI/CD (N\u00e4dal 25) \u2192 Automated deployment</li> <li>Monitoring \u2192 Production visibility</li> </ul>"},{"location":"ci_cd_advanced/lab/#projekt-techshop-e-commerce-automatiseerimine","title":"\ud83c\udfe2 Projekt: \"TechShop\" E-commerce Automatiseerimine","text":"<p>Klient: V\u00e4ike e-commerce startup \"TechShop\"</p> <p>Probleem:  - K\u00e4sitsi deployment v\u00f5tab 2 tundi - Tihti vigu (30% failure rate) - Aeglane rollback (1+ tund) - Arendajad stressis</p> <p>Lahendus: T\u00e4ielik automatiseerimine k\u00f5igi \u00f5pitud oskustega!</p>"},{"location":"ci_cd_advanced/lab/#ettevalmistus","title":"\ud83d\udee0 Ettevalmistus","text":""},{"location":"ci_cd_advanced/lab/#vajalikud-tooriistad","title":"Vajalikud t\u00f6\u00f6riistad","text":"<p>Kontrollige, et teil on: Bash<pre><code># Versioonide kontroll\ngit --version           # 2.30+\ndocker --version        # 20.10+\npython3 --version       # 3.9+\nansible --version       # 2.10+\nterraform --version     # 1.0+\n</code></pre></p> <p>Vajalikud kontod: - GitLab konto (tasuta) - Docker Hub konto (valikuline)</p>"},{"location":"ci_cd_advanced/lab/#osa-1-infrastructure-as-code-terraform","title":"Osa 1: Infrastructure as Code (Terraform)","text":""},{"location":"ci_cd_advanced/lab/#11-projekti-struktuur","title":"1.1 Projekti struktuur","text":"Bash<pre><code># Loo projekt\nmkdir techshop-automation\ncd techshop-automation\n\n# Loo Terraform kaust\nmkdir -p terraform/templates\ncd terraform\n</code></pre>"},{"location":"ci_cd_advanced/lab/#12-terraform-konfiguratsioon","title":"1.2 Terraform konfiguratsioon","text":"<p><code>variables.tf</code>: Terraform<pre><code>variable \"project_name\" {\n  description = \"Project name\"\n  type        = string\n  default     = \"techshop\"\n}\n\nvariable \"environment\" {\n  description = \"Environment name\"\n  type        = string\n  default     = \"development\"\n}\n\nvariable \"app_port\" {\n  description = \"Application port\"\n  type        = number\n  default     = 5000\n}\n\nvariable \"region\" {\n  description = \"Deploy region\"\n  type        = string\n  default     = \"local\"\n}\n</code></pre></p> <p><code>main.tf</code>: Terraform<pre><code>terraform {\n  required_version = \"&gt;= 1.0\"\n\n  required_providers {\n    local = {\n      source  = \"hashicorp/local\"\n      version = \"~&gt; 2.4\"\n    }\n    null = {\n      source  = \"hashicorp/null\"\n      version = \"~&gt; 3.2\"\n    }\n  }\n}\n\n# Create project structure\nresource \"local_file\" \"project_config\" {\n  content = jsonencode({\n    project     = var.project_name\n    environment = var.environment\n    port        = var.app_port\n    created_at  = timestamp()\n  })\n  filename = \"${path.module}/config.json\"\n}\n\n# Create docker-compose from template\nresource \"local_file\" \"docker_compose\" {\n  content = templatefile(\"${path.module}/templates/docker-compose.yml.tpl\", {\n    project_name = var.project_name\n    environment  = var.environment\n    app_port     = var.app_port\n  })\n  filename = \"${path.module}/../docker-compose.yml\"\n}\n\n# Create nginx config from template\nresource \"local_file\" \"nginx_config\" {\n  content = templatefile(\"${path.module}/templates/nginx.conf.tpl\", {\n    project_name = var.project_name\n    app_port     = var.app_port\n    server_name  = \"localhost\"\n  })\n  filename = \"${path.module}/../nginx/nginx.conf\"\n}\n\n# Null resource for local setup\nresource \"null_resource\" \"local_setup\" {\n  triggers = {\n    always_run = timestamp()\n  }\n\n  provisioner \"local-exec\" {\n    command = \"echo 'Infrastructure ready for ${var.project_name}'\"\n  }\n}\n</code></pre></p> <p><code>templates/docker-compose.yml.tpl</code>: YAML<pre><code>version: '3.8'\n\nservices:\n  app:\n    image: ${project_name}:latest\n    container_name: ${project_name}-app\n    ports:\n      - \"${app_port}:${app_port}\"\n    environment:\n      - ENVIRONMENT=${environment}\n      - PORT=${app_port}\n    restart: unless-stopped\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:${app_port}/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n    networks:\n      - ${project_name}-network\n\n  nginx:\n    image: nginx:alpine\n    container_name: ${project_name}-nginx\n    ports:\n      - \"80:80\"\n    volumes:\n      - ../nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro\n    depends_on:\n      - app\n    networks:\n      - ${project_name}-network\n\nnetworks:\n  ${project_name}-network:\n    driver: bridge\n</code></pre></p> <p><code>templates/nginx.conf.tpl</code>: Nginx Configuration File<pre><code>upstream ${project_name}_backend {\n    server app:${app_port};\n}\n\nserver {\n    listen 80;\n    server_name ${server_name};\n\n    location / {\n        proxy_pass http://${project_name}_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n\n    location /health {\n        proxy_pass http://${project_name}_backend/health;\n        access_log off;\n    }\n}\n</code></pre></p> <p><code>outputs.tf</code>: Terraform<pre><code>output \"project_name\" {\n  description = \"Project name\"\n  value       = var.project_name\n}\n\noutput \"environment\" {\n  description = \"Environment\"\n  value       = var.environment\n}\n\noutput \"app_url\" {\n  description = \"Application URL\"\n  value       = \"http://localhost:${var.app_port}\"\n}\n\noutput \"config_file\" {\n  description = \"Configuration file path\"\n  value       = local_file.project_config.filename\n}\n</code></pre></p>"},{"location":"ci_cd_advanced/lab/#13-deploy-infrastruktuur","title":"1.3 Deploy infrastruktuur","text":"Bash<pre><code># Initsialiseeri Terraform\nterraform init\n\n# Vaata muudatusi\nterraform plan\n\n# Deploy\nterraform apply -auto-approve\n\n# Salvesta v\u00e4ljundid\nterraform output -json &gt; outputs.json\n</code></pre>"},{"location":"ci_cd_advanced/lab/#osa-2-server-configuration-ansible","title":"Osa 2: Server Configuration (Ansible)","text":""},{"location":"ci_cd_advanced/lab/#21-ansible-struktuur","title":"2.1 Ansible struktuur","text":"Bash<pre><code># Mine projekti juurkausta\ncd ..\n\n# Loo Ansible struktuur\nmkdir -p ansible/roles/webserver/{tasks,handlers,templates,defaults}\ncd ansible\n</code></pre>"},{"location":"ci_cd_advanced/lab/#22-inventory-konfiguratsioon","title":"2.2 Inventory konfiguratsioon","text":"<p><code>inventory.yml</code>: YAML<pre><code>all:\n  children:\n    local:\n      hosts:\n        localhost:\n          ansible_connection: local\n          ansible_python_interpreter: /usr/bin/python3\n    webservers:\n      hosts:\n        localhost:\n          ansible_connection: local\n      vars:\n        app_name: techshop\n        app_port: 5000\n        docker_network: techshop-network\n</code></pre></p>"},{"location":"ci_cd_advanced/lab/#23-webserver-role","title":"2.3 Webserver role","text":"<p><code>roles/webserver/defaults/main.yml</code>: YAML<pre><code>---\napp_name: techshop\napp_port: 5000\napp_user: appuser\napp_dir: /opt/{{ app_name }}\ndocker_compose_version: \"2.21.0\"\n</code></pre></p> <p><code>roles/webserver/tasks/main.yml</code>: YAML<pre><code>---\n- name: Install system packages\n  become: yes\n  package:\n    name:\n      - python3\n      - python3-pip\n      - docker.io\n      - curl\n      - git\n    state: present\n    update_cache: yes\n\n- name: Install Docker Compose\n  become: yes\n  get_url:\n    url: \"https://github.com/docker/compose/releases/download/v{{ docker_compose_version }}/docker-compose-linux-x86_64\"\n    dest: /usr/local/bin/docker-compose\n    mode: '0755'\n\n- name: Ensure Docker service is running\n  become: yes\n  systemd:\n    name: docker\n    state: started\n    enabled: yes\n    daemon_reload: yes\n\n- name: Add current user to docker group\n  become: yes\n  user:\n    name: \"{{ ansible_user_id }}\"\n    groups: docker\n    append: yes\n\n- name: Create application directory\n  become: yes\n  file:\n    path: \"{{ app_dir }}\"\n    state: directory\n    owner: \"{{ ansible_user_id }}\"\n    group: \"{{ ansible_user_id }}\"\n    mode: '0755'\n\n- name: Copy docker-compose file\n  copy:\n    src: \"../docker-compose.yml\"\n    dest: \"{{ app_dir }}/docker-compose.yml\"\n    mode: '0644'\n\n- name: Create nginx config directory\n  file:\n    path: \"{{ app_dir }}/nginx\"\n    state: directory\n    mode: '0755'\n\n- name: Copy nginx configuration\n  copy:\n    src: \"../nginx/nginx.conf\"\n    dest: \"{{ app_dir }}/nginx/nginx.conf\"\n    mode: '0644'\n</code></pre></p> <p><code>roles/webserver/handlers/main.yml</code>: YAML<pre><code>---\n- name: restart docker\n  become: yes\n  systemd:\n    name: docker\n    state: restarted\n\n- name: reload nginx\n  docker_container:\n    name: techshop-nginx\n    restart: yes\n</code></pre></p>"},{"location":"ci_cd_advanced/lab/#24-main-playbook","title":"2.4 Main playbook","text":"<p><code>playbook.yml</code>: YAML<pre><code>---\n- name: Configure TechShop infrastructure\n  hosts: local\n  gather_facts: yes\n\n  pre_tasks:\n    - name: Display setup information\n      debug:\n        msg: \"Setting up {{ app_name }} on {{ ansible_hostname }}\"\n\n  roles:\n    - webserver\n\n  post_tasks:\n    - name: Verify Docker installation\n      command: docker --version\n      register: docker_version\n\n    - name: Display Docker version\n      debug:\n        msg: \"Docker version: {{ docker_version.stdout }}\"\n</code></pre></p>"},{"location":"ci_cd_advanced/lab/#25-kaivita-ansible","title":"2.5 K\u00e4ivita Ansible","text":"Bash<pre><code># Kontrolli s\u00fcntaksi\nansible-playbook --syntax-check playbook.yml\n\n# K\u00e4ivita playbook\nansible-playbook -i inventory.yml playbook.yml\n\n# Kontrolli tulemust\nansible all -i inventory.yml -m ping\n</code></pre>"},{"location":"ci_cd_advanced/lab/#osa-3-application-development-docker","title":"Osa 3: Application Development (Docker)","text":""},{"location":"ci_cd_advanced/lab/#31-rakenduse-struktuur","title":"3.1 Rakenduse struktuur","text":"Bash<pre><code># Mine projekti juurkausta\ncd ..\n\n# Loo rakenduse kaust\nmkdir -p app/tests\ncd app\n</code></pre>"},{"location":"ci_cd_advanced/lab/#32-flask-rakendus","title":"3.2 Flask rakendus","text":"<p><code>app.py</code>: Python<pre><code>#!/usr/bin/env python3\n\"\"\"TechShop E-commerce API\"\"\"\n\nfrom flask import Flask, jsonify, request\nimport os\nimport logging\nfrom datetime import datetime\nimport psutil\n\n# Setup logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n)\nlogger = logging.getLogger(__name__)\n\n# Create Flask app\napp = Flask(__name__)\napp.config['JSON_SORT_KEYS'] = False\n\n# In-memory database (for demo)\nPRODUCTS = [\n    {'id': 1, 'name': 'Laptop', 'price': 999.99, 'stock': 10},\n    {'id': 2, 'name': 'Phone', 'price': 599.99, 'stock': 25},\n    {'id': 3, 'name': 'Tablet', 'price': 399.99, 'stock': 15},\n    {'id': 4, 'name': 'Monitor', 'price': 299.99, 'stock': 20},\n    {'id': 5, 'name': 'Keyboard', 'price': 79.99, 'stock': 50}\n]\n\nORDERS = []\n\n@app.route('/')\ndef home():\n    \"\"\"Home endpoint\"\"\"\n    logger.info(\"Home endpoint accessed\")\n    return jsonify({\n        'service': 'TechShop E-commerce API',\n        'version': '1.0.0',\n        'status': 'running',\n        'timestamp': datetime.now().isoformat(),\n        'endpoints': {\n            'health': '/health',\n            'metrics': '/metrics',\n            'products': '/products',\n            'orders': '/orders'\n        }\n    })\n\n@app.route('/health')\ndef health():\n    \"\"\"Health check endpoint\"\"\"\n    return jsonify({\n        'status': 'healthy',\n        'service': 'techshop-api',\n        'timestamp': datetime.now().isoformat()\n    })\n\n@app.route('/metrics')\ndef metrics():\n    \"\"\"System metrics endpoint\"\"\"\n    cpu_percent = psutil.cpu_percent(interval=1)\n    memory = psutil.virtual_memory()\n    disk = psutil.disk_usage('/')\n\n    return jsonify({\n        'system': {\n            'cpu_percent': cpu_percent,\n            'memory_percent': memory.percent,\n            'memory_available_gb': round(memory.available / (1024**3), 2),\n            'disk_percent': disk.percent,\n            'disk_free_gb': round(disk.free / (1024**3), 2)\n        },\n        'application': {\n            'total_products': len(PRODUCTS),\n            'total_orders': len(ORDERS)\n        },\n        'timestamp': datetime.now().isoformat()\n    })\n\n@app.route('/products')\ndef get_products():\n    \"\"\"Get all products\"\"\"\n    logger.info(\"Products endpoint accessed\")\n    return jsonify({\n        'products': PRODUCTS,\n        'count': len(PRODUCTS),\n        'timestamp': datetime.now().isoformat()\n    })\n\n@app.route('/products/&lt;int:product_id&gt;')\ndef get_product(product_id):\n    \"\"\"Get single product\"\"\"\n    product = next((p for p in PRODUCTS if p['id'] == product_id), None)\n    if product:\n        return jsonify(product)\n    return jsonify({'error': 'Product not found'}), 404\n\n@app.route('/orders', methods=['GET', 'POST'])\ndef handle_orders():\n    \"\"\"Handle orders\"\"\"\n    if request.method == 'GET':\n        return jsonify({\n            'orders': ORDERS,\n            'count': len(ORDERS),\n            'timestamp': datetime.now().isoformat()\n        })\n\n    # POST - create new order\n    data = request.get_json()\n    if not data or 'product_id' not in data:\n        return jsonify({'error': 'Product ID required'}), 400\n\n    product = next((p for p in PRODUCTS if p['id'] == data['product_id']), None)\n    if not product:\n        return jsonify({'error': 'Product not found'}), 404\n\n    if product['stock'] &lt; data.get('quantity', 1):\n        return jsonify({'error': 'Insufficient stock'}), 400\n\n    # Create order\n    order = {\n        'id': len(ORDERS) + 1,\n        'product_id': product['id'],\n        'product_name': product['name'],\n        'quantity': data.get('quantity', 1),\n        'total': product['price'] * data.get('quantity', 1),\n        'created_at': datetime.now().isoformat()\n    }\n\n    # Update stock\n    product['stock'] -= order['quantity']\n    ORDERS.append(order)\n\n    logger.info(f\"Order created: {order['id']}\")\n    return jsonify(order), 201\n\n@app.errorhandler(404)\ndef not_found(error):\n    \"\"\"Handle 404 errors\"\"\"\n    return jsonify({'error': 'Endpoint not found'}), 404\n\n@app.errorhandler(500)\ndef internal_error(error):\n    \"\"\"Handle 500 errors\"\"\"\n    logger.error(f\"Internal error: {error}\")\n    return jsonify({'error': 'Internal server error'}), 500\n\nif __name__ == '__main__':\n    port = int(os.getenv('PORT', 5000))\n    app.run(host='0.0.0.0', port=port, debug=False)\n</code></pre></p> <p><code>requirements.txt</code>: Text Only<pre><code>Flask==2.3.3\ngunicorn==21.2.0\npsutil==5.9.5\nrequests==2.31.0\npytest==7.4.2\n</code></pre></p>"},{"location":"ci_cd_advanced/lab/#33-dockerfile","title":"3.3 Dockerfile","text":"<p><code>Dockerfile</code>: Docker<pre><code># Multi-stage build\nFROM python:3.9-slim as builder\n\nWORKDIR /build\nCOPY requirements.txt .\nRUN pip install --user --no-cache-dir -r requirements.txt\n\n# Production stage\nFROM python:3.9-slim\n\nWORKDIR /app\n\n# Create non-root user\nRUN useradd -m -u 1000 appuser &amp;&amp; \\\n    mkdir -p /app &amp;&amp; \\\n    chown -R appuser:appuser /app\n\n# Copy dependencies from builder\nCOPY --from=builder /root/.local /home/appuser/.local\n\n# Copy application\nCOPY --chown=appuser:appuser . .\n\n# Switch to non-root user\nUSER appuser\n\n# Add user's local bin to PATH\nENV PATH=/home/appuser/.local/bin:$PATH\n\n# Expose port\nEXPOSE 5000\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\\n  CMD python -c \"import requests; requests.get('http://localhost:5000/health')\"\n\n# Run application\nCMD [\"gunicorn\", \"--bind\", \"0.0.0.0:5000\", \"--workers\", \"2\", \"--timeout\", \"30\", \"app:app\"]\n</code></pre></p>"},{"location":"ci_cd_advanced/lab/#34-local-testing","title":"3.4 Local testing","text":"Bash<pre><code># Build image\ndocker build -t techshop:latest .\n\n# Run container\ndocker run -d --name techshop-test -p 5000:5000 techshop:latest\n\n# Test endpoints\ncurl http://localhost:5000/\ncurl http://localhost:5000/health\ncurl http://localhost:5000/metrics\ncurl http://localhost:5000/products\n\n# Create order\ncurl -X POST http://localhost:5000/orders \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"product_id\": 1, \"quantity\": 2}'\n\n# Cleanup\ndocker stop techshop-test\ndocker rm techshop-test\n</code></pre>"},{"location":"ci_cd_advanced/lab/#osa-4-cicd-pipeline-gitlab-ci","title":"Osa 4: CI/CD Pipeline (GitLab CI)","text":""},{"location":"ci_cd_advanced/lab/#41-git-repository-setup","title":"4.1 Git repository setup","text":"Bash<pre><code># Mine projekti juurkausta\ncd ..\n\n# Initialize Git\ngit init\n\n# Create .gitignore\ncat &gt; .gitignore &lt;&lt; EOF\n# Terraform\n*.tfstate\n*.tfstate.*\n.terraform/\nterraform.tfvars\n\n# Python\n__pycache__/\n*.pyc\n.pytest_cache/\nvenv/\n.env\n\n# Docker\n.dockerignore\n\n# IDE\n.vscode/\n.idea/\n*.swp\n\n# OS\n.DS_Store\nThumbs.db\nEOF\n\n# Add files\ngit add .\ngit commit -m \"Initial commit: TechShop automation project\"\n\n# Add remote (replace with your URL)\ngit remote add origin https://gitlab.com/your-username/techshop-automation.git\ngit push -u origin main\n</code></pre>"},{"location":"ci_cd_advanced/lab/#42-gitlab-ci-pipeline","title":"4.2 GitLab CI pipeline","text":"<p><code>.gitlab-ci.yml</code>: YAML<pre><code># Define stages\nstages:\n  - validate\n  - test\n  - build\n  - deploy\n\n# Global variables\nvariables:\n  DOCKER_DRIVER: overlay2\n  DOCKER_TLS_CERTDIR: \"\"\n  IMAGE_NAME: $CI_REGISTRY_IMAGE/techshop\n  IMAGE_TAG: $CI_COMMIT_SHORT_SHA\n\n# Cache configuration\ncache:\n  paths:\n    - .terraform/\n\n# Stage 1: Validate\nvalidate:terraform:\n  stage: validate\n  image: hashicorp/terraform:1.5\n  script:\n    - cd terraform\n    - terraform init -backend=false\n    - terraform fmt -check=true\n    - terraform validate\n  only:\n    - merge_requests\n    - main\n\nvalidate:ansible:\n  stage: validate\n  image: ansible/ansible:latest\n  script:\n    - cd ansible\n    - ansible-playbook --syntax-check playbook.yml\n  only:\n    - merge_requests\n    - main\n\n# Stage 2: Test\ntest:python:\n  stage: test\n  image: python:3.9\n  before_script:\n    - cd app\n    - pip install -r requirements.txt\n  script:\n    - python -m pytest tests/ -v\n    - python -m flake8 app.py --max-line-length=100\n  coverage: '/TOTAL.*\\s+(\\d+%)$/'\n  only:\n    - merge_requests\n    - main\n\ntest:docker:\n  stage: test\n  image: docker:latest\n  services:\n    - docker:dind\n  script:\n    - cd app\n    - docker build -t test-image .\n    - docker run --rm test-image python -c \"import app; print('Import successful')\"\n  only:\n    - merge_requests\n    - main\n\n# Stage 3: Build\nbuild:docker:\n  stage: build\n  image: docker:latest\n  services:\n    - docker:dind\n  before_script:\n    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY\n  script:\n    - cd app\n    - docker build -t $IMAGE_NAME:$IMAGE_TAG .\n    - docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:latest\n    - docker push $IMAGE_NAME:$IMAGE_TAG\n    - docker push $IMAGE_NAME:latest\n    - echo \"Image pushed: $IMAGE_NAME:$IMAGE_TAG\"\n  only:\n    - main\n\n# Stage 4: Deploy\ndeploy:staging:\n  stage: deploy\n  image: alpine:latest\n  before_script:\n    - apk add --no-cache curl docker-cli\n  script:\n    - echo \"Deploying to staging...\"\n    - docker pull $IMAGE_NAME:$IMAGE_TAG\n    - docker stop techshop-staging || true\n    - docker rm techshop-staging || true\n    - |\n      docker run -d \\\n        --name techshop-staging \\\n        -p 5001:5000 \\\n        --restart unless-stopped \\\n        $IMAGE_NAME:$IMAGE_TAG\n    - sleep 10\n    - curl -f http://localhost:5001/health || exit 1\n    - echo \"Staging deployment successful!\"\n  environment:\n    name: staging\n    url: http://localhost:5001\n  only:\n    - main\n\ndeploy:production:\n  stage: deploy\n  image: alpine:latest\n  before_script:\n    - apk add --no-cache curl docker-cli ansible\n  script:\n    - echo \"Deploying to production...\"\n    - cd ansible\n    - ansible-playbook -i inventory.yml deploy.yml\n    - curl -f http://localhost/health || exit 1\n    - echo \"Production deployment successful!\"\n  environment:\n    name: production\n    url: http://localhost\n  when: manual\n  only:\n    - main\n</code></pre></p>"},{"location":"ci_cd_advanced/lab/#43-gitlab-configuration","title":"4.3 GitLab configuration","text":"Bash<pre><code># Set GitLab CI/CD variables\n# Go to: Settings \u2192 CI/CD \u2192 Variables\n\n# Add these variables:\nCI_REGISTRY_USER: your-gitlab-username\nCI_REGISTRY_PASSWORD: your-gitlab-token\nDOCKER_HOST: tcp://docker:2375\n</code></pre>"},{"location":"ci_cd_advanced/lab/#osa-5-monitoring-ja-observability","title":"Osa 5: Monitoring ja Observability","text":""},{"location":"ci_cd_advanced/lab/#51-monitoring-stack","title":"5.1 Monitoring stack","text":"<p><code>monitoring/docker-compose.yml</code>: YAML<pre><code>version: '3.8'\n\nservices:\n  prometheus:\n    image: prom/prometheus:latest\n    container_name: prometheus\n    volumes:\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\n      - prometheus_data:/prometheus\n    command:\n      - '--config.file=/etc/prometheus/prometheus.yml'\n      - '--storage.tsdb.path=/prometheus'\n    ports:\n      - \"9090:9090\"\n    networks:\n      - monitoring\n\n  grafana:\n    image: grafana/grafana:latest\n    container_name: grafana\n    volumes:\n      - grafana_data:/var/lib/grafana\n      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards\n    environment:\n      - GF_SECURITY_ADMIN_PASSWORD=admin\n      - GF_USERS_ALLOW_SIGN_UP=false\n    ports:\n      - \"3000:3000\"\n    networks:\n      - monitoring\n\n  node_exporter:\n    image: prom/node-exporter:latest\n    container_name: node_exporter\n    ports:\n      - \"9100:9100\"\n    networks:\n      - monitoring\n\nvolumes:\n  prometheus_data:\n  grafana_data:\n\nnetworks:\n  monitoring:\n    driver: bridge\n</code></pre></p> <p><code>monitoring/prometheus.yml</code>: YAML<pre><code>global:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nscrape_configs:\n  - job_name: 'prometheus'\n    static_configs:\n      - targets: ['localhost:9090']\n\n  - job_name: 'node'\n    static_configs:\n      - targets: ['node_exporter:9100']\n\n  - job_name: 'techshop'\n    metrics_path: '/metrics'\n    static_configs:\n      - targets: ['host.docker.internal:5000']\n</code></pre></p>"},{"location":"ci_cd_advanced/lab/#52-application-metrics","title":"5.2 Application metrics","text":"<p>Lisage <code>app.py</code> faili Prometheus metrics:</p> Python<pre><code>from prometheus_client import Counter, Histogram, Gauge, generate_latest\n\n# Metrics\nrequest_count = Counter('app_requests_total', 'Total requests', ['method', 'endpoint'])\nrequest_duration = Histogram('app_request_duration_seconds', 'Request duration')\nactive_orders = Gauge('app_active_orders', 'Number of active orders')\n\n@app.route('/metrics')\ndef metrics_prometheus():\n    \"\"\"Prometheus metrics endpoint\"\"\"\n    # Update gauges\n    active_orders.set(len(ORDERS))\n\n    # Return metrics\n    return generate_latest(), 200, {'Content-Type': 'text/plain; charset=utf-8'}\n</code></pre>"},{"location":"ci_cd_advanced/lab/#osa-6-documentation","title":"Osa 6: Documentation","text":""},{"location":"ci_cd_advanced/lab/#61-readmemd","title":"6.1 README.md","text":"<p>Markdown<pre><code># TechShop E-commerce Automation\n\n## \ud83d\udccb Overview\n\nComplete DevOps automation project demonstrating modern CI/CD practices.\n\n## Architecture\n</code></pre> \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502   GitLab    \u2502\u2500\u2500\u2500\u2500\u25b6\u2502   CI/CD      \u2502\u2500\u2500\u2500\u2500\u25b6\u2502  Deployment  \u2502 \u2502   Repo      \u2502     \u2502   Pipeline   \u2502     \u2502  Environment \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2502                    \u2502                     \u2502        \u25bc                    \u25bc                     \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502  Terraform  \u2502     \u2502   Docker     \u2502     \u2502   Ansible    \u2502 \u2502    IaC      \u2502     \u2502  Container   \u2502     \u2502   Config     \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Text Only<pre><code>## Quick Start\n\n### Local Development\n```bash\n# Clone repository\ngit clone https://gitlab.com/username/techshop-automation.git\ncd techshop-automation\n\n# Run locally\ncd app\ndocker build -t techshop:latest .\ndocker run -p 5000:5000 techshop:latest\n\n# Test\ncurl http://localhost:5000/health\n</code></pre></p>"},{"location":"ci_cd_advanced/lab/#production-deployment","title":"Production Deployment","text":"<ol> <li>Push code to GitLab</li> <li>Pipeline runs automatically</li> <li>Manual approval for production</li> </ol>"},{"location":"ci_cd_advanced/lab/#monitoring","title":"\ud83d\udcca Monitoring","text":"<ul> <li>Prometheus: http://localhost:9090</li> <li>Grafana: http://localhost:3000</li> <li>Application: http://localhost:5000</li> </ul>"},{"location":"ci_cd_advanced/lab/#technologies","title":"\ud83d\udee0 Technologies","text":"<ul> <li>Infrastructure: Terraform</li> <li>Configuration: Ansible</li> <li>Containerization: Docker</li> <li>CI/CD: GitLab CI</li> <li>Monitoring: Prometheus + Grafana</li> <li>Application: Python Flask</li> </ul>"},{"location":"ci_cd_advanced/lab/#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li>API Documentation</li> <li>Deployment Guide</li> <li>Troubleshooting</li> </ul>"},{"location":"ci_cd_advanced/lab/#api-documentation","title":"API Documentation","text":"<p>The TechShop API provides the following endpoints:</p> <ul> <li><code>GET /</code> - Service information and available endpoints</li> <li><code>GET /health</code> - Health check endpoint</li> <li><code>GET /metrics</code> - System and application metrics</li> <li><code>GET /products</code> - List all products</li> <li><code>GET /products/{id}</code> - Get specific product</li> <li><code>GET /orders</code> - List all orders</li> <li><code>POST /orders</code> - Create new order</li> </ul>"},{"location":"ci_cd_advanced/lab/#deployment-guide","title":"Deployment Guide","text":""},{"location":"ci_cd_advanced/lab/#local-development","title":"Local Development","text":"Bash<pre><code># Clone repository\ngit clone https://gitlab.com/username/techshop-automation.git\ncd techshop-automation\n\n# Run locally\ncd app\ndocker build -t techshop:latest .\ndocker run -p 5000:5000 techshop:latest\n\n# Test\ncurl http://localhost:5000/health\n</code></pre>"},{"location":"ci_cd_advanced/lab/#production-deployment_1","title":"Production Deployment","text":"<ol> <li>Push code to GitLab</li> <li>Pipeline runs automatically</li> <li>Manual approval for production</li> </ol>"},{"location":"ci_cd_advanced/lab/#troubleshooting","title":"Troubleshooting","text":""},{"location":"ci_cd_advanced/lab/#common-issues","title":"Common Issues","text":"<p>Docker build fails: Bash<pre><code># Check Docker daemon\nsudo systemctl status docker\n# Restart if needed\nsudo systemctl restart docker\n</code></pre></p> <p>Application won't start: Bash<pre><code># Check logs\ndocker logs &lt;container-name&gt;\n# Check port availability\nnetstat -tulpn | grep 5000\n</code></pre></p> <p>Pipeline fails: - Check GitLab CI/CD variables - Verify Docker registry credentials - Review pipeline logs in GitLab</p>"},{"location":"ci_cd_advanced/lab/#metrics","title":"\ud83d\udcc8 Metrics","text":"<ul> <li>Deployment time: 2 hours \u2192 5 minutes</li> <li>Error rate: 30% \u2192 2%</li> <li>Rollback time: 1 hour \u2192 2 minutes ```</li> </ul>"},{"location":"ci_cd_advanced/lab/#labi-kokkuvote","title":"Lab'i kokkuv\u00f5te","text":""},{"location":"ci_cd_advanced/lab/#saavutatud-tulemused","title":"Saavutatud tulemused","text":"<ol> <li>T\u00e4ielik automatiseerimine - nullist production'ini</li> <li>K\u00f5ik oskused kasutatud - Git, Ansible, Docker, Terraform, CI/CD</li> <li>Production-ready lahendus - monitoring, health checks, logging</li> <li>Dokumenteeritud projekt - README, API docs, troubleshooting</li> </ol>"},{"location":"ci_cd_advanced/lab/#moodetavad-tulemused","title":"\ud83d\udcca M\u00f5\u00f5detavad tulemused","text":"Metric Enne P\u00e4rast Improvement Deployment aeg 2 tundi 5 minutit 96% \u2193 Vigade arv 30% 2% 93% \u2193 Rollback aeg 1 tund 2 minutit 97% \u2193 Arendaja stress K\u00f5rge Madal 100% \u2193"},{"location":"ci_cd_advanced/lab/#jargmised-sammud","title":"\ud83c\udfaf J\u00e4rgmised sammud","text":"<ul> <li> Lisa Kubernetes orchestration</li> <li> Implementeeri blue-green deployment</li> <li> Lisa security scanning (SAST/DAST)</li> <li> Automatiseeri load testing</li> <li> Lisa disaster recovery</li> </ul>"},{"location":"ci_cd_advanced/lab/#onnitleme","title":"\u00d5nnitleme!","text":"<p>Olete edukalt l\u00f5petanud automatiseerimise kursuse l\u00f5ppprojekti! See projekt demonstreerib k\u00f5iki olulisi DevOps praktikaid ja on valmis kasutamiseks p\u00e4ris projektides.</p> <p>Portfolio v\u00e4\u00e4rtus: See projekt on suurep\u00e4rane lisand teie portfolio'sse ja demonstreerib oskusi, mida t\u00f6\u00f6andjad otsivad!</p>"},{"location":"ci_cd_advanced/lecture/","title":"CI/CD Advanced: Ettev\u00f5tte-tasemel DevOps Automatiseerimine","text":""},{"location":"ci_cd_advanced/lecture/#sissejuhatus","title":"Sissejuhatus","text":"<p>Selles peat\u00fckis tutvume ettev\u00f5tte-tasemel CI/CD automatiseerimisega, mis l\u00e4heb palju kaugemale lihtsate \"Hello World\" pipeline'ide. \u00d5pitakse, kuidas ehitada robustseid, turvalisi ja optimeeritud CI/CD s\u00fcsteeme, mis suudavad toetada t\u00f5elist DevOps kultuuri.</p> <p>Allikad ja viited: - Mastering GitLab CI/CD with Advanced Configuration Techniques - Advanced CI/CD Pipeline Configuration Strategies</p>"},{"location":"ci_cd_advanced/lecture/#ettevotte-devops-valjakutsed","title":"Ettev\u00f5tte DevOps V\u00e4ljakutsed","text":""},{"location":"ci_cd_advanced/lecture/#tuupilised-probleemid-suuremates-projektides","title":"T\u00fc\u00fcpilised probleemid suuremates projektides","text":"<ul> <li>Deployment k\u00e4sitsi: 2-4 tundi, k\u00f5rge vigade t\u00f5en\u00e4osus (30-40%)</li> <li>Rollback keerukus: 1-2 tundi, andmekadu risk</li> <li>Deploy sagedus: 1x n\u00e4dalas v\u00f5i harvem</li> <li>Arendajate stress: K\u00f5rge, \u00f6ised deploy'id</li> <li>Kvaliteedi kontroll: Manuaalne, ebaj\u00e4rjekindel</li> <li>Turvalisus: Paroolid koodis, puuduvad turvaskaneerimised</li> </ul>"},{"location":"ci_cd_advanced/lecture/#legacy-deployment-protsess","title":"Legacy deployment protsess","text":"Samm Tegevus Riskid 1 SSH \u00fchendus serverisse Turvahaavatavus, \u00fcksik punkti rike 2 Git pull v\u00e4rske koodi saamiseks Konfliktid, vale branch 3 S\u00f5ltuvuste k\u00e4sitsi installeerimine Versioonikonfliktid 4 Rakenduse taask\u00e4ivitamine Downtime, teenuse katkestus 5 Manuaalne testimine Inimviga, ebaj\u00e4rjekindel 6 Kui midagi l\u00e4heb valesti \u2192 rollback Andmekadu, pikk taastumisaeg"},{"location":"ci_cd_advanced/lecture/#ettevotte-tasemel-lahenduse-arhitektuur","title":"Ettev\u00f5tte-tasemel Lahenduse Arhitektuur","text":""},{"location":"ci_cd_advanced/lecture/#pohiline-devops-stack","title":"P\u00f5hiline DevOps Stack","text":"T\u00f6\u00f6riist Kirjeldus Ettev\u00f5tte Eelised Git (Version Control) Edasij\u00f5udnud harude strateegiad, koodikontroll GitFlow/GitHub Flow, automatiseeritud kvaliteedi v\u00e4ravad GitLab CI/CD Edasij\u00f5udnud pipeline konfiguratsioon Mitmeetapiline, paralleelne t\u00e4itmine, turvaskaneerimine Docker Konteineriseerimine mitmeetapiliste build'idega \u00dchtsed keskkonnad, turvaskaneerimine Terraform Infrastruktur koodina Multi-cloud, oleku haldus, drift detection Ansible Konfiguratsiooni haldus Idempotent, agentideta, inventuuri haldus Prometheus + Grafana J\u00e4lgimine ja hoiatused SLO/SLI j\u00e4lgimine, automatiseeritud incident response Vault Saladuste haldus D\u00fcnaamilised saladused, audit logimine, RBAC"},{"location":"ci_cd_advanced/lecture/#edasijoudnud-git-workflow-ja-harude-strateegia","title":"Edasij\u00f5udnud Git Workflow ja Harude Strateegia","text":""},{"location":"ci_cd_advanced/lecture/#gitflow-rakendamine","title":"GitFlow Rakendamine","text":"Bash<pre><code># Feature arendus\ngit checkout -b feature/user-authentication\ngit commit -m \"Add OAuth2 integration\"\ngit push origin feature/user-authentication\n\n# Loo merge request kvaliteedi v\u00e4ravatega\n# Automaatsed testid, turvaskaneerimised, koodikontroll kohustuslik\n</code></pre>"},{"location":"ci_cd_advanced/lecture/#kvaliteedi-varavad","title":"Kvaliteedi V\u00e4ravad","text":"<ul> <li>Koodikontroll: Minimaalselt 2 heakskiitu vajalik</li> <li>Automaatsed testid: 100% l\u00e4bimise m\u00e4\u00e4r kohustuslik</li> <li>Turvaskaneerimine: \u00dchtegi k\u00f5rge/kriitilist haavatavust</li> <li>J\u00f5udluse testid: Vastuse aeg &lt; 200ms</li> <li>Katvus: Minimaalselt 80% koodi katvus</li> </ul>"},{"location":"ci_cd_advanced/lecture/#edasijoudnud-gitlab-cicd-pipeline-arhitektuur","title":"Edasij\u00f5udnud GitLab CI/CD Pipeline Arhitektuur","text":""},{"location":"ci_cd_advanced/lecture/#mitmeetapiline-pipeline-edasijoudnud-konfiguratsiooniga","title":"Mitmeetapiline Pipeline Edasij\u00f5udnud Konfiguratsiooniga","text":"<p>See on ettev\u00f5tte-tasemel GitLab CI/CD pipeline, mis erineb tavalisest \"Hello World\" n\u00e4itest mitme olulise aspekti poolest:</p>"},{"location":"ci_cd_advanced/lecture/#miks-see-on-edasijoudnud","title":"Miks see on edasij\u00f5udnud?","text":"<ol> <li>Mitmeetapiline struktuur - Pipeline on jagatud loogilisteks etappideks</li> <li>Turvalisus esikohal - Iga etapp sisaldab turvakontrolli</li> <li>Paralleelne t\u00f6\u00f6tlemine - Testid jooksevad samaaegselt</li> <li>Intelligentne caching - Optimeeritud j\u00f5udlus</li> <li>Keskkonna-spetsiifiline loogika - Erinevad reeglid erinevatele keskkondadele</li> </ol> YAML<pre><code># .gitlab-ci.yml - Ettev\u00f5tte-tasemel konfiguratsioon\n# \n# EDASIJ\u00d5UDNUD FUNKTSIOON 1: Mitmeetapiline struktuur\n# Tavaline pipeline: build -&gt; test -&gt; deploy\n# Meie pipeline: validate -&gt; test -&gt; security -&gt; build -&gt; deploy-staging -&gt; deploy-production -&gt; monitor\nstages:\n  - validate    # Koodi kvaliteedi kontroll\n  - test        # Automaatsed testid\n  - security    # Turvaskaneerimine\n  - build       # Docker image loomine\n  - deploy-staging    # Staging keskkonda deploy\n  - deploy-production # Production keskkonda deploy\n  - monitor     # J\u00e4lgimine ja tervise kontrollid\n\n# EDASIJ\u00d5UDNUD FUNKTSIOON 2: Optimeeritud Docker konfiguratsioon\nvariables:\n  DOCKER_DRIVER: overlay2        # Kiirem failis\u00fcsteem\n  DOCKER_TLS_CERTDIR: \"/certs\"   # Turvaline TLS\n  DOCKER_BUILDKIT: 1             # Uusim build tehnoloogia\n\n# Globaalne konfiguratsioon - rakendub k\u00f5igile job'idele\ndefault:\n  image: docker:24.0.5\n  services:\n    - docker:24.0.5-dind  # Docker-in-Docker teenus\n  before_script:\n    - docker info\n    - echo \"Alustan pipeline'i $CI_COMMIT_REF_NAME jaoks\"\n\n# ETAPP 1: Valideerimine\n# EDASIJ\u00d5UDNUD FUNKTSIOON 3: Tingimuslik t\u00e4itmine\nvalidate:\n  stage: validate\n  image: alpine:latest\n  script:\n    - apk add --no-cache git\n    - git validate --strict  # Kontrollib koodi kvaliteeti\n    - echo \"Koodi valideerimine \u00f5nnestus\"\n  rules:\n    # Jookseb ainult merge request'ide ja main branch'i jaoks\n    - if: '$CI_PIPELINE_SOURCE == \"merge_request_event\"'\n    - if: '$CI_COMMIT_BRANCH == \"main\"'\n\n# ETAPP 2: Testimine\n# EDASIJ\u00d5UDNUD FUNKTSIOON 4: Paralleelne testimine maatriks strateegiaga\ntest:unit:\n  stage: test\n  image: node:20-alpine\n  script:\n    - npm ci --cache .npm --prefer-offline  # Optimeeritud install\n    - npm run test:unit\n    - npm run test:coverage\n  coverage: '/Lines\\s*:\\s*(\\d+\\.\\d+)%/'  # Automaatne katvuse m\u00f5\u00f5tmine\n  artifacts:\n    reports:\n      coverage_report:\n        coverage_format: cobertura\n        path: coverage/cobertura-coverage.xml\n    paths:\n      - coverage/\n    expire_in: 1 week  # Artifaktid kustuvad automaatselt\n  cache:\n    key: ${CI_COMMIT_REF_SLUG}-npm  # Unikaalne cache v\u00f5ti\n    paths:\n      - .npm/\n      - node_modules/\n  parallel:\n    matrix:\n      # EDASIJ\u00d5UDNUD FUNKTSIOON 5: Testimine mitmes Node.js versioonis\n      - NODE_VERSION: [\"18\", \"20\"]  # Jookseb paralleelselt m\u00f5lemas versioonis\n\n# EDASIJ\u00d5UDNUD FUNKTSIOON 6: Integratsiooni testid teenustega\ntest:integration:\n  stage: test\n  image: python:3.11-slim\n  services:\n    - postgres:15-alpine  # Andmebaas teenus\n    - redis:7-alpine      # Cache teenus\n  variables:\n    POSTGRES_DB: test_db\n    POSTGRES_USER: test_user\n    POSTGRES_PASSWORD: test_pass\n  script:\n    - pip install -r requirements.txt\n    - pytest tests/integration/ -v --cov=app\n  artifacts:\n    when: always  # Salvestab tulemused isegi kui test eba\u00f5nnestub\n    paths:\n      - test-results/\n    reports:\n      junit: test-results/junit.xml  # GitLab saab n\u00e4ha test tulemusi\n\n# ETAPP 3: Turvalisus\n# EDASIJ\u00d5UDNUD FUNKTSIOON 7: P\u00f5hjalik turvaskaneerimine\nsecurity:scan:\n  stage: security\n  image: securecodewarrior/docker-security-scan:latest\n  script:\n    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .\n    - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \n        securecodewarrior/docker-security-scan:latest \n        $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA\n  rules:\n    - if: '$CI_COMMIT_BRANCH == \"main\"'\n    - if: '$CI_PIPELINE_SOURCE == \"merge_request_event\"'\n\n# ETAPP 4: Build\n# EDASIJ\u00d5UDNUD FUNKTSIOON 8: Mitmeetapiline Docker build\nbuild:\n  stage: build\n  image: docker:24.0.5\n  services:\n    - docker:24.0.5-dind\n  script:\n    - docker build \n        --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')  # Build kuup\u00e4ev\n        --build-arg VCS_REF=$CI_COMMIT_SHA                       # Git commit hash\n        --build-arg VERSION=$CI_COMMIT_TAG                       # Versiooni number\n        -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA                     # Unikaalne tag\n        -t $CI_REGISTRY_IMAGE:latest                             # Latest tag\n        .\n    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA\n    - docker push $CI_REGISTRY_IMAGE:latest\n  rules:\n    - if: '$CI_COMMIT_BRANCH == \"main\"'\n    - if: '$CI_COMMIT_TAG'\n\n# ETAPP 5: Staging Deploy\n# EDASIJ\u00d5UDNUD FUNKTSIOON 9: Manuaalne heakskiit ja keskkonna haldus\ndeploy:staging:\n  stage: deploy-staging\n  image: alpine:latest\n  environment:\n    name: staging\n    url: https://staging.techshop.com  # GitLab n\u00e4itab keskkonna URL'i\n  script:\n    - apk add --no-cache curl\n    - curl -X POST \"$STAGING_WEBHOOK_URL\" \n        -H \"Authorization: Bearer $STAGING_DEPLOY_TOKEN\"\n        -d '{\"image\": \"'$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA'\"}'\n    - echo \"Staging deployment k\u00e4ivitatud\"\n  rules:\n    - if: '$CI_COMMIT_BRANCH == \"main\"'\n  when: manual        # EDASIJ\u00d5UDNUD: N\u00f5uab manuaalset heakskiitu\n  allow_failure: false # EDASIJ\u00d5UDNUD: Eba\u00f5nnestumine peatab pipeline'i\n\n# ETAPP 6: Production Deploy\n# EDASIJ\u00d5UDNUD FUNKTSIOON 10: Tag-based deployment\ndeploy:production:\n  stage: deploy-production\n  image: alpine:latest\n  environment:\n    name: production\n    url: https://techshop.com\n  script:\n    - apk add --no-cache curl\n    - curl -X POST \"$PROD_WEBHOOK_URL\" \n        -H \"Authorization: Bearer $PROD_DEPLOY_TOKEN\"\n        -d '{\"image\": \"'$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA'\"}'\n    - echo \"Production deployment k\u00e4ivitatud\"\n  rules:\n    # EDASIJ\u00d5UDNUD: Jookseb ainult versiooni tag'idega (nt v1.2.3)\n    - if: '$CI_COMMIT_TAG =~ /^v\\d+\\.\\d+\\.\\d+$/'\n  when: manual\n  allow_failure: false\n\n# ETAPP 7: J\u00e4lgimine\n# EDASIJ\u00d5UDNUD FUNKTSIOON 11: Post-deployment tervise kontrollid\nmonitor:health:\n  stage: monitor\n  image: curlimages/curl:latest\n  script:\n    - curl -f $STAGING_URL/health || exit 1    # Tervise endpoint\n    - curl -f $STAGING_URL/metrics || exit 1   # Meetrikate endpoint\n    - echo \"Tervise kontrollid \u00f5nnestusid\"\n  rules:\n    - if: '$CI_COMMIT_BRANCH == \"main\"'\n  needs:\n    - deploy:staging  # EDASIJ\u00d5UDNUD: Ootab staging deploy'i l\u00f5ppu\n</code></pre> <p>Allikas: GitLab CI/CD Advanced Configuration</p>"},{"location":"ci_cd_advanced/lecture/#edasijoudnud-pipeline-funktsioonid","title":"Edasij\u00f5udnud Pipeline Funktsioonid","text":""},{"location":"ci_cd_advanced/lecture/#1-modulaarne-konfiguratsioon-includeidega","title":"1. Modulaarne Konfiguratsioon Include'idega","text":"<p>Miks see on edasij\u00f5udnud? - Korduvkasutatavus: Sama konfiguratsiooni saab kasutada mitmes projektis - Hooldatavus: Iga funktsioon on eraldi failis - Testitavus: Saab testida \u00fcksikuid komponente - Jagamine: Meeskond saab jagada konfiguratsioone</p> YAML<pre><code># .gitlab-ci.yml (p\u00f5hifail)\n# EDASIJ\u00d5UDNUD: Modulaarne struktuur - jagame pipeline'i v\u00e4iksemateks osadeks\ninclude:\n  - local: '.gitlab-ci/build.yml'      # Build loogika eraldi failis\n  - local: '.gitlab-ci/test.yml'       # Test loogika eraldi failis\n  - local: '.gitlab-ci/deploy.yml'     # Deploy loogika eraldi failis\n  - project: 'devops/shared-templates' # Jagatud mallid teisest projektist\n    file: '/security-scan.yml'\n    ref: 'main'\n\nvariables:\n  GLOBAL_VAR: \"shared-value\"  # Globaalsed muutujad k\u00f5igile job'idele\n</code></pre>"},{"location":"ci_cd_advanced/lecture/#2-dunaamilised-muutujad-ja-tingimuslik-loogika","title":"2. D\u00fcnaamilised Muutujad ja Tingimuslik Loogika","text":"<p>Miks see on edasij\u00f5udnud? - Automaatne keskkonna tuvastamine: Pipeline ise otsustab, kuhu deploy'ida - Vigade v\u00e4hendamine: Ei pea k\u00e4sitsi keskkonda valima - Paindlikkus: \u00dcks konfiguratsioon t\u00f6\u00f6tab k\u00f5igis keskkondades</p> YAML<pre><code># EDASIJ\u00d5UDNUD: D\u00fcnaamiline keskkonna konfiguratsioon\ndeploy:\n  stage: deploy\n  variables:\n    # EDASIJ\u00d5UDNUD FUNKTSIOON: Automaatne keskkonna tuvastamine\n    # Kui branch on \"main\" -&gt; production, muidu -&gt; staging\n    ENVIRONMENT: $([ \"$CI_COMMIT_BRANCH\" == \"main\" ] &amp;&amp; echo \"production\" || echo \"staging\")\n\n    # EDASIJ\u00d5UDNUD FUNKTSIOON: D\u00fcnaamiline URL valik\n    # Valib \u00f5ige URL'i vastavalt keskkonnale\n    DEPLOY_URL: $([ \"$CI_COMMIT_BRANCH\" == \"main\" ] &amp;&amp; echo \"$PROD_URL\" || echo \"$STAGING_URL\")\n  script:\n    - echo \"Deploying to $ENVIRONMENT at $DEPLOY_URL\"\n    - ./scripts/deploy.sh $ENVIRONMENT\n</code></pre>"},{"location":"ci_cd_advanced/lecture/#3-edasijoudnud-caching-strateegiad","title":"3. Edasij\u00f5udnud Caching Strateegiad","text":"<p>Miks see on edasij\u00f5udnud? - Kiirus: Cache'itud s\u00f5ltuvused = kiiremad build'id - Kulude kokkuhoid: V\u00e4hem ressursse kulutatakse - Intelligentne cache: Cache muutub ainult siis, kui s\u00f5ltuvused muutuvad</p> YAML<pre><code># EDASIJ\u00d5UDNUD: Optimeeritud caching erinevate job'ide jaoks\ncache:\n  key: \n    files:\n      - package-lock.json    # Kui package-lock.json muutub, cache uueneb\n      - requirements.txt     # Kui requirements.txt muutub, cache uueneb\n  paths:\n    - node_modules/          # Node.js s\u00f5ltuvused\n    - .npm/                  # npm cache\n    - venv/                  # Python virtuaalne keskkond\n  policy: pull-push          # Laeb cache'i ja salvestab uue\n\n# EDASIJ\u00d5UDNUD: Job-spetsiifiline cache override\ntest:unit:\n  cache:\n    key: ${CI_COMMIT_REF_SLUG}-test  # Unikaalne cache v\u00f5ti test'ide jaoks\n    paths:\n      - test-results/        # Test tulemused\n    policy: pull             # Ainult laeb cache'i, ei salvesta\n</code></pre> <p>Allikas: Advanced CI/CD Pipeline Configuration Strategies</p>"},{"location":"ci_cd_advanced/lecture/#edasijoudnud-docker-konfiguratsioon","title":"Edasij\u00f5udnud Docker Konfiguratsioon","text":""},{"location":"ci_cd_advanced/lecture/#mitmeetapiline-dockerfile-turvalisusega","title":"Mitmeetapiline Dockerfile Turvalisusega","text":"<p>Miks see on edasij\u00f5udnud? - Turvalisus: Kasutab mitte-root kasutajat - Optimeeritud suurus: Ainult vajalikud failid l\u00f5plikus image'is - Tervise kontrollid: Automaatne kontroll, kas rakendus t\u00f6\u00f6tab - Parimad praktikad: J\u00e4rgib Docker turvalisuse soovitusi</p> Docker<pre><code># EDASIJ\u00d5UDNUD: Mitmeetapiline build tootmise optimeerimiseks\n# \n# ETAPP 1: Build etapp - siin kompileeritakse ja ehitatakse\nFROM node:20-alpine AS builder\n\n# EDASIJ\u00d5UDNUD FUNKTSIOON 1: Turvalisus - kasuta mitte-root kasutajat\n# Tavaline Docker: kasutab root kasutajat (ohtlik!)\n# Meie lahendus: loob spetsiaalse kasutaja\nRUN addgroup -g 1001 -S nodejs\nRUN adduser -S nextjs -u 1001\n\nWORKDIR /app\nCOPY package*.json ./\n# EDASIJ\u00d5UDNUD FUNKTSIOON 2: Optimeeritud install\nRUN npm ci --only=production &amp;&amp; npm cache clean --force\n\n# ETAPP 2: Runtime etapp - siin jookseb rakendus\nFROM node:20-alpine AS runner\nWORKDIR /app\n\n# EDASIJ\u00d5UDNUD FUNKTSIOON 3: Turvaline kopeerimine \u00f5ige omandi\u00f5igustega\n# Kopeerib ainult vajalikud failid builder'ist\nCOPY --from=builder --chown=nextjs:nodejs /app/node_modules ./node_modules\nCOPY --chown=nextjs:nodejs . .\n\n# EDASIJ\u00d5UDNUD FUNKTSIOON 4: Turvalisus - l\u00fclitu mitte-root kasutajale\nUSER nextjs\n\nEXPOSE 3000\nENV PORT 3000\n\n# EDASIJ\u00d5UDNUD FUNKTSIOON 5: Automaatne tervise kontroll\n# Kontrollib iga 30 sekundi j\u00e4rel, kas rakendus t\u00f6\u00f6tab\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n  CMD curl -f http://localhost:3000/health || exit 1\n\nCMD [\"npm\", \"start\"]\n</code></pre> <p>Miks mitmeetapiline build on parem? - V\u00e4iksem image: Ainult runtime failid, mitte build t\u00f6\u00f6riistad - Kiirem start: V\u00e4hem failisid = kiirem container k\u00e4ivitumine - Turvalisem: V\u00e4hem haavatavusi, kuna build t\u00f6\u00f6riistad puuduvad</p>"},{"location":"ci_cd_advanced/lecture/#docker-turvaskaneerimine","title":"Docker Turvaskaneerimine","text":"<p>Miks see on edasij\u00f5udnud? - Automaatne skaneerimine: Iga Docker image skaneeritakse automaatselt - Mitme t\u00f6\u00f6riista kasutamine: Trivy + SecureCodeWarrior = p\u00f5hjalikum kontroll - Integratsioon pipeline'iga: Turvaskaneerimine on osa CI/CD protsessist - Vigade ennetamine: Leidab haavatavusi enne production'i</p> YAML<pre><code># EDASIJ\u00d5UDNUD: Turvaskaneerimine pipeline'is\nsecurity:docker:\n  stage: security\n  image: docker:latest\n  services:\n    - docker:dind  # Docker-in-Docker teenus\n  script:\n    # ETAPP 1: Ehita Docker image\n    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .\n\n    # ETAPP 2: Trivy skaneerimine - leiab haavatavusi\n    # EDASIJ\u00d5UDNUD FUNKTSIOON: P\u00f5hjalik haavatavuste anal\u00fc\u00fcs\n    - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \n        aquasec/trivy image $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA\n\n    # ETAPP 3: SecureCodeWarrior skaneerimine - t\u00e4iendav turvakontroll\n    # EDASIJ\u00d5UDNUD FUNKTSIOON: Mitme t\u00f6\u00f6riista kasutamine\n    - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \n        securecodewarrior/docker-security-scan:latest \n        $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA\n</code></pre> <p>Miks kasutada mitut turvaskaneerimise t\u00f6\u00f6riista? - Trivy: Leiab teadaolevad haavatavused (CVE) - SecureCodeWarrior: Leiab konfiguratsiooni probleeme - Kombineeritud tulemus: P\u00f5hjalikum turvakontroll</p> <p>Allikas: Docker Security Best Practices</p>"},{"location":"ci_cd_advanced/lecture/#infrastruktur-koodina-terraformiga","title":"Infrastruktur Koodina Terraform'iga","text":""},{"location":"ci_cd_advanced/lecture/#edasijoudnud-terraform-konfiguratsioon","title":"Edasij\u00f5udnud Terraform Konfiguratsioon","text":"<p>Miks see on edasij\u00f5udnud? - Oleku haldus: S3 backend + DynamoDB lukustamine - Modulaarne struktuur: Kasutab AWS mooduleid - Automaatne skaleerimine: ECS automaatne skaleerimine - Turvalisus: VPC privaatsed ja avalikud subnet'id - Tagimine: Automaatne ressursside tagimine</p> Terraform<pre><code># terraform/main.tf\n# EDASIJ\u00d5UDNUD FUNKTSIOON 1: Versiooni kontroll ja provider'ite haldus\nterraform {\n  required_version = \"&gt;= 1.0\"  # Tagab uusima Terraform versiooni\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~&gt; 5.0\"  # Uusim AWS provider\n    }\n  }\n\n  # EDASIJ\u00d5UDNUD FUNKTSIOON 2: Remote state haldus\n  backend \"s3\" {\n    bucket         = \"techshop-terraform-state\"  # State faili asukoht\n    key            = \"production/terraform.tfstate\"\n    region         = \"eu-west-1\"\n    encrypt        = true                        # Kr\u00fcpteeritud state\n    dynamodb_table = \"terraform-locks\"           # Lukustamine paralleelsete muudatuste vastu\n  }\n}\n\n# EDASIJ\u00d5UDNUD FUNKTSIOON 3: Keskkonna-spetsiifiline konfiguratsioon\nlocals {\n  environment = terraform.workspace  # Automaatne keskkonna tuvastamine\n  common_tags = {\n    Project     = \"TechShop\"\n    Environment = local.environment\n    ManagedBy   = \"Terraform\"\n    Owner       = \"DevOps Team\"\n  }\n}\n\n# EDASIJ\u00d5UDNUD FUNKTSIOON 4: VPC turvalisuse parimate praktikatega\nmodule \"vpc\" {\n  source = \"terraform-aws-modules/vpc/aws\"  # Kasutab testitud AWS moodulit\n\n  name = \"techshop-${local.environment}\"\n  cidr = var.vpc_cidr\n\n  # EDASIJ\u00d5UDNUD: Mitme availability zone kasutamine\n  azs             = [\"${var.aws_region}a\", \"${var.aws_region}b\"]\n  private_subnets = var.private_subnet_cidrs  # Privaatsed subnet'id (andmebaasid)\n  public_subnets  = var.public_subnet_cidrs   # Avalikud subnet'id (load balancer'id)\n\n  enable_nat_gateway = true   # NAT gateway privaatsete subnet'ide jaoks\n  enable_vpn_gateway = false  # VPN ei ole vajalik\n\n  tags = local.common_tags\n}\n\n# EDASIJ\u00d5UDNUD FUNKTSIOON 5: ECS Cluster automaatse skaleerimisega\nresource \"aws_ecs_cluster\" \"main\" {\n  name = \"techshop-${local.environment}\"\n\n  setting {\n    name  = \"containerInsights\"  # P\u00f5hjalik container j\u00e4lgimine\n    value = \"enabled\"\n  }\n\n  tags = local.common_tags\n}\n\n# EDASIJ\u00d5UDNUD FUNKTSIOON 6: Automaatse skaleerimise konfiguratsioon\nresource \"aws_appautoscaling_target\" \"ecs_target\" {\n  max_capacity       = 10  # Maksimaalne container'ite arv\n  min_capacity       = 2   # Minimaalne container'ite arv\n  resource_id        = \"service/${aws_ecs_cluster.main.name}/${aws_ecs_service.main.name}\"\n  scalable_dimension = \"ecs:service:DesiredCount\"\n  service_namespace  = \"ecs\"\n}\n</code></pre> <p>Miks see on ettev\u00f5tte-tasemel? - Oleku haldus: Remote state + lukustamine = meeskonna t\u00f6\u00f6 - Modulaarsus: AWS moodulid = testitud ja hooldatud kood - Skaleeritavus: Automaatne skaleerimine vastavalt koormusele - Turvalisus: VPC eraldamine ja NAT gateway</p> <p>Allikas: Terraform Best Practices</p>"},{"location":"ci_cd_advanced/lecture/#edasijoudnud-cicd-pipeline-voo","title":"Edasij\u00f5udnud CI/CD Pipeline Voo","text":"<pre><code>flowchart TD\n    A[Koodi Commit] --&gt; B[Valideerimine]\n    B --&gt; C[Turvaskaneerimine]\n    C --&gt; D[Unit Testid]\n    C --&gt; E[Integratsiooni Testid]\n    C --&gt; F[J\u00f5udluse Testid]\n\n    D --&gt; G[Build Docker Image]\n    E --&gt; G\n    F --&gt; G\n\n    G --&gt; H[Turvaskaneerimine Image]\n    H --&gt; I[Push Registry'sse]\n\n    I --&gt; J{Keskkond?}\n    J --&gt;|Staging| K[Deploy Staging'isse]\n    J --&gt;|Production| L[Manuaalne Heakskiit]\n\n    K --&gt; M[Tervise Kontrollid]\n    L --&gt; N[Deploy Production'isse]\n    N --&gt; O[Production Tervise Kontrollid]\n\n    M --&gt; P[Smoke Testid]\n    O --&gt; Q[J\u00e4lgimine ja Hoiatused]\n\n    B --&gt; R[Valideerimine Eba\u00f5nnestus]\n    C --&gt; S[Turva Probleemid]\n    D --&gt; T[Testid Eba\u00f5nnestus]\n    E --&gt; T\n    F --&gt; T\n    H --&gt; U[Haavatavused Leitud]\n\n    R --&gt; V[Paranda ja Proovi Uuesti]\n    S --&gt; V\n    T --&gt; V\n    U --&gt; V\n    V --&gt; A\n\n    P --&gt; W[Deploy \u00d5nnestus]\n    Q --&gt; X[Production Valmis]</code></pre> <p>Allikas: CI/CD Pipeline Design Patterns</p>"},{"location":"ci_cd_advanced/lecture/#turvalisus-esikohal-cicd-rakendamine","title":"Turvalisus-Esikohal CI/CD Rakendamine","text":""},{"location":"ci_cd_advanced/lecture/#saladuste-haldus","title":"Saladuste Haldus","text":"YAML<pre><code># \u00c4ra kunagi hardcode'i saladusi - kasuta GitLab CI/CD muutujaid\nvariables:\n  # Need on seadistatud GitLab UI's Settings &gt; CI/CD &gt; Variables\n  AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID\n  AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY\n  DATABASE_PASSWORD: $DATABASE_PASSWORD\n  API_SECRET_KEY: $API_SECRET_KEY\n\n# Kasuta kaitstud muutujaid tootmise jaoks\ndeploy:production:\n  variables:\n    ENVIRONMENT: \"production\"\n  script:\n    - echo \"Deploying with secure credentials\"\n    - ./scripts/deploy.sh\n  only:\n    variables:\n      - $CI_COMMIT_TAG\n</code></pre>"},{"location":"ci_cd_advanced/lecture/#turvaskaneerimise-pipeline","title":"Turvaskaneerimise Pipeline","text":"YAML<pre><code># P\u00f5hjalik turvaskaneerimine\nsecurity:comprehensive:\n  stage: security\n  image: securecodewarrior/security-scan:latest\n  script:\n    # SAST - Static Application Security Testing\n    - semgrep --config=auto .\n    - bandit -r . -f json -o bandit-report.json\n\n    # S\u00f5ltuvuste skaneerimine\n    - safety check --json --output safety-report.json\n    - npm audit --audit-level moderate\n\n    # Konteineri turvalisus\n    - trivy image --severity HIGH,CRITICAL $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA\n\n    # Infrastruktuuri turvalisus\n    - checkov -d terraform/ --framework terraform\n  artifacts:\n    reports:\n      sast: bandit-report.json\n      dependency_scanning: safety-report.json\n    paths:\n      - security-reports/\n    expire_in: 1 week\n  allow_failure: false\n</code></pre> <p>Allikas: Security-First CI/CD Practices</p>"},{"location":"ci_cd_advanced/lecture/#joudluse-optimeerimise-strateegiad","title":"J\u00f5udluse Optimeerimise Strateegiad","text":""},{"location":"ci_cd_advanced/lecture/#pipeline-optimeerimise-tehnikad","title":"Pipeline Optimeerimise Tehnikad","text":"YAML<pre><code># Paralleelne t\u00e4itmine kiiremate pipeline'ide jaoks\ntest:parallel:\n  stage: test\n  parallel:\n    matrix:\n      - TEST_SUITE: [\"unit\", \"integration\", \"e2e\"]\n      - NODE_VERSION: [\"18\", \"20\"]\n  script:\n    - npm run test:$TEST_SUITE\n  cache:\n    key: ${CI_COMMIT_REF_SLUG}-${TEST_SUITE}\n    paths:\n      - node_modules/\n      - test-results/\n\n# Optimeeritud Docker build'id BuildKit'iga\nbuild:optimized:\n  stage: build\n  variables:\n    DOCKER_BUILDKIT: 1\n    BUILDKIT_PROGRESS: plain\n  script:\n    - docker build \n        --cache-from $CI_REGISTRY_IMAGE:cache\n        --cache-to $CI_REGISTRY_IMAGE:cache\n        --target production\n        -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA\n        .\n</code></pre>"},{"location":"ci_cd_advanced/lecture/#edasijoudnud-caching-strateegiad","title":"Edasij\u00f5udnud Caching Strateegiad","text":"YAML<pre><code># Mitmetasemeline caching\ncache:\n  key: \n    files:\n      - package-lock.json\n      - requirements.txt\n      - Dockerfile\n  paths:\n    - node_modules/\n    - .npm/\n    - venv/\n    - .cache/\n  policy: pull-push\n\n# Job-spetsiifiline cache optimeerimine\ntest:unit:\n  cache:\n    key: ${CI_COMMIT_REF_SLUG}-test\n    paths:\n      - test-results/\n      - coverage/\n    policy: pull\n</code></pre> <p>Allikas: Pipeline Performance Optimization</p>"},{"location":"ci_cd_advanced/lecture/#jalgimine-ja-jalgitavus","title":"J\u00e4lgimine ja J\u00e4lgitavus","text":""},{"location":"ci_cd_advanced/lecture/#rakenduse-joudluse-jalgimine","title":"Rakenduse J\u00f5udluse J\u00e4lgimine","text":"YAML<pre><code># Post-deployment j\u00e4lgimine\nmonitor:deployment:\n  stage: monitor\n  image: curlimages/curl:latest\n  script:\n    # Tervise kontrollid\n    - curl -f $DEPLOY_URL/health || exit 1\n    - curl -f $DEPLOY_URL/ready || exit 1\n\n    # J\u00f5udluse kontrollid\n    - response_time=$(curl -o /dev/null -s -w '%{time_total}' $DEPLOY_URL)\n    - if (( $(echo \"$response_time &gt; 2.0\" | bc -l) )); then exit 1; fi\n\n    # Meetrikate valideerimine\n    - curl -f $DEPLOY_URL/metrics | grep -q \"http_requests_total\"\n\n    echo \"K\u00f5ik j\u00e4lgimise kontrollid \u00f5nnestusid\"\n  rules:\n    - if: '$CI_COMMIT_BRANCH == \"main\"'\n  needs:\n    - deploy:staging\n</code></pre>"},{"location":"ci_cd_advanced/lecture/#prometheus-ja-grafana-integratsioon","title":"Prometheus ja Grafana Integratsioon","text":"YAML<pre><code># Meetrikate kogumise t\u00f6\u00f6\ncollect:metrics:\n  stage: monitor\n  image: prom/prometheus:latest\n  script:\n    - promtool check config /etc/prometheus/prometheus.yml\n    - curl -X POST http://prometheus:9090/-/reload\n  variables:\n    PROMETHEUS_URL: \"http://prometheus:9090\"\n</code></pre> <p>Allikas: DevOps Monitoring Best Practices</p>"},{"location":"ci_cd_advanced/lecture/#tulemused-enne-vs-parast-rakendamist","title":"Tulemused: Enne vs P\u00e4rast Rakendamist","text":"N\u00e4itaja Enne (K\u00e4sitsi) P\u00e4rast (Automatiseeritud) Paranemine Deployment Aeg 2-4 tundi 5-10 minutit 95% kiirem Vigade M\u00e4\u00e4r 30-40% 2-5% 85% v\u00e4henemine Rollback Aeg 1-2 tundi 2-5 minutit 95% kiirem Deployment Sagedus 1x n\u00e4dalas 5-10x p\u00e4evas 10x suurenemine Arendajate Stress K\u00f5rge Madal Oluline leevendus Turva Haavatavused K\u00e4sitsi, ebaj\u00e4rjekindel Automatiseeritud skaneerimine 100% katvus Infrastruktuuri Drift Tavaline Elimineeritud 100% j\u00e4rjepidevus Keskmine Taastumisaeg 2-4 tundi 15-30 minutit 90% paranemine <p>Allikas: DevOps Transformation Metrics</p>"},{"location":"ci_cd_advanced/lecture/#production-troubleshooting-advanced-scenarios","title":"Production Troubleshooting: Advanced Scenarios","text":""},{"location":"ci_cd_advanced/lecture/#scenario-1-502-bad-gateway-error","title":"Scenario 1: 502 Bad Gateway Error","text":"Step Command/Action Purpose Pipeline Check <code>gitlab-ci-lint .gitlab-ci.yml</code> Validate CI configuration Container Status <code>docker ps</code>, <code>docker logs techshop-app</code> Check container health Load Balancer <code>kubectl get svc</code>, <code>kubectl describe svc</code> Verify service endpoints Database Connection <code>mysql -h db.techshop.com -u user -p</code> Test database connectivity Network Policies <code>kubectl get networkpolicies</code> Check security rules Resource Limits <code>kubectl top pods</code>, <code>kubectl describe pod</code> Verify resource constraints Solution Update Terraform config, redeploy with Ansible Fix and restore service"},{"location":"ci_cd_advanced/lecture/#scenario-2-performance-degradation","title":"Scenario 2: Performance Degradation","text":"Step Command/Action Purpose Metrics Check <code>curl $PROMETHEUS_URL/api/v1/query?query=response_time</code> Analyze performance metrics Log Analysis <code>kubectl logs -f deployment/techshop-app</code> Identify bottlenecks Resource Usage <code>kubectl top nodes</code>, <code>kubectl top pods</code> Check resource utilization Auto-scaling <code>kubectl get hpa</code>, <code>kubectl describe hpa</code> Verify scaling behavior Database Performance <code>mysql -e \"SHOW PROCESSLIST\"</code> Check database queries Solution Scale resources, optimize queries, update HPA Restore performance"},{"location":"ci_cd_advanced/lecture/#scenario-3-security-incident-response","title":"Scenario 3: Security Incident Response","text":"Step Command/Action Purpose Threat Detection Check security scan reports, SIEM alerts Identify security issues Container Scan <code>trivy image techshop:latest</code> Scan for vulnerabilities Network Analysis <code>kubectl get networkpolicies</code>, <code>kubectl logs</code> Check network traffic Access Review Review RBAC policies, audit logs Verify access controls Incident Response Isolate affected systems, patch vulnerabilities Contain and remediate Post-Incident Update security policies, improve monitoring Prevent future incidents"},{"location":"ci_cd_advanced/lecture/#reaalne-naide-ettevotte-tasemel-cicd-automatiseerimine","title":"Reaalne N\u00e4ide: Ettev\u00f5tte-tasemel CI/CD Automatiseerimine","text":""},{"location":"ci_cd_advanced/lecture/#deployment-machine-null-downtime-auto-healing-susteem","title":"\"Deployment Machine\" - Null-Downtime, Auto-Healing S\u00fcsteem","text":"<p>See on p\u00f5hjalik n\u00e4ide, kuidas \u00fcks ettev\u00f5te ehitas t\u00e4ielikult automatiseeritud, turvalise ja null-downtime deployment s\u00fcsteemi. See n\u00e4itab, kuidas k\u00f5ik edasij\u00f5udnud tehnikad t\u00f6\u00f6tavad koos reaalses keskkonnas.</p> <p>Allikas: The CI/CD Pipeline Upgrade That Took Our Deploys From Stressful to Effortless</p>"},{"location":"ci_cd_advanced/lecture/#probleem-vs-eesmark","title":"Probleem vs Eesm\u00e4rk","text":"<p>Probleem: - Deployment'id olid riskantsed, manuaalsed, \u00f6\u00f6sel tehtavad ja l\u00e4bipaistmatud - K\u00f5rge vigade t\u00f5en\u00e4osus - Pikk taastumisaeg probleemide korral</p> <p>Eesm\u00e4rk: - Kiire ja turvaline tarnimine - Null-downtime release'id - Kohene rollback - Sisseehitatud turvalisus - Rikas j\u00e4lgitavus</p>"},{"location":"ci_cd_advanced/lecture/#10-pohilist-komponenti","title":"10 P\u00f5hilist Komponenti","text":"<p>1. Nutikas Branching ja Kiire Tagasiside</p> YAML<pre><code># EDASIJ\u00d5UDNUD: V\u00e4ikeste muudatuste strateegia\nbranching_strategy:\n  type: \"trunk-based\"\n  max_pr_size: \"300 rida\"\n  required_reviews: 2\n  status_checks:\n    - lint\n    - unit_tests\n    - sast\n    - secrets_scan\n  conventional_commits: true  # feat:, fix: \u2192 automaatne versioneerimine\n</code></pre> <p>2. Supply Chain Turvalisus (CI-sse sisse ehitatud)</p> YAML<pre><code># EDASIJ\u00d5UDNUD: T\u00e4ielik turvalisuse kontroll\nsecurity_pipeline:\n  sbom:\n    tool: \"CycloneDX\"\n    action: \"produce_on_every_build\"\n    attach_as: \"artifact_and_label\"\n\n  image_signing:\n    tool: \"Cosign\"\n    policy: \"only_signed_images_in_cluster\"\n\n  vulnerability_scan:\n    tools: [\"Trivy\", \"Grype\"]\n    fail_on: \"Critical/High\"\n    allowlist: \"time_bound\"\n\n  provenance:\n    tool: \"SLSA_attestation\"\n    store_with: \"image\"\n</code></pre> <p>3. Efemeersed Preview Keskkonnad</p> YAML<pre><code># EDASIJ\u00d5UDNUD: Iga PR jaoks automaatne keskkond\npreview_environments:\n  trigger: \"on_pr_creation\"\n  process:\n    - create_namespace\n    - deploy_with_helm_kustomize\n    - run_smoke_and_contract_tests\n    - post_url_to_pr\n    - auto_destroy_on_close\n  data:\n    seed_with: \"masked_test_data\"\n    disable: \"external_callbacks\"\n</code></pre> <p>4. GitOps CD (Deklaratiivne, Audititav)</p> YAML<pre><code># EDASIJ\u00d5UDNUD: Git kui t\u00f5e allikas\ngitops_setup:\n  repositories:\n    app_repo: \"code\"\n    env_repo: \"manifests\"\n\n  process:\n    ci_updates: \"image_tag_in_env_repo\"\n    argo_cd_syncs: \"clusters_to_env_repo_state\"\n    drift_detection: \"alerts_enabled\"\n\n  rollback: \"git_revert\"\n</code></pre> <p>5. Progressiivne Tarnimine (Argo Rollouts)</p> YAML<pre><code># EDASIJ\u00d5UDNUD: Canary deployment strateegia\nprogressive_delivery:\n  tool: \"Argo_Rollouts\"\n  canary_plan:\n    steps:\n      - \"5% \u2192 pause(5m)\"\n      - \"25% \u2192 pause(10m)\" \n      - \"50% \u2192 pause(10m)\"\n      - \"100%\"\n\n  automated_analysis:\n    metrics_source: \"Prometheus/Datadog\"\n    check_metrics:\n      - \"error_rate_5xx\"\n      - \"p95_latency\"\n      - \"resource_saturation\"\n      - \"business_kpi_checkout_success\"\n\n    promotion_conditions:\n      score: \"\u2265 threshold for N intervals\"\n\n    auto_rollback:\n      trigger: \"error_rate &gt;1% for 2 consecutive intervals\"\n</code></pre> <p>6. Post-Deploy Kvaliteedi V\u00e4ravad</p> YAML<pre><code># EDASIJ\u00d5UDNUD: \"Deploy \u00f5nnestus\" \u2260 \"see on hea\"\npost_deploy_quality:\n  dast:\n    tool: \"ZAP\"\n    environment: \"staging\"\n\n  e2e_tests:\n    tools: [\"Playwright\", \"Cypress\"]\n    type: \"smoke_post_release\"\n\n  load_tests:\n    tool: \"k6\"\n    schedule: \"off_peak\"\n    compare_to: \"SLO_budgets\"\n</code></pre> <p>7. Governance ja Policy-as-Code</p> YAML<pre><code># EDASIJ\u00d5UDNUD: Compliance ilma inimeste ummikute\ngovernance:\n  policy_engines: [\"Kyverno\", \"OPA_Gatekeeper\"]\n\n  rules:\n    - \"enforce_resource_limits_requests\"\n    - \"block_privileged_hostpath\"\n    - \"require_image_signature_sbom_labels\"\n\n  infrastructure:\n    tool: \"Terraform\"\n    cost_analysis: \"Infracost_comments_on_MR\"\n</code></pre> <p>8. Observability Esikohal (OTel + SLOs)</p> YAML<pre><code># EDASIJ\u00d5UDNUD: Kui sa ei n\u00e4e, ei saa \u00f5igeaegselt rollback'ida\nobservability:\n  instrumentation: \"OpenTelemetry\"\n  data_types: [\"traces\", \"metrics\", \"logs\"]\n\n  slos:\n    - \"availability\"\n    - \"latency_p95\"\n    - \"error_rate\"\n    - \"error_budget\"\n\n  release_dashboards:\n    show: \"canary_vs_stable_metrics\"\n    display: \"rollout_step_aca_score\"\n</code></pre> <p>9. Resilientsus ja Andmete Turvalisus</p> YAML<pre><code># EDASIJ\u00d5UDNUD: Enamik \"halbu deploy'e\" on andmeprobleemid\nresilience:\n  db_migrations:\n    pattern: \"expand_contract\"\n    requirement: \"backward_compatible_reads\"\n\n  feature_flags:\n    tools: [\"LaunchDarkly\", \"OpenFeature\"]\n    use_cases: [\"kill_switches\", \"gradual_exposure\"]\n\n  chaos_testing:\n    schedule: \"nightly_smoke_non_prod\"\n    tests: [\"pod_kill\", \"node_drain\"]\n    verify: \"self_heal_works\"\n</code></pre> <p>10. Saladuste ja Juurdep\u00e4\u00e4su Haldus</p> YAML<pre><code># EDASIJ\u00d5UDNUD: V\u00e4him privileeg ja audititavad muudatused\nsecrets_management:\n  workload_identity: \"OIDC_for_CI_to_cluster\"\n  external_secrets: \"AWS_Secrets_Manager_HashiCorp_Vault\"\n  csi_driver: \"secrets_to_pods\"\n  rotation: \"no_long_lived_tokens_in_CI\"\n</code></pre>"},{"location":"ci_cd_advanced/lecture/#konkreetne-roll-forwardrollback-loogika","title":"Konkreetne Roll-Forward/Rollback Loogika","text":"YAML<pre><code># EDASIJ\u00d5UDNUD: Kopeeritav loogika\npromotion_logic:\n  promote_when:\n    - \"last_3_analysis_intervals_pass\"\n    - \"no_paging_alerts\"\n    - \"business_kPI_within_\u00b12%_baseline\"\n\n  rollback_when:\n    - \"error_rate &gt;1% for 2 intervals\"\n    - \"p95 &gt; SLO+20%\"\n    - \"crashloop \u2265 N\"\n\n  freeze:\n    trigger: \"auto_change_freeze_on_incident_SEV-2+\"\n    until: \"postmortem_actions_merged\"\n</code></pre>"},{"location":"ci_cd_advanced/lecture/#tuupilised-probleemid-ja-lahendused","title":"T\u00fc\u00fcpilised Probleemid ja Lahendused","text":"Probleem Lahendus Aeglane CI (&gt;15 min) Jagatud job'id, test maatriks selektiivselt, cache s\u00f5ltuvused, shard testid Ebakindlad testid Karantiin + \u00f6\u00f6sel; \u00e4ra blokeeri release'e teadaolevate flake'ide t\u00f5ttu Policy m\u00fcra Alusta \"audit\" re\u017eiimis; edenda \"enforce\" re\u017eiimi reegli kaupa Canary valepositiivid Pikenda intervalli, stabiliseeri meetrikad, soenda cache'id DB \u00fchildumatus Kohusta tagasi\u00fchilduvaid deploy'e; kui mitte, siis Blue/Green"},{"location":"ci_cd_advanced/lecture/#minimaalne-adoptsiooni-plaan-4-sprinti","title":"Minimaalne Adoptsiooni Plaan (4 Sprint'i)","text":"YAML<pre><code># EDASIJ\u00d5UDNUD: Samm-sammult rakendamine\nsprint_1:\n  focus: \"Harden CI\"\n  tasks:\n    - \"SAST, secrets scan, SBOM, signing\"\n    - \"Target: 10-min CI\"\n\nsprint_2:\n  focus: \"Argo CD + env repo\"\n  tasks:\n    - \"Basic deploys\"\n    - \"SLOs defined\"\n\nsprint_3:\n  focus: \"Argo Rollouts canary\"\n  tasks:\n    - \"Prometheus checks\"\n    - \"Slack notifications\"\n\nsprint_4:\n  focus: \"Policy enforcement\"\n  tasks:\n    - \"Signed images, resources\"\n    - \"Preview envs on PRs\"\n</code></pre>"},{"location":"ci_cd_advanced/lecture/#moodetavad-naitajad-exec-dashboard","title":"M\u00f5\u00f5detavad N\u00e4itajad (Exec Dashboard)","text":"<ul> <li>Lead time for changes - muudatuste aeg</li> <li>Deployment frequency - deployment'ide sagedus  </li> <li>Change failure rate - muudatuste eba\u00f5nnestumise m\u00e4\u00e4r</li> <li>MTTR - keskmine taastumisaeg</li> <li>Error budget burn - vea eelarve p\u00f5letamine</li> <li>% auto-rollbacks vs manual - automaatse vs manuaalse rollback'i suhe</li> <li>Cost per release - kulud release'i kohta</li> </ul> <p>Allikas: Advanced CI/CD Pipeline Case Study</p>"},{"location":"ci_cd_advanced/lecture/#edasijoudnud-automatiseerimise-projektide-struktuur","title":"Edasij\u00f5udnud Automatiseerimise Projektide Struktuur","text":""},{"location":"ci_cd_advanced/lecture/#ettevotte-tasemel-devops-projekt","title":"Ettev\u00f5tte-tasemel DevOps Projekt","text":"<p>Loo p\u00f5hjalik automatiseerimise projekt j\u00e4rgmise ettev\u00f5tte-tasemel struktuuriga:</p> Text Only<pre><code>techshop-enterprise-devops/\n\u251c\u2500\u2500 infrastructure/\n\u2502   \u251c\u2500\u2500 terraform/\n\u2502   \u2502   \u251c\u2500\u2500 environments/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 staging/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 production/\n\u2502   \u2502   \u251c\u2500\u2500 modules/\n\u2502   \u2502   \u2514\u2500\u2500 state/\n\u2502   \u2514\u2500\u2500 ansible/\n\u2502       \u251c\u2500\u2500 playbooks/\n\u2502       \u251c\u2500\u2500 roles/\n\u2502       \u2514\u2500\u2500 inventory/\n\u251c\u2500\u2500 applications/\n\u2502   \u251c\u2500\u2500 frontend/\n\u2502   \u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u2502   \u2514\u2500\u2500 .gitlab-ci.yml\n\u2502   \u251c\u2500\u2500 backend/\n\u2502   \u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u2502   \u2514\u2500\u2500 .gitlab-ci.yml\n\u2502   \u2514\u2500\u2500 shared/\n\u251c\u2500\u2500 ci-cd/\n\u2502   \u251c\u2500\u2500 .gitlab-ci/\n\u2502   \u2502   \u251c\u2500\u2500 build.yml\n\u2502   \u2502   \u251c\u2500\u2500 test.yml\n\u2502   \u2502   \u251c\u2500\u2500 security.yml\n\u2502   \u2502   \u2514\u2500\u2500 deploy.yml\n\u2502   \u2514\u2500\u2500 scripts/\n\u251c\u2500\u2500 monitoring/\n\u2502   \u251c\u2500\u2500 prometheus/\n\u2502   \u251c\u2500\u2500 grafana/\n\u2502   \u2514\u2500\u2500 alertmanager/\n\u251c\u2500\u2500 security/\n\u2502   \u251c\u2500\u2500 policies/\n\u2502   \u251c\u2500\u2500 scans/\n\u2502   \u2514\u2500\u2500 compliance/\n\u251c\u2500\u2500 documentation/\n\u2502   \u251c\u2500\u2500 architecture/\n\u2502   \u251c\u2500\u2500 runbooks/\n\u2502   \u2514\u2500\u2500 troubleshooting/\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"ci_cd_advanced/lecture/#pohilised-automatiseerimise-oskused","title":"P\u00f5hilised Automatiseerimise Oskused","text":"<p>Tehnilised Oskused:</p> <ul> <li>Edasij\u00f5udnud GitLab CI/CD: Mitmeetapilised pipeline'id, paralleelne t\u00e4itmine, turvaskaneerimine</li> <li>Konteineri Orkestreerimine: Docker, Kubernetes, Helm chart'id</li> <li>Infrastruktur Koodina: Terraform, Ansible, CloudFormation</li> <li>Turvalisus: SAST/DAST, haavatavuste skaneerimine, saladuste haldus</li> <li>J\u00e4lgimine: Prometheus, Grafana, ELK stack, APM t\u00f6\u00f6riistad</li> <li>Pilve Platvormid: AWS, Azure, GCP mitme regiooni deployment'idega</li> </ul> <p>Automatiseerimise Kultuur:</p> <ul> <li>DevOps Kultuur: Koost\u00f6\u00f6, automatiseerimise m\u00f5tlemine, pidev parandamine</li> <li>Incident Response: On-call protseduurid, post-mortem anal\u00fc\u00fcs</li> <li>Dokumentatsioon: Tehniline kirjutamine, runbook'id, arhitektuuri diagrammid</li> <li>Juhtimine: Mentoring, teadmiste jagamine, protsesside parandamine</li> </ul>"},{"location":"ci_cd_advanced/lecture/#best-practices-summary","title":"Best Practices Summary","text":""},{"location":"ci_cd_advanced/lecture/#1-security-first-approach","title":"1. Security-First Approach","text":"<ul> <li>Never hardcode secrets in code</li> <li>Implement comprehensive security scanning</li> <li>Use least-privilege access principles</li> <li>Regular security audits and updates</li> </ul>"},{"location":"ci_cd_advanced/lecture/#2-pipeline-optimization","title":"2. Pipeline Optimization","text":"<ul> <li>Use parallel execution where possible</li> <li>Implement intelligent caching strategies</li> <li>Optimize Docker builds with multi-stage builds</li> <li>Monitor pipeline performance metrics</li> </ul>"},{"location":"ci_cd_advanced/lecture/#3-infrastructure-as-code","title":"3. Infrastructure as Code","text":"<ul> <li>Version control all infrastructure</li> <li>Use modular, reusable components</li> <li>Implement proper state management</li> <li>Regular drift detection and remediation</li> </ul>"},{"location":"ci_cd_advanced/lecture/#4-monitoring-observability","title":"4. Monitoring &amp; Observability","text":"<ul> <li>Implement comprehensive logging</li> <li>Set up meaningful alerts and SLIs</li> <li>Use distributed tracing</li> <li>Regular capacity planning</li> </ul>"},{"location":"ci_cd_advanced/lecture/#5-continuous-improvement","title":"5. Continuous Improvement","text":"<ul> <li>Regular retrospectives and post-mortems</li> <li>Measure and track key metrics</li> <li>Automate repetitive tasks</li> <li>Foster a culture of learning</li> </ul>"},{"location":"ci_cd_advanced/lecture/#kokkuvote","title":"Kokkuv\u00f5te","text":"<p>See ettev\u00f5tte-tasemel DevOps automatiseerimise rakendamine toob kaasa:</p> <p>Operatsionaalne T\u00e4iuslikkus:</p> <ul> <li>95% kiiremad deployment'id (4 tundi \u2192 10 minutit)</li> <li>85% v\u00e4hem vigu (40% \u2192 5% eba\u00f5nnestumise m\u00e4\u00e4r)</li> <li>10x sagedamad deployment'id (n\u00e4dalas \u2192 p\u00e4evas)</li> <li>90% kiirem incident response (4 tundi \u2192 30 minutit)</li> </ul> <p>\u00c4ri V\u00e4\u00e4rtus:</p> <ul> <li>V\u00e4hendatud operatsioonikulud automatiseerimise kaudu</li> <li>Parandatud arendajate produktiivsus self-service deployment'idega</li> <li>Tugevdatud turvalisuse positsioon automatiseeritud skaneerimisega</li> <li>Parem kliendi kogemus kiiremate funktsioonide tarnimisega</li> </ul> <p>Automatiseerimise M\u00f5ju:</p> <ul> <li>T\u00e4ielik automatiseerimine k\u00f5igist manuaalsetest protsessidest</li> <li>Pidev parandamine m\u00f5\u00f5detavate meetrikate kaudu</li> <li>Skaleeritav lahendus mis kasvab koos ettev\u00f5ttega</li> <li>Tugev automatiseerimise kultuur meeskonnas</li> </ul> <p>Edu v\u00f5ti on CI/CD pipeline'i k\u00e4sitlemine tootmiskoodina - versiooni kontroll, testi, j\u00e4lgi ja paranda pidevalt. See l\u00e4henemine mitte ainult ei muuda deployment protsessi, vaid loob ka tugeva automatiseerimise aluse ettev\u00f5tte jaoks.</p> <p>Pea meeles: DevOps ei ole ainult t\u00f6\u00f6riistad - see on kultuur, koost\u00f6\u00f6 ja pidev parandamine.</p>"},{"location":"docker_fundamentals/homework/","title":"Docker Kodut\u00f6\u00f6: S\u00fcsteemi Oleku Dashboard","text":"<p>T\u00e4htaeg: J\u00e4rgmise n\u00e4dala alguseks Eesm\u00e4rk: \u00d5ppida Docker ja Podman container'ite kasutamist praktikas  </p> <p>Te saate valmis veebisaidi - keskenduge container tehnoloogiate \u00f5ppimisele!</p>"},{"location":"docker_fundamentals/homework/#ulesanne-1-projekti-ulevaade","title":"\u00dclesanne 1: Projekti \u00fclevaade","text":"<p>Mida see dashboard teeb: - N\u00e4itab container informatsiooni - Kuvab serveri olekut - V\u00f5imaldab testida connectivity - Eristab Docker vs Podman deployment</p> <p>Mida te \u00f5pite: - Docker ja Podman deployment - Environment variables kasutamine - Container networking - docker-compose orchestration</p>"},{"location":"docker_fundamentals/homework/#ulesanne-2-starter-repository-kloneerimine","title":"\u00dclesanne 2: Starter repository kloneerimine","text":""},{"location":"docker_fundamentals/homework/#21-kloonige-kodutoo-starter-repository","title":"2.1: Kloonige kodut\u00f6\u00f6 starter repository","text":"Bash<pre><code># Clone valmis starter repository\ngit clone https://github.com/teacher/docker-dashboard-starter.git\ncd docker-dashboard-starter\n\n# Loo oma branch\ngit checkout -b homework-TEIE-NIMI\n# N\u00e4iteks: git checkout -b homework-maria-talvik\n</code></pre> <p>Mida me saime? - Valmis HTML dashboard - Dockerfile template - docker-compose.yml - nginx.conf konfiguratsioon - README dokumentatsioon</p>"},{"location":"docker_fundamentals/homework/#22-tutvuge-starter-failidega","title":"2.2: Tutvuge starter failidega","text":"<p>Kontrollige, mis failid on olemas: Bash<pre><code>ls -la\n# Peaksite n\u00e4gema:\n# index.html - Dashboard rakendus\n# Dockerfile - Container juhised\n# docker-compose.yml - Multi-container setup\n# nginx.conf - Web server config\n# README.md - Dokumentatsioon\n</code></pre></p>"},{"location":"docker_fundamentals/homework/#23-testage-starter-rakendust","title":"2.3: Testage starter rakendust","text":"Bash<pre><code># Avage index.html otse brauseris (ilma container'ita)\nopen index.html\n# V\u00f5i Linux'is: firefox index.html\n\n# Dashboard peaks avanema ja n\u00e4itama:\n# - S\u00fcsteemi oleku info\n# - Container runtime: \"Unknown\" \n# - Interactive buttons t\u00f6\u00f6tavad\n</code></pre>"},{"location":"docker_fundamentals/homework/#ulesanne-3-docker-container-loomine","title":"\u00dclesanne 3: Docker container loomine","text":""},{"location":"docker_fundamentals/homework/#31-tutvuge-dockerfileiga","title":"3.1: Tutvuge Dockerfile'iga","text":"<p>Vaadake olemas olevat <code>Dockerfile</code> faili: Bash<pre><code>cat Dockerfile\n</code></pre></p> <p>Dockerfile sisu ja selgitus: Docker<pre><code>FROM nginx:alpine              # Kasutame nginx web server'it\nCOPY index.html /usr/share/nginx/html/   # Kopeerime HTML faili\nCOPY nginx.conf /etc/nginx/conf.d/default.conf  # Custom config\nEXPOSE 80                      # Container port 80\n</code></pre></p>"},{"location":"docker_fundamentals/homework/#32-testige-docker-build","title":"3.2: Testige Docker build","text":"Bash<pre><code># Ehitage container image\ndocker build -t my-dashboard .\n\n# Kontrollige, et image on loodud\ndocker images | grep my-dashboard\n</code></pre>"},{"location":"docker_fundamentals/homework/#33-esimene-commit","title":"3.3: Esimene commit","text":"Bash<pre><code># Commit esialgsed muudatused\ngit add .\ngit commit -m \"Alustasin kodut\u00f6\u00f6d: kontrollisin starter failid ja Docker build\"\n\n# Push oma branch GitHub'i\ngit push origin homework-TEIE-NIMI\n</code></pre>"},{"location":"docker_fundamentals/homework/#ulesanne-4-containerite-kaivitamine","title":"\u00dclesanne 4: Container'ite k\u00e4ivitamine","text":""},{"location":"docker_fundamentals/homework/#41-docker-deployment","title":"4.1: Docker deployment","text":"Bash<pre><code># K\u00e4ivitage container\ndocker run -d --name my-docker-app -p 8080:80 my-dashboard\n\n# Kontrollige, et container t\u00f6\u00f6tab\ndocker ps\n\n# Testidige brauseris\necho \"Avage brauser: http://localhost:8080\"\n</code></pre>"},{"location":"docker_fundamentals/homework/#42-podman-deployment","title":"4.2: Podman deployment","text":"Bash<pre><code># Ehitage image Podman'iga\npodman build -t my-dashboard-podman .\n\n# K\u00e4ivitage Podman container\npodman run -d --name my-podman-app -p 8081:80 my-dashboard-podman\n\n# Kontrollige Podman container'eid\npodman ps\n\n# Testidige brauseris\necho \"Avage brauser: http://localhost:8081\"\n</code></pre>"},{"location":"docker_fundamentals/homework/#43-docker-compose-kasutamine","title":"4.3: Docker-compose kasutamine","text":"<p>Looge/kontrollige <code>docker-compose.yml</code> faili: YAML<pre><code>version: '3.8'\n\nservices:\n  dashboard:\n    build: .\n    ports:\n      - \"8080:80\"\n    container_name: compose-dashboard\n</code></pre></p> <p>K\u00e4ivitage docker-compose'iga: Bash<pre><code># Ehitage ja k\u00e4ivitage\ndocker-compose up -d\n\n# Kontrollige\ndocker-compose ps\n\n# Testidige: http://localhost:8080\n</code></pre></p>"},{"location":"docker_fundamentals/homework/#44-commit-deploymenti","title":"4.4: Commit deployment'i","text":"Bash<pre><code>git add docker-compose.yml\ngit commit -m \"Docker ja Podman deployment t\u00f6\u00f6tab - m\u00f5lemad testitud\"\n</code></pre>"},{"location":"docker_fundamentals/homework/#ulesanne-5-containerite-haldamine","title":"\u00dclesanne 5: Container'ite haldamine","text":""},{"location":"docker_fundamentals/homework/#51-containerite-info-vaatamine","title":"5.1: Container'ite info vaatamine","text":"Bash<pre><code># Vaadake k\u00f5iki t\u00f6\u00f6tavaid container'eid\ndocker ps\n\n# Vaadake container'i logisid\ndocker logs my-docker-app\n\n# Sisenege container'isse (debugging)\ndocker exec -it my-docker-app sh\n\n# Container'ist v\u00e4ljumine\nexit\n</code></pre>"},{"location":"docker_fundamentals/homework/#52-containerite-peatamine-ja-cleanup","title":"5.2: Container'ite peatamine ja cleanup","text":"Bash<pre><code># Peatage container\ndocker stop my-docker-app\n\n# Kustutage container\ndocker rm my-docker-app\n\n# V\u00f5i m\u00f5lemat korraga\ndocker rm -f my-docker-app\n</code></pre>"},{"location":"docker_fundamentals/homework/#53-docker-compose-haldamine","title":"5.3: Docker-compose haldamine","text":"Bash<pre><code># Vaadake docker-compose staatust\ndocker-compose ps\n\n# Vaadake logisid\ndocker-compose logs\n\n# Peatage k\u00f5ik teenused\ndocker-compose down\n\n# K\u00e4ivitage uuesti\ndocker-compose up -d\n</code></pre>"},{"location":"docker_fundamentals/homework/#54-ressursside-puhastamine","title":"5.4: Ressursside puhastamine","text":"Bash<pre><code># Vaadake container'ite ressursside kasutust\ndocker stats\n\n# Puhastage unused resources\ndocker system prune -f\n</code></pre>"},{"location":"docker_fundamentals/homework/#ulesanne-6-dokumentatsiooni-taiendamine","title":"\u00dclesanne 6: Dokumentatsiooni t\u00e4iendamine","text":""},{"location":"docker_fundamentals/homework/#61-muutke-readmemd-faili","title":"6.1: Muutke README.md faili","text":"<p>T\u00e4itke README.md oma andmetega: Markdown<pre><code># System Status Dashboard - [TEIE NIMI]\n\n## Mis see on?\nSystem Status Dashboard on veebirakendus, mis n\u00e4itab container informatsiooni.\n\n## Kuidas k\u00e4ivitada?\n\n### Docker'iga:\n```bash\ndocker build -t dashboard .\ndocker run -d -p 8080:80 dashboard\n# Avage: http://localhost:8080\n</code></pre></p>"},{"location":"docker_fundamentals/homework/#podmaniga","title":"Podman'iga:","text":"Bash<pre><code>podman build -t dashboard .\npodman run -d -p 8081:80 dashboard  \n# Avage: http://localhost:8081\n</code></pre>"},{"location":"docker_fundamentals/homework/#docker-composeiga","title":"Docker-compose'iga:","text":"Bash<pre><code>docker-compose up -d\n# Avage: http://localhost:8080\n</code></pre>"},{"location":"docker_fundamentals/homework/#mida-ma-oppisin","title":"Mida ma \u00f5ppisin","text":"<ul> <li>[Teie kogemus 1]</li> <li>[Teie kogemus 2] </li> <li>[Teie kogemus 3]</li> </ul>"},{"location":"docker_fundamentals/homework/#probleemid-ja-lahendused","title":"Probleemid ja lahendused","text":"<p>Probleem: [Kirjeldage probleem] Lahendus: [Kuidas lahendasite] Text Only<pre><code>### 6.2: Screenshot'ide tegemine\n\n**Vajalikud screenshot'id:**\n1. Dashboard t\u00f6\u00f6tab Docker'is: `http://localhost:8080`\n2. Dashboard t\u00f6\u00f6tab Podman'is: `http://localhost:8081`  \n3. Terminal output: `docker ps` ja `podman ps`\n\n**Salvestage `screenshots/` kausta.**\n\n---\n\n## \u00dclesanne 7: L\u00f5plik esitamine\n\n### 7.1: L\u00f5plik commit\n\n```bash\n# Veenduge, et k\u00f5ik on commit'itud\ngit add .\ngit commit -m \"Kodut\u00f6\u00f6 valmis: Docker ja Podman deployment testitud\"\n\n# Push final version\ngit push origin homework-TEIE-NIMI\n</code></pre></p>"},{"location":"docker_fundamentals/homework/#72-pull-request-loomine","title":"7.2: Pull Request loomine","text":"<p>GitHub'is looge Pull Request \u00f5petajale: 1. Minge teacher repository 2. Pull Requests \u2192 New Pull Request 3. Valige oma branch <code>homework-TEIE-NIMI</code></p>"},{"location":"docker_fundamentals/homework/#esitamise-nouded","title":"Esitamise n\u00f5uded","text":""},{"location":"docker_fundamentals/homework/#repository-struktuur","title":"Repository struktuur:","text":"Text Only<pre><code>docker-fundamentals-homework/\n\u251c\u2500\u2500 README.md                    # Projekti kirjeldus\n\u251c\u2500\u2500 index.html                   # Veebisaidi fail\n\u251c\u2500\u2500 Dockerfile                   # Container definitsioon\n\u251c\u2500\u2500 docker-compose.yml           # Multi-container setup\n\u2514\u2500\u2500 screenshots/ (valikuline)    # T\u00f6\u00f6tavate container'ite pildid\n</code></pre>"},{"location":"docker_fundamentals/homework/#esitamine","title":"Esitamine:","text":"<ol> <li>GitHub Pull Request link esitage \u00f5ppetoolis</li> <li>Oma branch: <code>homework-TEIE-NIMI</code></li> <li>T\u00f6\u00f6tav demonstratsioon - \u00f5petaja saab testida</li> </ol>"},{"location":"docker_fundamentals/homework/#hindamiskriteeriumid","title":"Hindamiskriteeriumid:","text":"<ul> <li>\u2705 T\u00f6\u00f6tav Docker deployment</li> <li>\u2705 T\u00f6\u00f6tav Podman deployment  </li> <li>\u2705 docker-compose setup</li> <li>\u2705 Selge dokumentatsioon</li> <li>\u2705 Git commit history n\u00e4itab progressi</li> </ul>"},{"location":"docker_fundamentals/lab/","title":"Docker Fundamentals Lab: Esimesed Sammud","text":""},{"location":"docker_fundamentals/lab/#eesmark-docker-alused-kaed-kuljes","title":"Eesm\u00e4rk: Docker alused k\u00e4ed-k\u00fcljes","text":"<p>T\u00e4na \u00f5pite Docker'i alused praktikas. Keskendume ainult Docker'ile - see on teie esimene kord!</p>"},{"location":"docker_fundamentals/lab/#labi-eesmargid","title":"Lab'i eesm\u00e4rgid","text":"<p>P\u00e4rast seda lab'i oskate: - M\u00f5ista, miks Docker on kiire (kogesite ise) - Ehitada lihtsat rakendust (k\u00e4ed-k\u00fcljes) - Kasutada p\u00f5hilisi Docker k\u00e4ske (praktiliselt) - Lahendada lihtsaid probleeme (troubleshooting)</p>"},{"location":"docker_fundamentals/lab/#lab-1-docker-kiiruse-kogemine","title":"Lab 1: Docker kiiruse kogemine","text":""},{"location":"docker_fundamentals/lab/#11-esimene-docker-kask","title":"1.1: Esimene Docker k\u00e4sk","text":"Bash<pre><code># Teie esimene Docker k\u00e4sk!\ndocker run hello-world\n\n# Mida n\u00e4ete?\n# 1. Docker t\u00f5mbab image\n# 2. Loob container\n# 3. K\u00e4ivitab rakenduse\n# 4. N\u00e4itab tulemust\n</code></pre> <p>Mida juhtus? - Docker otsis \"hello-world\" image'i - Ei leidnud lokaalselt \u2192 t\u00f5mbas internetist - L\u00f5i container'i - K\u00e4ivitas ja n\u00e4itas tervitust</p>"},{"location":"docker_fundamentals/lab/#12-kiiruse-test","title":"1.2: Kiiruse test","text":"Bash<pre><code># Esimene kord (slow - t\u00f5mbab image)\ntime docker run hello-world\n\n# Teine kord (fast - image on juba olemas)\ntime docker run hello-world\n\n# M\u00e4rkige erinevus!\n# Esimene: ~_____ sekundit\n# Teine: ~_____ sekundit\n</code></pre>"},{"location":"docker_fundamentals/lab/#13-pohikasud","title":"1.3: P\u00f5hik\u00e4sud","text":"Bash<pre><code># Mis image'd teil on?\ndocker images\n\n# Mis containers on olnud?\ndocker ps -a\n\n# Palju ruumi Docker kasutab?\ndocker system df\n</code></pre> <p>K\u00fcsimus: Miks \"hello-world\" kestab ainult hetke? Vastus: Container k\u00e4ivitab programmi ja l\u00f5petab - nagu tavaline programm!</p>"},{"location":"docker_fundamentals/lab/#lab-2-veebiserver-dockeris","title":"Lab 2: Veebiserver Docker'is","text":""},{"location":"docker_fundamentals/lab/#21-nginx-veebiserver","title":"2.1: Nginx veebiserver","text":"Bash<pre><code># K\u00e4ivitage nginx web server\ndocker run -d --name my-web -p 8080:80 nginx\n\n# Mida t\u00e4hendavad parameetrid?\n# -d = detached (taustal)\n# --name = anname nimeks \"my-web\"\n# -p 8080:80 = host port 8080 \u2192 container port 80\n# nginx = image nimi\n</code></pre>"},{"location":"docker_fundamentals/lab/#22-testimine","title":"2.2: Testimine","text":"Bash<pre><code># Kontrollige, kas t\u00f6\u00f6tab\ndocker ps\n\n# Testid\ncurl http://localhost:8080\n# V\u00d5I avage brauser: http://localhost:8080\n\n# Kas n\u00e4ete Nginx welcome lehte? \u2705/\u274c\n</code></pre>"},{"location":"docker_fundamentals/lab/#23-containeri-uurimine","title":"2.3: Container'i uurimine","text":"Bash<pre><code># Vaadake loge\ndocker logs my-web\n\n# Sisenege container'isse\ndocker exec -it my-web bash\n\n# Container'i sees:\nls /usr/share/nginx/html/\ncat /usr/share/nginx/html/index.html\n\n# V\u00e4ljuge\nexit\n</code></pre>"},{"location":"docker_fundamentals/lab/#24-cleanup","title":"2.4: Cleanup","text":"Bash<pre><code># Peatage ja kustutage\ndocker stop my-web\ndocker rm my-web\n\n# Kontrollige\ndocker ps -a\n</code></pre>"},{"location":"docker_fundamentals/lab/#lab-3-oma-rakenduse-ehitamine","title":"Lab 3: Oma rakenduse ehitamine","text":""},{"location":"docker_fundamentals/lab/#31-projekti-ettevalmistamine","title":"3.1: Projekti ettevalmistamine","text":"Bash<pre><code>mkdir ~/my-first-docker-app &amp;&amp; cd ~/my-first-docker-app\n</code></pre>"},{"location":"docker_fundamentals/lab/#32-html-rakenduse-loomine","title":"3.2: HTML rakenduse loomine","text":"<p>Looge fail <code>index.html</code>: HTML<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;My Docker App&lt;/title&gt;\n    &lt;style&gt;\n        body { \n            font-family: Arial; \n            text-align: center; \n            margin-top: 100px; \n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n        }\n        .container { \n            background: rgba(255,255,255,0.1); \n            padding: 30px; \n            border-radius: 15px; \n            max-width: 500px;\n            margin: 0 auto;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;h1&gt;My First Docker App!&lt;/h1&gt;\n        &lt;p&gt;Container ID: &lt;span id=\"hostname\"&gt;Loading...&lt;/span&gt;&lt;/p&gt;\n        &lt;p&gt;Current time: &lt;span id=\"time\"&gt;&lt;/span&gt;&lt;/p&gt;\n        &lt;p&gt;Created by: &lt;strong&gt;[TEIE NIMI]&lt;/strong&gt;&lt;/p&gt;\n        &lt;script&gt;\n            document.getElementById('time').innerText = new Date().toLocaleString();\n            // Container hostname on container ID esimesed karakterid\n            document.getElementById('hostname').innerText = window.location.hostname || 'localhost';\n        &lt;/script&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p>"},{"location":"docker_fundamentals/lab/#33-dockerfile-loomine","title":"3.3: Dockerfile loomine","text":"<p>Looge fail <code>Dockerfile</code> (ilma laiendita!): Docker<pre><code># Alusta nginx image'ist\nFROM nginx:alpine\n\n# Kopeeri meie HTML fail nginx kausta\nCOPY index.html /usr/share/nginx/html/\n\n# Ava port 80\nEXPOSE 80\n\n# Nginx k\u00e4ivitub automaatselt\n</code></pre></p>"},{"location":"docker_fundamentals/lab/#34-image-ehitamine","title":"3.4: Image ehitamine","text":"Bash<pre><code># Ehitage oma image\ndocker build -t my-app .\n\n# Kontrollige\ndocker images | grep my-app\n\n# Kas ehitamine \u00f5nnestus? \u2705/\u274c\n</code></pre>"},{"location":"docker_fundamentals/lab/#35-rakenduse-kaivitamine","title":"3.5: Rakenduse k\u00e4ivitamine","text":"Bash<pre><code># K\u00e4ivitage oma rakendus\ndocker run -d --name my-first-app -p 8080:80 my-app\n\n# Test\ncurl http://localhost:8080\n# V\u00d5I brauser: http://localhost:8080\n\n# Kas n\u00e4ete oma lehte? \u2705/\u274c\n</code></pre>"},{"location":"docker_fundamentals/lab/#lab-4-rakenduse-arendamine","title":"Lab 4: Rakenduse arendamine","text":""},{"location":"docker_fundamentals/lab/#41-muudatuste-tegemine","title":"4.1: Muudatuste tegemine","text":"<p>Muutke <code>index.html</code> faili: HTML<pre><code>&lt;!-- Lisa see HTML'i sisse, enne &lt;/div&gt; sulgemist --&gt;\n&lt;p&gt;Version: 2.0 - UPDATED!&lt;/p&gt;\n&lt;p&gt;Lab completed on: &lt;span id=\"date\"&gt;&lt;/span&gt;&lt;/p&gt;\n\n&lt;script&gt;\n// Lisa existing script'i l\u00f5ppu\ndocument.getElementById('date').innerText = new Date().toLocaleDateString();\n&lt;/script&gt;\n</code></pre></p>"},{"location":"docker_fundamentals/lab/#42-uue-versiooni-ehitamine","title":"4.2: Uue versiooni ehitamine","text":"Bash<pre><code># Peatage vana container\ndocker stop my-first-app\ndocker rm my-first-app\n\n# Ehitage uus versioon\ndocker build -t my-app:v2 .\n\n# K\u00e4ivitage uus versioon\ndocker run -d --name my-app-v2 -p 8080:80 my-app:v2\n\n# Test muudatusi\ncurl http://localhost:8080\n# Kas n\u00e4ete \"Version: 2.0\"? \u2705/\u274c\n</code></pre>"},{"location":"docker_fundamentals/lab/#43-imageide-vordlus","title":"4.3: Image'ide v\u00f5rdlus","text":"Bash<pre><code># Vaadake m\u00f5lemat versiooni\ndocker images | grep my-app\n\n# Mitu image't teil on? _______\n# Miks m\u00f5lemad on olemas? _______\n</code></pre>"},{"location":"docker_fundamentals/lab/#lab-5-troubleshooting-harjutus","title":"Lab 5: Troubleshooting harjutus","text":""},{"location":"docker_fundamentals/lab/#51-katki-rakenduse-parandamine","title":"5.1: \"Katki\" rakenduse parandamine","text":"<p>Looge vale <code>Dockerfile-broken</code>: Docker<pre><code>FROM nginx:alpine\nCOPY index.html /wrong/location/\nEXPOSE 80\n</code></pre></p> <p>Proovige seda: Bash<pre><code># Ehitage \"katki\" versioon\ndocker build -f Dockerfile-broken -t broken-app .\n\n# K\u00e4ivitage\ndocker run -d --name broken -p 8081:80 broken-app\n\n# Test\ncurl http://localhost:8081\n# Kas t\u00f6\u00f6tab? \u2705/\u274c\n</code></pre></p>"},{"location":"docker_fundamentals/lab/#52-probleemi-diagnoosimine","title":"5.2: Probleemi diagnoosimine","text":"Bash<pre><code># Vaadake loge\ndocker logs broken\n\n# Minge container'isse\ndocker exec -it broken sh\n\n# Container'i sees uurige:\nls /usr/share/nginx/html/\n# Kas index.html on seal? \u2705/\u274c\n\nls /wrong/location/\n# Kas index.html on siin? \u2705/\u274c\n\nexit\n</code></pre> <p>K\u00fcsimus: Miks ei t\u00f6\u00f6ta? Vastus: _______________________</p>"},{"location":"docker_fundamentals/lab/#53-parandamine","title":"5.3: Parandamine","text":"Bash<pre><code># Parandage Dockerfile (kasutage \u00f5iget teed)\ndocker build -t fixed-app .\ndocker stop broken &amp;&amp; docker rm broken\ndocker run -d --name fixed -p 8081:80 fixed-app\n\n# Test\ncurl http://localhost:8081\n# N\u00fc\u00fcd t\u00f6\u00f6tab? \u2705/\u274c\n</code></pre>"},{"location":"docker_fundamentals/lab/#lab-6-containerite-haldamine","title":"Lab 6: Container'ite haldamine","text":""},{"location":"docker_fundamentals/lab/#61-mitme-containeri-kaivitamine","title":"6.1: Mitme container'i k\u00e4ivitamine","text":"Bash<pre><code># K\u00e4ivitage mitu versiooni korraga\ndocker run -d --name app-v1 -p 8081:80 my-app\ndocker run -d --name app-v2 -p 8082:80 my-app:v2\n\n# Kontrollige\ndocker ps\n\n# Testid\ncurl http://localhost:8081  # v1\ncurl http://localhost:8082  # v2\n</code></pre>"},{"location":"docker_fundamentals/lab/#62-containerite-jalgimine","title":"6.2: Container'ite j\u00e4lgimine","text":"Bash<pre><code># Reaalajas statistika\ndocker stats\n\n# Konkreetse container'i stats\ndocker stats app-v1 --no-stream\n\n# M\u00e4rkige RAM kasutus: _____ MB\n</code></pre>"},{"location":"docker_fundamentals/lab/#63-loplik-cleanup","title":"6.3: L\u00f5plik cleanup","text":"Bash<pre><code># Peatage k\u00f5ik containers\ndocker stop app-v1 app-v2 my-app-v2 fixed\ndocker rm app-v1 app-v2 my-app-v2 fixed\n\n# Kontrollige\ndocker ps -a\n\n# Kustutage kasutamata image'id (valikuline)\ndocker image prune\n</code></pre>"},{"location":"docker_fundamentals/lab/#lab-7-volumeide-tutvustus","title":"Lab 7: Volume'ide tutvustus","text":""},{"location":"docker_fundamentals/lab/#71-andmete-sailitamine","title":"7.1: Andmete s\u00e4ilitamine","text":"Bash<pre><code># Looge volume\ndocker volume create my-data\n\n# K\u00e4ivitage container volume'iga\ndocker run -d --name data-test \\\n    -p 8083:80 \\\n    -v my-data:/usr/share/nginx/html \\\n    nginx:alpine\n\n# Muutke sisu\ndocker exec data-test sh -c 'echo \"&lt;h1&gt;Persistent Data Test&lt;/h1&gt;\" &gt; /usr/share/nginx/html/index.html'\n\n# Test\ncurl http://localhost:8083\n# Kas n\u00e4ete uut sisu? \u2705/\u274c\n</code></pre>"},{"location":"docker_fundamentals/lab/#72-container-restart-test","title":"7.2: Container restart test","text":"Bash<pre><code># H\u00e4vitage container (aga volume j\u00e4\u00e4b!)\ndocker stop data-test &amp;&amp; docker rm data-test\n\n# Looge uus container sama volume'iga\ndocker run -d --name data-test-2 \\\n    -p 8083:80 \\\n    -v my-data:/usr/share/nginx/html \\\n    nginx:alpine\n\n# Test\ncurl http://localhost:8083\n# Kas andmed on alles? \u2705/\u274c\n</code></pre> <p>K\u00fcsimus: Miks andmed j\u00e4id alles? Vastus: _______________________</p>"},{"location":"docker_fundamentals/lab/#labi-kokkuvote","title":"Lab'i kokkuv\u00f5te","text":""},{"location":"docker_fundamentals/lab/#mida-te-oppisite","title":"Mida te \u00f5ppisite:","text":"<p>Docker k\u00e4sud: - <code>docker run</code> - container'i k\u00e4ivitamine - <code>docker build</code> - image'i ehitamine - <code>docker ps</code> - t\u00f6\u00f6tavate container'ite vaatamine - <code>docker logs</code> - logide kontroll - <code>docker exec</code> - container'isse sisenemine</p> <p>Docker kontseptsioonid: - Image vs Container - Port mapping (-p) - Volume'id andmete s\u00e4ilitamiseks - Dockerfile rakenduse kirjeldamiseks</p> <p>Troubleshooting oskused: - Logide lugemine - Container'isse sisenemine - Probleemide diagnoosimine</p>"},{"location":"docker_fundamentals/lab/#jargmised-sammud","title":"J\u00e4rgmised sammud:","text":"<p>Kodut\u00f6\u00f6: S\u00fcsteemi oleku dashboard deployment J\u00e4rgmine lab: Docker Compose multi-container rakendused</p>"},{"location":"docker_fundamentals/lab/#boonusulesanne-kui-aega-jaab","title":"Boonus\u00fclesanne (kui aega j\u00e4\u00e4b)","text":""},{"location":"docker_fundamentals/lab/#podman-alternatiiv","title":"Podman alternatiiv","text":"<p>Kui soovite proovida Docker'i alternatiivi:</p> Bash<pre><code># Installige Podman\nsudo apt update &amp;&amp; sudo apt install -y podman\n\n# Proovige samu k\u00e4ske\npodman run hello-world\npodman run -d --name podman-web -p 8090:80 nginx\n\n# V\u00f5rrelge Docker'iga\ndocker ps\npodman ps\n\n# Cleanup\npodman stop podman-web &amp;&amp; podman rm podman-web\n</code></pre> <p>Peamised erinevused: - Podman = daemon'ita (rootless) - Docker = daemon'iga (vajab docker group) - K\u00e4sud on peaaegu identsed</p> <p>H\u00e4sti tehtud! N\u00fc\u00fcd oskate Docker'i p\u00f5hit\u00f5desid!</p>"},{"location":"docker_fundamentals/lecture/","title":"Docker konteinerite teooria ja praktika","text":"<p>Eelmisel n\u00e4dalal \u00f5ppisime Ansible role'e, kuidas automatiseerida serverite konfiguratsiooni. T\u00e4na astume j\u00e4rgmisesse dimensiooni - konteinerite maailma. Kui Ansible aitab hallata olemasolevaid servereid, siis Docker muudab selle, kuidas me rakendusi \u00fcldse ehitame ja jooksutame.</p> <p>M\u00f5tle konteineritele kui LEGO klotside s\u00fcsteemile - iga konteiner on \u00fcks klots, mis saab kiiresti kokku panna suuremateks rakendusteks. Aga erinevalt LEGO-st, need \"klotsid\" sisaldavad terveid rakendusi ja jooksevad igal arvutil t\u00e4pselt \u00fchesuguselt.</p>"},{"location":"docker_fundamentals/lecture/#mis-on-docker-ja-miks-seda-vaja","title":"Mis on Docker ja miks seda vaja","text":"<p>Docker on t\u00f6\u00f6riist konteinerite loomiseks ja haldamiseks. Aga mis need konteinerid siis on ja miks nad paremad on kui traditsioonilised lahendused?</p> <p>P\u00f5hiline probleem, mida Docker lahendab, on kuulus \"t\u00f6\u00f6tab mu masinas\" s\u00fcndroom. Sa ehitad rakenduse oma laptopil, see t\u00f6\u00f6tab suurep\u00e4raselt. Liigutad serverisse - ei t\u00f6\u00f6ta. Kolleeg \u00fcritab k\u00e4ivitada oma masinas - ei t\u00f6\u00f6ta. Probleem pole sinus ega sinu koodis, vaid selles, et erinevates keskkondades on erinevad versioonid, s\u00f5ltuvused ja konfiguratsioonid.</p> <p>Docker v\u00f5imaldab sul pakkida rakenduse koos k\u00f5igi s\u00f5ltuvustega \u00fchte \"kasti\" ehk konteinerisse, mis t\u00f6\u00f6tab igal arvutil t\u00e4pselt \u00fchesuguselt. See konteiner sisaldab k\u00f5ike vajalikku: operatsioonis\u00fcsteemi osi, runtime'i, teeke, s\u00f5ltuvusi ja sinu rakendust ennast.</p>"},{"location":"docker_fundamentals/lecture/#pohilised-moisted","title":"P\u00f5hilised m\u00f5isted","text":"<p>Enne kui edasi liikume, pead m\u00f5istma nelja p\u00f5hilist m\u00f5istet:</p> <p>Image on mall konteineri jaoks, nagu CD-ROM v\u00f5i programmi installer. See sisaldab k\u00f5ike vajalikku: operatsioonis\u00fcsteemi osi, rakendust ja k\u00f5iki s\u00f5ltuvusi. Image on muutumatu - kui sa teed sinna muudatusi, loodi tegelikult uus image.</p> <p>Container on k\u00e4ivitatud image, nagu programm, mis jookseb su arvutis. Container elab ja t\u00f6\u00f6tab, teda saab peatada, taask\u00e4ivitada v\u00f5i kustutada. Iga kord kui k\u00e4ivitad sama image'i, saad uue konteineri.</p> <p>Dockerfile on tekstifail, mis sisaldab retsepti image'i loomiseks. See kirjeldab samm-sammult, kuidas image ehitada: millist base image'i kasutada, millised failid kopeerida, millised k\u00e4sud k\u00e4ivitada.</p> <p>Registry on pood image'ite jaoks, nagu App Store nutitelefonile. K\u00f5ige populaarsem on Docker Hub, kus leidub tuhandeid valmis image'e k\u00f5ikv\u00f5imalike rakenduste jaoks.</p>"},{"location":"docker_fundamentals/lecture/#konteinerid-versus-virtuaalmasinad","title":"Konteinerid versus virtuaalmasinad","text":"<p>Et m\u00f5ista, miks konteinerid on revolutsiooniline, vaatame, kuidas server infrastruktuur on aastate jooksul arenenud.</p>"},{"location":"docker_fundamentals/lecture/#tehnoloogia-evolutsioon","title":"Tehnoloogia evolutsioon","text":"<p>F\u00fc\u00fcsiliste serverite ajastul (kuni 2000. aastate algus) t\u00e4hendas \u00fcks rakendus \u00fcht serverit. See oli kallis ja ebaefektiivne - enamik servereid kasutasid ainult 5-15% oma v\u00f5imsusest, aga maksma pidid t\u00e4ishinnaga.</p> <p>Virtuaalmasinad (2000-2010) lahendasid osa probleemist. \u00dcks v\u00f5imas server sai majutada mitu virtuaalmasinat, iga\u00fcks oma operatsioonis\u00fcsteemiga. Aga iga virtuaalmasin vajab t\u00e4ispikka operatsioonis\u00fcsteemi, mis t\u00e4hendab 1-2GB m\u00e4lukasutust ja 20GB kettaruumi isegi lihtsa rakenduse jaoks.</p> <p>Konteinerid (alates 2013) viisid efektiivsuse j\u00e4rgmisele tasemele. Erinevalt virtuaalmasinadest jagavad k\u00f5ik konteinerid sama operatsioonis\u00fcsteemi kerneli. See t\u00e4hendab, et \u00fcks konteiner kasutab ainult 10-100MB m\u00e4lu ja k\u00e4ivitub sekundite jooksul.</p>"},{"location":"docker_fundamentals/lecture/#praktiline-erinevus","title":"Praktiline erinevus","text":"<p>Virtuaalmasin on nagu terve eraldi korter - seal on oma k\u00f6\u00f6k, vannituba, elekter, k\u00f5ik. Iga korter on t\u00e4iesti eraldatud, aga ka ressursimahukas.</p> <p>Konteiner on nagu tuba jagatud korteris - sa jagad k\u00f6\u00f6ki ja vannituba (operatsioonis\u00fcsteemi kerneli), aga sinu tuba (rakendus) on t\u00e4iesti privaatne. See on palju efektiivsem.</p> <p>Numbrites v\u00e4ljendub see drastilises erinevuses:</p> Kriteerium Virtuaalmasinad Konteinerid K\u00e4ivitusaeg 1-2 minutit 1-5 sekundit M\u00e4lukasutus 1-8GB 10-100MB Mahtuvus serveris 10-50 100-1000 Kettaruumi vajadus 10-50GB 100MB-1GB"},{"location":"docker_fundamentals/lecture/#millal-kasutada-mida","title":"Millal kasutada mida","text":"<p>Virtuaalmasinad on endiselt \u00f5iged valik, kui vajad erinevaid operatsioonis\u00fcsteeme samal serveril, maksimaalset turvalist eraldatust v\u00f5i t\u00f6\u00f6tad legacy s\u00fcsteemidega, mis pole konteineri jaoks sobivad.</p> <p>Konteinerid on ideaalsed kaasaegsete veebirakenduste, mikroteenuste arhitektuuri, arendus- ja testimiskeskkondade ning kiire deployment'i jaoks.</p>"},{"location":"docker_fundamentals/lecture/#dockeri-installimine-ja-seadistamine","title":"Docker'i installimine ja seadistamine","text":"<p>Docker'i installimine Ubuntu v\u00f5i Debian s\u00fcsteemis k\u00e4ib mitmeastmeliselt, sest tahame kasutada ametlikku Docker'i repositooriumit, mitte distributsiooniga kaasas olevat aegunud versiooni.</p> <p>K\u00f5igepealt uuenda pakettide nimistut ja installi vajalikud eeldused:</p> Bash<pre><code>sudo apt update\nsudo apt install -y apt-transport-https ca-certificates curl gnupg lsb-release\n</code></pre> <p>Lisa Docker'i ametlik GPG v\u00f5ti ja repositoorium:</p> Bash<pre><code>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n\necho \"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n</code></pre> <p>N\u00fc\u00fcd saad installida Docker'i:</p> Bash<pre><code>sudo apt update\nsudo apt install -y docker-ce docker-ce-cli containerd.io\n</code></pre> <p>K\u00e4ivita Docker'i teenus ja seadista see automaatselt k\u00e4ivituma:</p> Bash<pre><code>sudo systemctl start docker\nsudo systemctl enable docker\n</code></pre> <p>Viimane samm on lisada oma kasutaja docker gruppi, et sa ei peaks pidevalt sudo kasutama:</p> Bash<pre><code>sudo usermod -aG docker $USER\n</code></pre> <p>P\u00e4rast seda pead v\u00e4lja logima ja tagasi sisse logima, v\u00f5i k\u00e4ivitama <code>newgrp docker</code> k\u00e4su.</p> <p>Testi installatsiooni:</p> Bash<pre><code>docker --version\ndocker run hello-world\n</code></pre> <p>Viimane k\u00e4sk laadib v\u00e4ikese testi image'i ja k\u00e4ivitab selle. Kui n\u00e4ed tervituss\u00f5numit, on Docker edukalt installitud.</p>"},{"location":"docker_fundamentals/lecture/#dockeri-kasurea-pohialused","title":"Docker'i k\u00e4surea p\u00f5hialused","text":"<p>Docker'i k\u00e4surea s\u00fcntaks j\u00e4rgib lihtsat mustrit: <code>docker [VALIKUD] K\u00c4SK [ARGUMENDID]</code>. K\u00f5ik Docker'i funktsioonid on k\u00e4ttesaadavad alamk\u00e4skude kaudu.</p>"},{"location":"docker_fundamentals/lecture/#imageide-haldamine","title":"Image'ide haldamine","text":"<p>Image'ide allalaadimine k\u00e4ib <code>pull</code> k\u00e4suga:</p> Bash<pre><code>docker pull nginx             # Viimane versioon\ndocker pull nginx:1.21        # Konkreetne versioon\ndocker pull ubuntu:20.04      # Erinevad operatsioonis\u00fcsteemid\n</code></pre> <p>Lokaalse image'ide vaatamiseks kasuta:</p> Bash<pre><code>docker images                 # K\u00f5ik lokaalsed image'id\ndocker search mysql           # Otsi Docker Hub'ist\n</code></pre> <p>Kasutamata image'ide kustutamiseks:</p> Bash<pre><code>docker rmi nginx              # Kustuta konkreetne image\ndocker image prune            # Kustuta k\u00f5ik kasutamata image'id\n</code></pre>"},{"location":"docker_fundamentals/lecture/#konteinerite-kaivitamine","title":"Konteinerite k\u00e4ivitamine","text":"<p>Lihtsaim viis konteineri k\u00e4ivitamiseks:</p> Bash<pre><code>docker run nginx\n</code></pre> <p>See k\u00e4sk laadib nginx image'i (kui see veel masinas pole), loob sellest konteineri ja k\u00e4ivitab selle. Probleem on see, et k\u00e4sk blokeerib terminali.</p> <p>Praktilisemad variandid:</p> Bash<pre><code>docker run -d nginx                 # K\u00e4ivita taustaal (detached)\ndocker run --name my-web nginx     # Anna konteinerile nimi\ndocker run -p 8080:80 nginx        # \u00dchenda port 8080 konteineri port 80-ga\n</code></pre> <p>Interaktiivse konteineri jaoks, n\u00e4iteks kui tahad Ubuntu'ga katsetada:</p> Bash<pre><code>docker run -it ubuntu bash         # Interaktiivne terminal\n</code></pre> <p>K\u00e4ivitatud konteineris k\u00e4su jooksutamiseks:</p> Bash<pre><code>docker exec -it container_name bash # \u00dchenda k\u00e4ivitatud konteinerisse\n</code></pre>"},{"location":"docker_fundamentals/lecture/#konteinerite-jalgimine-ja-haldamine","title":"Konteinerite j\u00e4lgimine ja haldamine","text":"<p>Vaata, millised konteinerid t\u00f6\u00f6tavad:</p> Bash<pre><code>docker ps                     # T\u00f6\u00f6tavad konteinerid\ndocker ps -a                  # K\u00f5ik konteinerid (ka peatatud)\n</code></pre> <p>Konteineri logide vaatamiseks:</p> Bash<pre><code>docker logs container_name    # N\u00e4ita loge\ndocker logs -f container_name # J\u00e4lgi loge reaalajas\n</code></pre> <p>Konteineri eluts\u00fckli haldamine:</p> Bash<pre><code>docker start container_name   # K\u00e4ivita peatatud konteiner\ndocker stop container_name    # Peata konteiner\ndocker restart container_name # Taask\u00e4ivita\ndocker rm container_name      # Kustuta konteiner\n</code></pre>"},{"location":"docker_fundamentals/lecture/#praktiline-naide","title":"Praktiline n\u00e4ide","text":"<p>Vaatame, kuidas k\u00e4ivitada lihtne veebiserver:</p> Bash<pre><code># K\u00e4ivita Nginx konteiner\ndocker run -d --name my-web -p 8080:80 nginx\n\n# Testi brauseris v\u00f5i curl'iga\ncurl http://localhost:8080\n\n# Vaata konteineri loge\ndocker logs my-web\n\n# Peata ja kustuta\ndocker stop my-web\ndocker rm my-web\n</code></pre>"},{"location":"docker_fundamentals/lecture/#dockerfile-rakenda-konteineri-retsept","title":"Dockerfile - rakenda konteineri retsept","text":"<p>Dockerfile on tekstifail, mis sisaldab juhiseid Docker'ile, kuidas ehitada image sinu rakenduse jaoks. See on nagu retsept, mis kirjeldab k\u00f5ik vajalikud sammud.</p>"},{"location":"docker_fundamentals/lecture/#pohilised-juhised","title":"P\u00f5hilised juhised","text":"<p>FROM m\u00e4\u00e4rab base image'i, millelt hakata ehitama:</p> Docker<pre><code>FROM nginx:alpine           # V\u00e4ike ja kiire\nFROM python:3.9             # Python runtime\nFROM node:16                # Node.js runtime\n</code></pre> <p>Tootmises kasuta alati konkreetseid versioone:</p> Docker<pre><code>FROM node:16.14.2-alpine    # T\u00e4pne versioon, mitte \"latest\"\n</code></pre> <p>WORKDIR m\u00e4\u00e4rab t\u00f6\u00f6katalogi konteineris:</p> Docker<pre><code>WORKDIR /app                # K\u00f5ik j\u00e4rgnevad k\u00e4sud tehakse siin\n</code></pre> <p>COPY kopeerib faile host s\u00fcsteemist konteinerisse:</p> Docker<pre><code>COPY app.py /app/           # \u00dcks fail\nCOPY src/ /app/src/         # Terve kaust\nCOPY . /app/                # K\u00f5ik praegusest kaustast\n</code></pre> <p>RUN k\u00e4ivitab k\u00e4su image'i ehitamise ajal:</p> Docker<pre><code>RUN apt-get update &amp;&amp; apt-get install -y curl\nRUN pip install -r requirements.txt\n</code></pre> <p>CMD m\u00e4\u00e4rab vaikimisi k\u00e4su, mis k\u00e4ivitatakse konteineri k\u00e4ivitamisel:</p> Docker<pre><code>CMD [\"python\", \"app.py\"]\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n</code></pre>"},{"location":"docker_fundamentals/lecture/#praktiline-naide-python-rakendus","title":"Praktiline n\u00e4ide: Python rakendus","text":"<p>Loome lihtsa Flask rakenduse ja pakime selle konteinerisse.</p> <p>Loo fail <code>app.py</code>:</p> Python<pre><code>from flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    return '&lt;h1&gt;Tere Docker'i maailmast!&lt;/h1&gt;'\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\n</code></pre> <p>Loo fail <code>requirements.txt</code>:</p> Text Only<pre><code>Flask==2.3.2\n</code></pre> <p>Loo <code>Dockerfile</code>:</p> Docker<pre><code>FROM python:3.9-slim\n\nWORKDIR /app\n\n# Kopeeri s\u00f5ltuvuste fail esimesena (cache optimeerimiseks)\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\n# Kopeeri rakenduse kood viimasena\nCOPY app.py .\n\nEXPOSE 5000\nCMD [\"python\", \"app.py\"]\n</code></pre> <p>Ehita ja k\u00e4ivita:</p> Bash<pre><code># Ehita image\ndocker build -t my-python-app .\n\n# K\u00e4ivita konteiner\ndocker run -d --name flask-app -p 5000:5000 my-python-app\n\n# Testi\ncurl http://localhost:5000\n</code></pre>"},{"location":"docker_fundamentals/lecture/#dockerignore-fail","title":".dockerignore fail","text":"<p>Nagu <code>.gitignore</code>, aitab <code>.dockerignore</code> hoida image'ist v\u00e4lja faile, mida pole vaja:</p> Text Only<pre><code>__pycache__\n*.pyc\n.git\nREADME.md\n.env\nnode_modules\n</code></pre>"},{"location":"docker_fundamentals/lecture/#andmete-sailitamine-volumeidega","title":"Andmete s\u00e4ilitamine volume'idega","text":"<p>Vaikimisi kaotad k\u00f5ik andmed, kui konteineri kustutad. See on hea isolatsiooni jaoks, aga halb andmebaasidele v\u00f5i failide s\u00e4ilitamiseks.</p>"},{"location":"docker_fundamentals/lecture/#named-volumeid","title":"Named volume'id","text":"<p>Volume'id on Docker'i viis andmete s\u00e4ilitamiseks v\u00e4ljaspool konteinerit:</p> Bash<pre><code># Loo volume\ndocker volume create mydata\n\n# Kasuta volume'i\ndocker run -d \\\n  --name database \\\n  -v mydata:/var/lib/mysql \\\n  mysql:8.0\n\n# Volume info\ndocker volume ls\ndocker volume inspect mydata\n</code></pre>"},{"location":"docker_fundamentals/lecture/#bind-mountid","title":"Bind mount'id","text":"<p>Vahel tahad otse host s\u00fcsteemi kausta konteinerisse \u00fchendada:</p> Bash<pre><code># \u00dchenda host'i kaust konteinerisse\ndocker run -d \\\n  --name web \\\n  -v /home/kasutaja/veebisait:/usr/share/nginx/html \\\n  nginx\n\n# Muudatused host'is on kohe n\u00e4htavad konteineris\necho \"&lt;h1&gt;Tere!&lt;/h1&gt;\" &gt; /home/kasutaja/veebisait/index.html\ncurl http://localhost  # Uus sisu on kohe n\u00e4htav\n</code></pre>"},{"location":"docker_fundamentals/lecture/#dockerfilei-optimeerimine","title":"Dockerfile'i optimeerimine","text":"<p>Dockeri \u00fcks v\u00f5imsaimaid omadusi on ka selle suurim l\u00f5ks algajatele. Docker ehitab image'i kihtide kaupa ja cache'ib neid. Kui muudad \u00fchte rida Dockerfile'is, siis k\u00f5ik j\u00e4rgnevad kihid ehitatakse uuesti.</p>"},{"location":"docker_fundamentals/lecture/#kihtide-cacheimise-probleem","title":"Kihtide cache'imise probleem","text":"<p>Vaatame t\u00fc\u00fcpilist viga Node.js rakenduse puhul:</p> Docker<pre><code>FROM node:16\nCOPY . /app/          # Kogu kood kopeeritakse kohe\nWORKDIR /app\nRUN npm install      # S\u00f5ltuvused installib uuesti iga koodimuudatuse puhul\nCMD [\"npm\", \"start\"]\n</code></pre> <p>Optimeeritud versioon:</p> Docker<pre><code>FROM node:16\nWORKDIR /app\n\n# Kopeeri ainult s\u00f5ltuvuste failid\nCOPY package*.json ./\nRUN npm install\n\n# Kopeeri l\u00e4htekood alles p\u00e4rast s\u00f5ltuvuste installimist\nCOPY . .\nCMD [\"npm\", \"start\"]\n</code></pre>"},{"location":"docker_fundamentals/lecture/#run-kaskude-optimeerimine","title":"RUN k\u00e4skude optimeerimine","text":"<p>Docker loob iga RUN k\u00e4su jaoks eraldi kihi. Vale l\u00e4henemine:</p> Docker<pre><code>RUN apt-get update\nRUN apt-get install -y curl\nRUN apt-get clean\n</code></pre> <p>\u00d5ige l\u00e4henemine:</p> Docker<pre><code>RUN apt-get update &amp;&amp; \\\n    apt-get install -y curl &amp;&amp; \\\n    apt-get clean &amp;&amp; \\\n    rm -rf /var/lib/apt/lists/*\n</code></pre>"},{"location":"docker_fundamentals/lecture/#cmd-ja-entrypoint-erinevus","title":"CMD ja ENTRYPOINT erinevus","text":"<p>CMD m\u00e4\u00e4rab vaikimisi k\u00e4su, mida saab k\u00e4ivitamisel \u00fcle kirjutada:</p> Docker<pre><code>CMD [\"python\", \"app.py\"]\n</code></pre> <p>ENTRYPOINT m\u00e4\u00e4rab k\u00e4su, mis k\u00e4ivitatakse alati:</p> Docker<pre><code>ENTRYPOINT [\"python\", \"app.py\"]\n</code></pre> <p>Parim praktika on kasutada neid koos:</p> Docker<pre><code>ENTRYPOINT [\"python\", \"app.py\"]\nCMD [\"--help\"]\n</code></pre>"},{"location":"docker_fundamentals/lecture/#mitmestaadilised-ehitused","title":"Mitmestaadilised ehitused","text":""},{"location":"docker_fundamentals/lecture/#probleem-ehitustooriistad-tootmises","title":"Probleem: ehitust\u00f6\u00f6riistad tootmises","text":"<p>T\u00fc\u00fcpiline Node.js rakendus vajab ehitamiseks palju t\u00f6\u00f6riistu, aga tootmises pole neid vaja.</p> <p>Traditsioonilise l\u00e4henemisega:</p> Docker<pre><code>FROM node:16\nWORKDIR /app\nCOPY package*.json ./\nRUN npm install        # Kaasa arvatud arenduss\u00f5ltuvused!\nCOPY . .\nRUN npm run build\nCMD [\"npm\", \"start\"]\n</code></pre> <p>Mitmestaadilise ehitusega:</p> Docker<pre><code># Esimene staadium: ehitamine\nFROM node:16 AS builder\nWORKDIR /app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nRUN npm run build\n\n# Teine staadium: tootmine\nFROM node:16-alpine\nWORKDIR /app\nCOPY package*.json ./\nRUN npm install --only=production\nCOPY --from=builder /app/dist ./dist\nCMD [\"npm\", \"start\"]\n</code></pre> <p>Tulemus on 80% v\u00e4iksem image.</p>"},{"location":"docker_fundamentals/lecture/#aarmuslik-optimeerimine","title":"\u00c4\u00e4rmuslik optimeerimine","text":"<p>Go keele puhul:</p> Docker<pre><code># Ehitusstaadium\nFROM golang:1.19-alpine AS builder\nWORKDIR /app\nCOPY . .\nRUN CGO_ENABLED=0 go build -o app\n\n# K\u00e4itamisstaadium\nFROM scratch  # T\u00e4iesti t\u00fchi image!\nCOPY --from=builder /app/app /app\nEXPOSE 8080\nCMD [\"/app\"]\n</code></pre> <p>L\u00f5pptulemus: ainult 5MB suurune image!</p>"},{"location":"docker_fundamentals/lecture/#turvalisuse-pohitoed","title":"Turvalisuse p\u00f5hit\u00f5ed","text":""},{"location":"docker_fundamentals/lecture/#mitte-root-kasutaja","title":"Mitte-root kasutaja","text":"<p>Vaikimisi k\u00e4ivituvad Docker konteinerid root kasutajana:</p> Docker<pre><code># Kasuta konkreetseid versioone\nFROM node:16.14.2-alpine\n\n# Loo spetsiaalne kasutaja\nRUN addgroup -g 1001 -S appuser &amp;&amp; \\\n    adduser -S appuser -u 1001\n\n# L\u00fclitu sellele kasutajale\nUSER appuser\n\n# Kopeeri failid \u00f5ige omanikuga\nCOPY --chown=appuser:appuser . .\n</code></pre>"},{"location":"docker_fundamentals/lecture/#minimalistlik-lahenemine","title":"Minimalistlik l\u00e4henemine","text":"<p>Alpine Linux on populaarne valik:</p> Docker<pre><code>FROM python:3.9-alpine  # ~50MB vs python:3.9 ~900MB\n</code></pre>"},{"location":"docker_fundamentals/lecture/#tervisecontrollid","title":"Tervisecontrollid","text":"Docker<pre><code>HEALTHCHECK --interval=30s --timeout=10s \\\n    CMD curl -f http://localhost:5000/health || exit 1\n</code></pre>"},{"location":"docker_fundamentals/lecture/#dockeri-vorgustik","title":"Docker'i v\u00f5rgustik","text":""},{"location":"docker_fundamentals/lecture/#vaikimisi-vorgu-probleem","title":"Vaikimisi v\u00f5rgu probleem","text":"<p>Docker'i vaikimisi k\u00e4itumine t\u00f6\u00f6tab ainult IP aadresside kaudu:</p> Bash<pre><code>docker run -d --name web1 nginx\ndocker run -d --name web2 nginx\n\n# T\u00f6\u00f6tab\ndocker exec web1 ping 172.17.0.3\n\n# Ei t\u00f6\u00f6ta\ndocker exec web1 ping web2\n</code></pre>"},{"location":"docker_fundamentals/lecture/#kohandatud-vorgud","title":"Kohandatud v\u00f5rgud","text":"<p>Lahendus on luua kohandatud v\u00f5rk:</p> Bash<pre><code># Loo rakendusespetsiifiline v\u00f5rk\ndocker network create myapp-network\n\n# K\u00e4ivita konteinerid selles v\u00f5rgus\ndocker run -d --name web --network myapp-network nginx\ndocker run -d --name api --network myapp-network python:3.9\n\n# N\u00fc\u00fcd t\u00f6\u00f6tab nimede lahendamine\ndocker exec web ping api          # T\u00f6\u00f6tab!\n</code></pre>"},{"location":"docker_fundamentals/lecture/#kolmekihiline-rakendus","title":"Kolmekihiline rakendus","text":"Bash<pre><code># Loo kaks v\u00f5rku\ndocker network create frontend   # Veeb \u2194 API\ndocker network create backend    # API \u2194 Andmebaas\n\n# Andmebaas (ainult backend v\u00f5rgus)\ndocker run -d --name db \\\n  --network backend \\\n  -e POSTGRES_PASSWORD=secret \\\n  postgres:13\n\n# API (m\u00f5lemas v\u00f5rgus)\ndocker run -d --name api \\\n  --network backend \\\n  python:3.9\ndocker network connect frontend api\n\n# Veebiserver (ainult frontend v\u00f5rgus)\ndocker run -d --name web \\\n  --network frontend \\\n  -p 80:80 \\\n  nginx\n</code></pre>"},{"location":"docker_fundamentals/lecture/#podman-kui-dockeri-alternatiiv","title":"Podman kui Docker'i alternatiiv","text":"<p>Podman on Red Hat'i poolt arendatud Docker'i alternatiiv, mis lahendab mitu turvaprobleemi.</p>"},{"location":"docker_fundamentals/lecture/#arhitektuuri-erinevus","title":"Arhitektuuri erinevus","text":"<p>Docker t\u00f6\u00f6tab klient-server mudelis:</p> Text Only<pre><code>Sa \u2192 Docker klient \u2192 Docker daemon \u2192 Konteiner\n                           \u2191\n                    Alati t\u00f6\u00f6tab kui root\n</code></pre> <p>Podman'is pole daemon'it:</p> Text Only<pre><code>Sa \u2192 Podman \u2192 Konteiner\n       \u2191\n   Otsene k\u00e4ivitamine\n</code></pre>"},{"location":"docker_fundamentals/lecture/#peamised-erinevused","title":"Peamised erinevused","text":"Aspekt Docker Podman Daemon Vajab dockerd Ei vaja daemon'it Root \u00f5igused Vajab root \u00f5igusi T\u00f6\u00f6tab tavalise kasutajana K\u00e4ivitamine Daemon peab t\u00f6\u00f6tama Kohe kasutamisvalmis Turvalisus docker grupp = root Tavaline kasutaja"},{"location":"docker_fundamentals/lecture/#kasud-on-peaaegu-identset","title":"K\u00e4sud on peaaegu identset","text":"Bash<pre><code># Docker                 \u2192    Podman\ndocker pull nginx       \u2192    podman pull nginx\ndocker run -d nginx     \u2192    podman run -d nginx\ndocker ps               \u2192    podman ps\ndocker logs name        \u2192    podman logs name\n</code></pre> <p>Saad isegi teha alias'e:</p> Bash<pre><code>alias docker=podman\n</code></pre>"},{"location":"docker_fundamentals/lecture/#levinumad-vead","title":"Levinumad vead","text":""},{"location":"docker_fundamentals/lecture/#aegunud-pakettide-cache","title":"Aegunud pakettide cache","text":"Docker<pre><code># Vale\nRUN apt-get update\nRUN apt-get install -y curl\n\n# \u00d5ige\nRUN apt-get update &amp;&amp; apt-get install -y curl\n</code></pre>"},{"location":"docker_fundamentals/lecture/#root-kasutaja-probleem","title":"Root kasutaja probleem","text":"Docker<pre><code># Vale\nFROM ubuntu\nCOPY app /app\nCMD [\"/app\"]  # K\u00e4ivitub root kasutajana\n\n# \u00d5ige\nFROM ubuntu\nRUN useradd -m appuser\nUSER appuser\nCOPY app /app\nCMD [\"/app\"]\n</code></pre>"},{"location":"docker_fundamentals/lecture/#liiga-suured-imageid","title":"Liiga suured image'id","text":"Docker<pre><code># Vale\nFROM ubuntu:latest  # ~72MB + k\u00f5ik t\u00f6\u00f6riistad\n\n# \u00d5ige\nFROM python:3.9-alpine  # ~45MB + Python juba sees\n</code></pre>"},{"location":"docker_fundamentals/lecture/#praktiline-naide-optimeeritud-flask-rakendus","title":"Praktiline n\u00e4ide: optimeeritud Flask rakendus","text":"<p>Vaatame, kuidas k\u00f5ik p\u00f5him\u00f5tted t\u00f6\u00f6tavad koos:</p> <p>requirements.txt: Text Only<pre><code>Flask==2.3.2\ngunicorn==21.2.0\n</code></pre></p> <p>app.py: Python<pre><code>from flask import Flask, jsonify\nimport os\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    env = os.getenv(\"NODE_ENV\", \"unknown\")\n    return f'&lt;h1&gt;Tere, {env} keskkonnas!&lt;/h1&gt;'\n\n@app.route('/health')\ndef health():\n    return jsonify({\"status\": \"healthy\"})\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\n</code></pre></p> <p>Optimeeritud Dockerfile: Docker<pre><code># Mitmestaadline ehitus\nFROM python:3.9-slim AS builder\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install --user -r requirements.txt\n\n# Tootmisstaadium\nFROM python:3.9-slim\nWORKDIR /app\n\n# Mitte-root kasutaja\nRUN groupadd -r appuser &amp;&amp; useradd -r -g appuser appuser\n\n# Kopeeri s\u00f5ltuvused\nCOPY --from=builder /root/.local /root/.local\nENV PATH=/root/.local/bin:$PATH\n\n# Kopeeri l\u00e4htekood\nCOPY --chown=appuser:appuser . .\n\n# L\u00fclitu mitte-root kasutajale\nUSER appuser\n\n# Tervisecontroll\nHEALTHCHECK --interval=30s --timeout=10s \\\n    CMD curl -f http://localhost:5000/health || exit 1\n\nEXPOSE 5000\nCMD [\"gunicorn\", \"--bind\", \"0.0.0.0:5000\", \"app:app\"]\n</code></pre></p> <p>Ehitamine ja k\u00e4ivitamine: Bash<pre><code># Ehita optimeeritud image\ndocker build -t flask-app:optimized .\n\n# Loo kohandatud v\u00f5rk\ndocker network create app-network\n\n# K\u00e4ivita kohandatud v\u00f5rgus\ndocker run -d \\\n  --name flask-app \\\n  --network app-network \\\n  -e NODE_ENV=production \\\n  -p 5000:5000 \\\n  --restart=unless-stopped \\\n  flask-app:optimized\n\n# Testi\ncurl http://localhost:5000\ncurl http://localhost:5000/health\n</code></pre></p>"},{"location":"docker_fundamentals/lecture/#tootmiskeskkonna-pohimotted","title":"Tootmiskeskkonna p\u00f5him\u00f5tted","text":"<p>Eduka Docker'i kasutamise tootmiskeskkonnas saab kokku v\u00f5tta m\u00f5ne olulise p\u00f5him\u00f5ttega:</p> <p>Kasuta alati ametlikke base image'e, mille turvalisust j\u00e4lgitakse ja mida uuendatakse regulaarselt. Kopeeri s\u00f5ltuvuste failid enne rakenduse koodi, et \u00e4ra kasutada kihtide cache'imise eeliseid. Kasuta mitmestaadilisi ehitusi tootmises, et hoida image v\u00e4ike ja turvaline.</p> <p>Loo alati mitte-root kasutaja ja m\u00e4\u00e4ra paketiversioonid kindlalt. Kombineeri RUN k\u00e4sud \u00fcheks ja kasuta .dockerignore faili. Lisa tervisecontrollid, et orkestreerimiss\u00fcsteemid saaksid konteineri seisundit j\u00e4lgida.</p> <p>Kasuta kohandatud v\u00f5rke mitme konteineri rakenduste jaoks ja nimega volume'e andmete s\u00e4ilitamiseks tootmises.</p>"},{"location":"docker_fundamentals/lecture/#kokkuvote","title":"Kokkuv\u00f5te","text":"<p>Selles teooria\u00fclevaates \u00f5ppisid Docker'i p\u00f5hit\u00f5desid: mis on konteinerid, kuidas nad erinevad virtuaalmasinadest ja miks nad on kaasaegse tarkvara arendamise p\u00f5hialus. Samuti \u00f5ppisid edasij\u00f5udnute tehnikaid, mis muudavad image'id kiiremaks, turvalisemaks ja v\u00e4iksemaks.</p> <p>Docker'i v\u00f5rgustiku m\u00f5istmine on kriitilise t\u00e4htsusega mitme konteineri rakenduste ehitamiseks. Podman pakub huvitavat alternatiivi, eriti kui turvalisus on prioriteet.</p> <p>J\u00e4rgmistes praktikumides ja kodut\u00f6\u00f6des rakendad neid teadmisi ning \u00f5pid Docker Compose'i, mis aitab hallata keerukaid mitme konteineri rakendusi.</p>"},{"location":"docker_orchestration/homework/","title":"Docker Orchestration Kodut\u00f6\u00f6","text":"<p>Moodul: Docker Orkestratsioon T\u00e4htaeg: J\u00e4rgmise n\u00e4dala algus Hindamine: 120 punkti</p>"},{"location":"docker_orchestration/homework/#ulesanne-1-full-stack-rakenduse-ehitamine-100-punkti","title":"\u00dclesanne 1: Full-stack rakenduse ehitamine (100 punkti)","text":""},{"location":"docker_orchestration/homework/#ulesande-kirjeldus","title":"\u00dclesande kirjeldus","text":"<p>Looge t\u00f6\u00f6tav full-stack veebirakendus Docker Compose'iga, mis demonstreerib multi-container orchestration p\u00f5him\u00f5tteid.</p>"},{"location":"docker_orchestration/homework/#nouded","title":"N\u00f5uded","text":""},{"location":"docker_orchestration/homework/#arhitektuur-40-punkti","title":"Arhitektuur (40 punkti)","text":"<p>Rakendus peab koosnema neljast teenusest:</p> <ol> <li>Frontend - veebiserver (Nginx + HTML/JS)</li> <li>Backend - API server (Python/Node.js)  </li> <li>Andmebaas - PostgreSQL</li> <li>Cache - Redis</li> </ol>"},{"location":"docker_orchestration/homework/#funktsionaalsus-30-punkti","title":"Funktsionaalsus (30 punkti)","text":"<ul> <li>Frontend n\u00e4itab andmeid andmebaasist</li> <li>Backend pakub REST API endpoint'e</li> <li>Redis cache'ib andmebaasi p\u00e4ringuid</li> <li>K\u00f5ik teenused suhtlevad omavahel</li> </ul>"},{"location":"docker_orchestration/homework/#konfiguratsioon-20-punkti","title":"Konfiguratsioon (20 punkti)","text":"<ul> <li>Environment variables <code>.env</code> failis</li> <li>Named volumes andmete s\u00e4ilitamiseks</li> <li>Correct service dependencies (<code>depends_on</code>)</li> <li>Proper port mappings</li> </ul>"},{"location":"docker_orchestration/homework/#dokumentatsioon-10-punkti","title":"Dokumentatsioon (10 punkti)","text":"<ul> <li>README.md k\u00e4ivitamisjuhistega</li> <li>Arhitektuuri kirjeldus</li> <li>API endpoint'ide dokumentatsioon</li> </ul>"},{"location":"docker_orchestration/homework/#naidis-arhitektuur","title":"N\u00e4idis arhitektuur","text":"Text Only<pre><code>Kasutaja \u2192 Nginx (Frontend) \u2192 Python/Node (Backend) \u2192 PostgreSQL\n                                     \u2193\n                                  Redis Cache\n</code></pre>"},{"location":"docker_orchestration/homework/#minimaalsed-endpointid","title":"Minimaalsed endpoint'id","text":"<p>Backend peab pakkuma: - <code>GET /api/health</code> - API tervise kontroll - <code>GET /api/users</code> - kasutajate loetelu - <code>POST /api/users</code> - uue kasutaja lisamine</p>"},{"location":"docker_orchestration/homework/#naited-ja-templateid","title":"N\u00e4ited ja template'id","text":""},{"location":"docker_orchestration/homework/#docker-composeyml-naide","title":"docker-compose.yml n\u00e4ide","text":"YAML<pre><code>version: '3.8'\n\nservices:\n  frontend:\n    image: nginx:alpine\n    ports:\n      - \"8080:80\"\n    volumes:\n      - ./frontend:/usr/share/nginx/html\n    depends_on:\n      - backend\n\n  backend:\n    build: ./backend\n    environment:\n      - DB_HOST=database\n      - DB_PASSWORD=${DB_PASSWORD}\n    depends_on:\n      - database\n\n  database:\n    image: postgres:13\n    environment:\n      - POSTGRES_PASSWORD=${DB_PASSWORD}\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\nvolumes:\n  postgres_data:\n</code></pre>"},{"location":"docker_orchestration/homework/#env-faili-naide","title":".env faili n\u00e4ide","text":"Text Only<pre><code>DB_PASSWORD=mySecurePassword123\nWEB_PORT=8080\nAPI_PORT=5000\n</code></pre>"},{"location":"docker_orchestration/homework/#python-backend-naide-backendapppy","title":"Python backend n\u00e4ide (backend/app.py)","text":"Python<pre><code>from flask import Flask, jsonify\nimport psycopg2\nimport os\n\napp = Flask(__name__)\n\n@app.route('/api/health')\ndef health():\n    return jsonify({\"status\": \"healthy\"})\n\n@app.route('/api/users')\ndef get_users():\n    # \u00dchendus andmebaasiga\n    conn = psycopg2.connect(\n        host=\"database\",\n        database=\"myapp\",\n        user=\"postgres\",\n        password=os.getenv('DB_PASSWORD')\n    )\n\n    cur = conn.cursor()\n    cur.execute(\"SELECT name, email FROM users\")\n    users = cur.fetchall()\n    conn.close()\n\n    return jsonify({\"users\": [{\"name\": u[0], \"email\": u[1]} for u in users]})\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\n</code></pre>"},{"location":"docker_orchestration/homework/#dockerfile-naide-backenddockerfile","title":"Dockerfile n\u00e4ide (backend/Dockerfile)","text":"Docker<pre><code>FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\nCOPY app.py .\n\nCMD [\"python\", \"app.py\"]\n</code></pre>"},{"location":"docker_orchestration/homework/#requirementstxt-naide","title":"requirements.txt n\u00e4ide","text":"Text Only<pre><code>Flask==2.3.3\npsycopg2-binary==2.9.7\n</code></pre>"},{"location":"docker_orchestration/homework/#html-frontend-naide-frontendindexhtml","title":"HTML frontend n\u00e4ide (frontend/index.html)","text":"HTML<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;My App&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;User Management&lt;/h1&gt;\n    &lt;button onclick=\"loadUsers()\"&gt;Load Users&lt;/button&gt;\n    &lt;div id=\"result\"&gt;&lt;/div&gt;\n\n    &lt;script&gt;\n        async function loadUsers() {\n            const response = await fetch('/api/users');\n            const data = await response.json();\n            document.getElementById('result').innerHTML = \n                data.users.map(u =&gt; `&lt;p&gt;${u.name} - ${u.email}&lt;/p&gt;`).join('');\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"docker_orchestration/homework/#sql-init-script-naide-databaseinitsql","title":"SQL init script n\u00e4ide (database/init.sql)","text":"SQL<pre><code>CREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(200)\n);\n\nINSERT INTO users (name, email) VALUES \n('John Doe', 'john@example.com'),\n('Jane Smith', 'jane@example.com');\n</code></pre>"},{"location":"docker_orchestration/homework/#esitamine","title":"Esitamine","text":"<p>Git repository sisaldab: - <code>docker-compose.yml</code> - K\u00f5ik vajalikud source failid - <code>.env.example</code> (ilma paroolideta) - <code>README.md</code></p> <p>Testimine: Projekt peab k\u00e4ivituma k\u00e4skudega: Bash<pre><code>git clone [your-repo]\ncd [repo-name]\ncp .env.example .env\ndocker-compose up -d\n</code></pre></p>"},{"location":"docker_orchestration/homework/#naited-ja-vihjed","title":"N\u00e4ited ja vihje'd","text":""},{"location":"docker_orchestration/homework/#docker-composeyml-starter","title":"docker-compose.yml starter","text":"YAML<pre><code>version: '3.8'\n\nservices:\n  web:\n    image: nginx:alpine\n    ports:\n      - \"8080:80\"\n    volumes:\n      - ./frontend:/usr/share/nginx/html\n    depends_on:\n      - api\n\n  api:\n    build: ./backend\n    environment:\n      - DB_PASSWORD=${DB_PASSWORD}\n    depends_on:\n      - database\n    # TODO: lisa Redis dependency\n\n  database:\n    image: postgres:13\n    environment:\n      - POSTGRES_PASSWORD=${DB_PASSWORD}\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql\n\n  # TODO: lisa Redis teenus\n\nvolumes:\n  postgres_data:\n</code></pre>"},{"location":"docker_orchestration/homework/#backend-starter-apppy","title":"Backend starter (app.py)","text":"Python<pre><code>from flask import Flask, jsonify\nimport psycopg2\nimport os\n\napp = Flask(__name__)\n\n@app.route('/api/health')\ndef health():\n    return jsonify({\"status\": \"OK\"})\n\n@app.route('/api/users')\ndef get_users():\n    # TODO: implementeeri andmebaasi \u00fchendus\n    # Vihje: kasutage psycopg2.connect() \n    # host=\"database\", user=\"postgres\", password=os.getenv('DB_PASSWORD')\n    pass\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\n</code></pre>"},{"location":"docker_orchestration/homework/#frontend-starter-indexhtml","title":"Frontend starter (index.html)","text":"HTML<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Docker App&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;My Application&lt;/h1&gt;\n    &lt;button onclick=\"testAPI()\"&gt;Test API&lt;/button&gt;\n    &lt;button onclick=\"loadUsers()\"&gt;Load Users&lt;/button&gt;\n    &lt;div id=\"result\"&gt;&lt;/div&gt;\n\n    &lt;script&gt;\n        async function testAPI() {\n            // TODO: tee fetch p\u00e4ring /api/health endpoint'ile\n        }\n\n        async function loadUsers() {\n            // TODO: tee fetch p\u00e4ring /api/users endpoint'ile\n            // Vihje: kasutage fetch() ja response.json()\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"docker_orchestration/homework/#database-setup-initsql","title":"Database setup (init.sql)","text":"SQL<pre><code>CREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(100),\n    email VARCHAR(200)\n);\n\nINSERT INTO users (name, email) VALUES \n('Test User', 'test@example.com');\n\n-- TODO: lisa rohkem test andmeid\n</code></pre>"},{"location":"docker_orchestration/homework/#vihjed","title":"Vihje'd:","text":"<ul> <li>Alustage PostgreSQL ja lihtsa API'ga</li> <li>Redis lisage hiljem cache'iks</li> <li>Kasutage teenuste nimesid docker-compose.yml'is \u00fchenduste jaoks</li> <li>Environment variables v\u00f5tke .env failist</li> </ul>"},{"location":"docker_orchestration/homework/#ulesanne-2-orkestreerimise-mustrite-lugemine-20-punkti","title":"\u00dclesanne 2: Orkestreerimise mustrite lugemine (20 punkti)","text":""},{"location":"docker_orchestration/homework/#lugemine","title":"Lugemine","text":"<p>Lugege l\u00e4bi: https://www.12factor.net/</p>"},{"location":"docker_orchestration/homework/#ulesanne","title":"\u00dclesanne","text":"<p>Vastake j\u00e4rgmistele k\u00fcsimustele (500-800 s\u00f5na):</p> <ol> <li> <p>Millised 12-factor printsiibid on teie Docker Compose projektis h\u00e4sti rakendatud?</p> </li> <li> <p>Millised printsiibid puuduvad v\u00f5i on halvasti implementeeritud teie projektis?</p> </li> <li> <p>Kuidas muudaksite oma projekti, et see j\u00e4rgiks paremini 12-factor metodoloogiat?</p> </li> </ol>"},{"location":"docker_orchestration/homework/#esitamine_1","title":"Esitamine","text":"<p>Lisage vastused README.md faili l\u00f5ppu.</p>"},{"location":"docker_orchestration/homework/#uldine-esitamine","title":"\u00dcldine esitamine","text":"<p>Repository link: [jagage minuga GitHub link]</p> <p>Edu kodut\u00f6\u00f6ga! \ud83d\udc33</p>"},{"location":"docker_orchestration/kodu_masina_ehitus_juhend/","title":"Lihtne VM Setup Docker/Kubernetes \u00d5ppimiseks","text":""},{"location":"docker_orchestration/kodu_masina_ehitus_juhend/#1-koik-virtualization-valikud","title":"1. K\u00f5ik Virtualization Valikud","text":""},{"location":"docker_orchestration/kodu_masina_ehitus_juhend/#local-solutions","title":"Local Solutions","text":"Variant OS Support Setup Aeg Keerukus Maksumus Sobib Multipass Win/Mac/Linux 5 min Madal Tasuta Algajatele VirtualBox Win/Mac/Linux 20 min Keskmine Tasuta \u00d5ppimiseks Vagrant + VirtualBox Win/Mac/Linux 15 min Keskmine Tasuta Reproducible WSL2 Ainult Windows 10 min Madal Tasuta Windows dev VMware Win/Mac/Linux 25 min Keskmine Tasuline Professional"},{"location":"docker_orchestration/kodu_masina_ehitus_juhend/#cloud-solutions","title":"Cloud Solutions","text":"Platvorm Setup Aeg Keerukus Maksumus/kuu Free Trial Sobib GitHub Codespaces 2 min Madal 0-36\u20ac 120 CPU-h/kuu Students/Teams GitPod 2 min Madal 0-25\u20ac 50h/kuu Git workflows AWS EC2 10 min K\u00f5rge 15-50\u20ac 12 kuud tasuta Enterprise Azure VM 10 min K\u00f5rge 20-60\u20ac 12 kuud + $200 Microsoft stack Google Cloud VM 10 min K\u00f5rge 10-40\u20ac 90 p\u00e4eva + $300 Google services"},{"location":"docker_orchestration/kodu_masina_ehitus_juhend/#tasuta-trialide-detailid","title":"Tasuta Trial'ide detailid","text":"Platvorm Free Credit Kestus VM Specs Piirangud AWS Free Tier - 12 kuud t2.micro (1 vCPU, 1GB) 750h/kuu Azure Free $200 12 kuud B1s (1 vCPU, 1GB) Krediidi piires Google Cloud $300 90 p\u00e4eva e2-micro (1 vCPU, 1GB) Krediidi piires GitHub Education - \u00d5pingute ajal 2-4 core, 8GB 120 CPU-h/kuu"},{"location":"docker_orchestration/kodu_masina_ehitus_juhend/#vm-network-setup","title":"VM Network Setup","text":""},{"location":"docker_orchestration/kodu_masina_ehitus_juhend/#multipass-network","title":"Multipass Network","text":"Bash<pre><code># Vaata VM IP aadressi\nmultipass list\n# v\u00f5i\nmultipass info dev-lab\n\n# VM sees kontrolli network'i\nip addr show\nping google.com\n\n# Host'ist \u00fchenda VM'iga\nssh ubuntu@VM_IP_ADDRESS\n</code></pre>"},{"location":"docker_orchestration/kodu_masina_ehitus_juhend/#virtualbox-network-tapsemad-seaded","title":"VirtualBox Network (T\u00e4psemad seaded)","text":"Network Mode Host Access Internet VM-VM Sobib NAT Port forward \u2705 \u274c Lihtne setup Bridged Direct IP \u2705 \u2705 Production-like Host-Only Direct IP \u274c \u2705 Isolated dev <p>Soovitatav setup - Bridged: Bash<pre><code># VirtualBox'is:\n# Settings &gt; Network &gt; Adapter 1\n# Attached to: Bridged Adapter\n# Name: [Your network card]\n\n# VM k\u00e4ivitamise j\u00e4rel:\nip addr show  # N\u00e4ed VM IP aadressi\n</code></pre></p>"},{"location":"docker_orchestration/kodu_masina_ehitus_juhend/#vscode-setup-ja-extensions","title":"VSCode Setup ja Extensions","text":""},{"location":"docker_orchestration/kodu_masina_ehitus_juhend/#1-vscode-installimine-essential-extensions","title":"1. VSCode Installimine + Essential Extensions","text":"Bash<pre><code># Kohustuslikud extensions:\n- Remote - SSH (Microsoft)\n- Docker (Microsoft)  \n- Kubernetes (Microsoft)\n- YAML (Red Hat)\n\n# Kasulikud development extensions:\n- GitLens (Git history)\n- Auto Rename Tag\n- Bracket Pair Colorizer\n- Material Icon Theme\n</code></pre>"},{"location":"docker_orchestration/kodu_masina_ehitus_juhend/#2-ssh-connection-setup","title":"2. SSH Connection Setup","text":"<p>Host masinas (Windows PowerShell/macOS Terminal): Bash<pre><code># 1. Genereeri SSH key\nssh-keygen -t ed25519 -C \"your.email@example.com\"\n\n# 2. Kopeeri public key VM'i\n# Multipass:\nmultipass transfer ~/.ssh/id_ed25519.pub dev-lab:/home/ubuntu/.ssh/authorized_keys\n\n# VirtualBox (p\u00e4rast bridged network setup):\nssh-copy-id ubuntu@VM_IP_ADDRESS\n</code></pre></p> <p>SSH Config (\uff5e/.ssh/config): Bash<pre><code>Host dev-lab\n    HostName VM_IP_ADDRESS  # Asenda tegeliku IP'ga\n    User ubuntu\n    IdentityFile ~/.ssh/id_ed25519\n    Port 22\n</code></pre></p>"},{"location":"docker_orchestration/kodu_masina_ehitus_juhend/#3-vscode-remote-connection","title":"3. VSCode Remote Connection","text":"Bash<pre><code># 1. VSCode's vajuta F1\n# 2. T\u00fc\u00fcbi: \"Remote-SSH: Connect to Host\"\n# 3. Vali \"dev-lab\" v\u00f5i lisa uus host\n# 4. Sisesta SSH command: ssh ubuntu@VM_IP_ADDRESS\n# 5. VSCode avaneb connected mode's\n</code></pre> <p>Test connection: Bash<pre><code># VSCode terminal's (VM sees):\ndocker --version\nkubectl version --client\ngit --version\n</code></pre></p>"},{"location":"docker_orchestration/kodu_masina_ehitus_juhend/#susteeminouded","title":"S\u00fcsteemin\u00f5uded","text":"Komponent Minimaalne Soovitatav RAM 8GB 16GB CPU 4 tuuma 6+ tuuma Storage 50GB SSD 100GB SSD Internet 10 Mbps 50+ Mbps"},{"location":"docker_orchestration/kodu_masina_ehitus_juhend/#valige-variant","title":"Valige variant:","text":""},{"location":"docker_orchestration/kodu_masina_ehitus_juhend/#variant-a-multipass-soovitatud","title":"Variant A: Multipass (soovitatud)","text":"Bash<pre><code># Windows/macOS/Linux\nmultipass launch --name dev-lab --memory 8G --disk 50G --cpus 4\nmultipass shell dev-lab\n</code></pre>"},{"location":"docker_orchestration/kodu_masina_ehitus_juhend/#variant-b-virtualbox","title":"Variant B: VirtualBox","text":"Bash<pre><code># Manual setup:\n# 1. Download Ubuntu Server 22.04 LTS\n# 2. Create VM: 8GB RAM, 4 CPU, 50GB disk  \n# 3. Install Ubuntu\n# 4. SSH into VM\n</code></pre>"},{"location":"docker_orchestration/kodu_masina_ehitus_juhend/#variant-c-wsl2-ainult-windows","title":"Variant C: WSL2 (ainult Windows)","text":"Bash<pre><code>wsl --install -d Ubuntu\n# Restart required, then open Ubuntu terminal\n</code></pre>"},{"location":"docker_orchestration/kodu_masina_ehitus_juhend/#os-spetsiifilised-seadistamise-juhendid","title":"OS-spetsiifilised seadistamise juhendid","text":""},{"location":"docker_orchestration/kodu_masina_ehitus_juhend/#windows-setup","title":"Windows Setup","text":"<p>Windows 10/11: Bash<pre><code># 1. Install Multipass\n# Download from: https://multipass.run/install\n\n# 2. Enable WSL2 (alternative)\nwsl --install -d Ubuntu\n\n# 3. Install Docker Desktop\n# Download from: https://www.docker.com/products/docker-desktop\n\n# 4. Install VSCode\n# Download from: https://code.visualstudio.com/\n</code></pre></p> <p>Windows PowerShell setup: PowerShell<pre><code># Enable developer mode\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\n\n# Install Chocolatey (optional)\nSet-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))\n</code></pre></p>"},{"location":"docker_orchestration/kodu_masina_ehitus_juhend/#macos-setup","title":"macOS Setup","text":"<p>macOS (Intel/Apple Silicon): Bash<pre><code># 1. Install Homebrew\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n# 2. Install Multipass\nbrew install --cask multipass\n\n# 3. Install Docker Desktop\nbrew install --cask docker\n\n# 4. Install VSCode\nbrew install --cask visual-studio-code\n</code></pre></p> <p>Apple Silicon specific: Bash<pre><code># For Apple Silicon Macs, use ARM64 images\nmultipass launch --name dev-lab --memory 8G --disk 50G --cpus 4 --cloud-init cloud-config.yaml\n</code></pre></p>"},{"location":"docker_orchestration/kodu_masina_ehitus_juhend/#linux-setup","title":"Linux Setup","text":"<p>Ubuntu/Debian: Bash<pre><code># 1. Update system\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# 2. Install Multipass\nsudo snap install multipass --classic\n\n# 3. Install Docker\ncurl -fsSL https://get.docker.com | sh\nsudo usermod -aG docker $USER\n\n# 4. Install VSCode\nsudo snap install code --classic\n</code></pre></p> <p>CentOS/RHEL/Fedora: Bash<pre><code># 1. Install Multipass\nsudo dnf install snapd\nsudo snap install multipass --classic\n\n# 2. Install Docker\nsudo dnf install docker\nsudo systemctl enable --now docker\nsudo usermod -aG docker $USER\n\n# 3. Install VSCode\nsudo dnf install code\n</code></pre></p>"},{"location":"docker_orchestration/kodu_masina_ehitus_juhend/#2-post-install-setup-vm-sees","title":"2. Post-Install Setup (VM sees)","text":"<p>Kui VM t\u00f6\u00f6tab, k\u00e4ivitage need k\u00e4sud:</p> Bash<pre><code># S\u00fcsteemi uuendamine\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Development tools\nsudo apt install -y git curl wget vim tree htop\n\n# Docker install\ncurl -fsSL https://get.docker.com | sh\nsudo usermod -aG docker $USER\nnewgrp docker\n\n# Minikube install\ncurl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64\nsudo install minikube-linux-amd64 /usr/local/bin/minikube\n\n# Kubectl install  \ncurl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\nsudo install kubectl /usr/local/bin/kubectl\n\n# Start Minikube\nminikube start --driver=docker --memory=4096 --cpus=2\n</code></pre>"},{"location":"docker_orchestration/kodu_masina_ehitus_juhend/#3-git-setup","title":"3. Git Setup","text":"Bash<pre><code># Configure Git\ngit config --global user.name \"Sinu Nimi\"\ngit config --global user.email \"sinu.email@example.com\"\n\n# Generate SSH key for GitHub\nssh-keygen -t ed25519 -C \"sinu.email@example.com\"\ncat ~/.ssh/id_ed25519.pub\n\n# Copy output and add to GitHub Settings &gt; SSH Keys\n</code></pre>"},{"location":"docker_orchestration/kodu_masina_ehitus_juhend/#4-test-everything","title":"4. Test Everything","text":"Bash<pre><code># Test Docker\ndocker run hello-world\n\n# Test Kubernetes\nkubectl get nodes\n\n# Test Git\ngit clone https://github.com/your-username/your-repo.git\n</code></pre>"},{"location":"docker_orchestration/kodu_masina_ehitus_juhend/#5-daily-workflow","title":"5. Daily Workflow","text":"Bash<pre><code># Start VM\nmultipass shell dev-lab  # v\u00f5i VirtualBox/WSL2\n\n# Work in projects directory\nmkdir -p ~/projects\ncd ~/projects\n\n# Use git normally\ngit clone &lt;repository&gt;\ncd &lt;project&gt;\n# Edit files, commit, push\n</code></pre>"},{"location":"docker_orchestration/kodu_masina_ehitus_juhend/#kui-midagi-ei-toota","title":"Kui midagi ei t\u00f6\u00f6ta","text":"<p>Docker permission error: Bash<pre><code>sudo usermod -aG docker $USER\nnewgrp docker\n</code></pre></p> <p>Minikube ei k\u00e4ivitu: Bash<pre><code>minikube delete\nminikube start --driver=docker\n</code></pre></p> <p>VM aeglane: - Suurendage RAM v\u00e4hemalt 8GB-le - Veenduge, et SSD on kasutusel</p>"},{"location":"docker_orchestration/lab/","title":"Docker Compose Lab","text":""},{"location":"docker_orchestration/lab/#mida-opid","title":"Mida \u00f5pid","text":"<p>Selle labi l\u00f5puks oskad: - Luua Dockerfile Python rakenduse jaoks - Kirjutada docker-compose.yml faili mitme teenusega - K\u00e4ivitada ja hallata multi-container rakendusi - Debugida tavalisemaid container'ite probleeme</p>"},{"location":"docker_orchestration/lab/#eeldused","title":"Eeldused","text":"<ul> <li>Docker ja Docker Compose on installitud</li> <li>P\u00f5him\u00f5isted container'itest on teada</li> </ul>"},{"location":"docker_orchestration/lab/#samm-1-projekti-struktuuri-loomine","title":"Samm 1: Projekti struktuuri loomine","text":"<p>Loo j\u00e4rgmine kataloogide struktuur:</p> Bash<pre><code>mkdir docker-compose-lab\ncd docker-compose-lab\nmkdir backend\nmkdir frontend\n</code></pre> <p>Sinu projekt peaks v\u00e4lja n\u00e4gema nii: Text Only<pre><code>docker-compose-lab/\n\u251c\u2500\u2500 backend/\n\u251c\u2500\u2500 frontend/\n\u2514\u2500\u2500 docker-compose.yml (loome hiljem)\n</code></pre></p> <p>Igal teenus (backend, frontend) on oma failid ja seadistused. See hoiab projekti korrastatuna.</p>"},{"location":"docker_orchestration/lab/#samm-2-backend-rakenduse-loomine","title":"Samm 2: Backend rakenduse loomine","text":""},{"location":"docker_orchestration/lab/#21-python-rakenduse-loomine","title":"2.1 Python rakenduse loomine","text":"<p>Loo fail <code>backend/app.py</code>:</p> Python<pre><code>from flask import Flask, jsonify\nimport os\n\n# Flask rakenduse loomine\napp = Flask(__name__)\n\n# Tervisekontrolli endpoint - kontrollib, kas teenus t\u00f6\u00f6tab\n@app.route('/api/health')\ndef health():\n    return jsonify({\n        'status': 'healthy',\n        'service': 'backend'\n    })\n\n# Info endpoint - tagastab p\u00f5hiinfot\n@app.route('/api/info')\ndef info():\n    return jsonify({\n        'message': 'Tere Docker Compose\\'ist!',\n        'environment': os.getenv('APP_ENV', 'development')  # Loeb keskkonnamuutujat\n    })\n\n# K\u00e4ivitab serveri k\u00f5igil IP-del (vajalik Docker'is)\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\n</code></pre> <p>Container'is peab rakendus kuulama k\u00f5iki v\u00f5rguliidesesid (<code>host='0.0.0.0'</code>), et v\u00e4lispoolt oleks ligip\u00e4\u00e4setav.</p>"},{"location":"docker_orchestration/lab/#22-soltuvuste-faili-loomine","title":"2.2 S\u00f5ltuvuste faili loomine","text":"<p>Loo fail <code>backend/requirements.txt</code>:</p> Text Only<pre><code>Flask==2.3.3\n</code></pre> <p>Docker peab teadma, milliseid Python pakette installida. See fail loetleb k\u00f5ik vajalikud s\u00f5ltuvused.</p>"},{"location":"docker_orchestration/lab/#23-dockerfile-loomine","title":"2.3 Dockerfile loomine","text":"<p>Loo fail <code>backend/Dockerfile</code>:</p> Docker<pre><code># Alustame Python base image'iga - sisaldab Python'i ja Linux'i\nFROM python:3.9-slim\n\n# M\u00e4\u00e4rame t\u00f6\u00f6kausts container'is - k\u00f5ik k\u00e4sud toimuvad siin\nWORKDIR /app\n\n# Kopeerime s\u00f5ltuvuste faili esimesena (optimiseerimise jaoks)\nCOPY requirements.txt .\n\n# Installime Python pakette\nRUN pip install -r requirements.txt\n\n# Kopeerime kogu rakenduse koodi\nCOPY . .\n\n# Dokumenteerime, et rakendus kasutab porti 5000\nEXPOSE 5000\n\n# M\u00e4\u00e4rame, mis k\u00e4sk k\u00e4ivitub container'i k\u00e4ivitamisel\nCMD [\"python\", \"app.py\"]\n</code></pre> <p>Docker'i layer caching toimib nii, et kui kopeerime <code>requirements.txt</code> eraldi, siis koodi muutmisel ei pea s\u00f5ltuvusi uuesti installima.</p>"},{"location":"docker_orchestration/lab/#samm-3-frontend-failide-loomine","title":"Samm 3: Frontend failide loomine","text":""},{"location":"docker_orchestration/lab/#31-lihtsa-html-loomine","title":"3.1 Lihtsa HTML loomine","text":"<p>Loo fail <code>frontend/index.html</code>:</p> HTML<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Docker Compose Demo&lt;/title&gt;\n    &lt;style&gt;\n        body { \n            font-family: Arial; \n            padding: 50px; \n            background-color: #f5f5f5; \n        }\n        button { \n            padding: 10px 20px; \n            margin: 10px; \n            background-color: #007bff;\n            color: white;\n            border: none;\n            cursor: pointer;\n        }\n        .result { \n            margin: 20px 0; \n            padding: 20px; \n            background: #fff; \n            border: 1px solid #ddd;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Docker Compose Lab&lt;/h1&gt;\n    &lt;p&gt;See leht t\u00f6\u00f6tab Nginx container'is&lt;/p&gt;\n\n    &lt;button onclick=\"testAPI()\"&gt;Testi Backend API&lt;/button&gt;\n    &lt;div id=\"result\" class=\"result\"&gt;Kl\u00f5psa nuppu API testimiseks&lt;/div&gt;\n\n    &lt;script&gt;\n        // Funktsioon backend API testimiseks\n        function testAPI() {\n            fetch('/api/info')  // P\u00e4ring backend'ile\n                .then(response =&gt; response.json())\n                .then(data =&gt; {\n                    // N\u00e4ita vastust lehel\n                    document.getElementById('result').innerHTML = \n                        'API vastus: ' + JSON.stringify(data, null, 2);\n                })\n                .catch(error =&gt; {\n                    // N\u00e4ita viga\n                    document.getElementById('result').innerHTML = 'Viga: ' + error;\n                });\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Fetch() on moodne viis API-ga suhtlemiseks ilma lehe uuesti laadimata.</p>"},{"location":"docker_orchestration/lab/#samm-4-docker-compose-faili-loomine","title":"Samm 4: Docker Compose faili loomine","text":"<p>Loo fail <code>docker-compose.yml</code> projekti juurkaustas:</p> YAML<pre><code>version: '3.8'  # Compose faili formaat\n\nservices:  # M\u00e4\u00e4rame k\u00f5ik teenused\n  frontend:\n    image: nginx:alpine          # Kasutame valmis Nginx image'i\n    ports:\n      - \"8080:80\"               # Host port 8080 -&gt; Container port 80\n    volumes:\n      - ./frontend:/usr/share/nginx/html  # Meie HTML failid Nginx'i\n    depends_on:\n      - backend                 # Frontend vajab backend'i\n\n  backend:\n    build: ./backend            # Ehitame oma image Dockerfile'ist\n    ports:\n      - \"5000:5000\"            # API k\u00e4ttesaadav port 5000 kaudu\n</code></pre> <p>See fail kirjeldab kogu rakenduse arhitektuuri - millised teenused, kuidas nad omavahel suhtlevad, millised pordid.</p> <p><code>depends_on</code> \u00fctleb Docker'ile, et frontend vajab backend'i t\u00f6\u00f6tamist, seega backend k\u00e4ivitatakse esimesena.</p>"},{"location":"docker_orchestration/lab/#samm-5-rakenduse-kaivitamine","title":"Samm 5: Rakenduse k\u00e4ivitamine","text":""},{"location":"docker_orchestration/lab/#51-koikide-teenuste-kaivitamine","title":"5.1 K\u00f5ikide teenuste k\u00e4ivitamine","text":"Bash<pre><code>docker-compose up --build\n</code></pre> <p><code>--build</code> ehitab image'd uuesti enne k\u00e4ivitamist. Vajalik, kui Dockerfile v\u00f5i kood on muutunud.</p> <p>Sa n\u00e4ed logisid m\u00f5lemast teenusest. Oota, kuni n\u00e4ed: Text Only<pre><code>backend_1   |  * Running on all addresses (0.0.0.0)\nfrontend_1  | ... nginx started\n</code></pre></p>"},{"location":"docker_orchestration/lab/#52-rakenduse-testimine","title":"5.2 Rakenduse testimine","text":"<p>Ava brauser ja mine: <code>http://localhost:8080</code></p> <p>Kl\u00f5psa nuppu \"Testi Backend API\" - peaksid n\u00e4gema JSON vastust backend'ilt.</p> <p>Nginx forwording p\u00e4ringud <code>/api/*</code> backend container'ile, t\u00e4nu Docker'i sisemisele v\u00f5rgule.</p>"},{"location":"docker_orchestration/lab/#53-rakenduse-peatamine","title":"5.3 Rakenduse peatamine","text":"<p>Vajuta <code>Ctrl+C</code> terminalis v\u00f5i k\u00e4ivita:</p> Bash<pre><code>docker-compose down\n</code></pre>"},{"location":"docker_orchestration/lab/#samm-6-andmebaasi-lisamine","title":"Samm 6: Andmebaasi lisamine","text":""},{"location":"docker_orchestration/lab/#61-backendi-uuendamine-andmebaasi-kasutamiseks","title":"6.1 Backend'i uuendamine andmebaasi kasutamiseks","text":"<p>P\u00e4ris rakendused vajavad andmete salvestamist. PostgreSQL on populaarne ja t\u00f6\u00f6kindel andmebaas.</p> <p>Uuenda <code>backend/app.py</code>:</p> Python<pre><code>from flask import Flask, jsonify\nimport psycopg2\nimport os\nfrom datetime import datetime\n\napp = Flask(__name__)\n\n# Funktsioon andmebaasi \u00fchenduse loomiseks\ndef get_db_connection():\n    try:\n        conn = psycopg2.connect(\n            host=os.getenv('DB_HOST', 'localhost'),     # Andmebaasi host\n            database=os.getenv('DB_NAME', 'app'),       # Andmebaasi nimi\n            user=os.getenv('DB_USER', 'postgres'),      # Kasutajanimi\n            password=os.getenv('DB_PASSWORD', 'password')  # Salas\u00f5na\n        )\n        return conn\n    except:\n        return None  # \u00dchendus eba\u00f5nnestus\n\n@app.route('/api/health')\ndef health():\n    return jsonify({'status': 'healthy'})\n\n@app.route('/api/info')\ndef info():\n    return jsonify({\n        'message': 'Tere Docker Compose\\'ist!',\n        'timestamp': datetime.now().isoformat()\n    })\n\n# Uus endpoint andmebaasi staatuse kontrolliks\n@app.route('/api/db-status')\ndef db_status():\n    conn = get_db_connection()\n    status = 'connected' if conn else 'disconnected'\n    if conn:\n        conn.close()  # Sulge \u00fchendus\n\n    return jsonify({\n        'database': status,\n        'timestamp': datetime.now().isoformat()\n    })\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n</code></pre>"},{"location":"docker_orchestration/lab/#62-soltuvuste-uuendamine","title":"6.2 S\u00f5ltuvuste uuendamine","text":"<p>Uuenda <code>backend/requirements.txt</code>:</p> Text Only<pre><code>Flask==2.3.3\npsycopg2-binary==2.9.7   # PostgreSQL driver Python'i jaoks\n</code></pre> <p><code>psycopg2-binary</code> on PostgreSQL adapter Python'i jaoks, mis v\u00f5imaldab andmebaasiga suhelda.</p>"},{"location":"docker_orchestration/lab/#63-environment-faili-loomine","title":"6.3 Environment faili loomine","text":"<p>Esmalt loome <code>.env</code> faili turvaliste seadistuste jaoks.</p> <p>Loo <code>.env</code> fail projekti juurkaustas:</p> Text Only<pre><code># Andmebaasi seadistused\nPOSTGRES_DB=app\nPOSTGRES_USER=postgres\nPOSTGRES_PASSWORD=supersecretpassword123\n\n# Rakenduse seadistused\nAPP_ENV=development\n</code></pre> <p><code>.env</code> fail hoiab tundlikud andmed eraldi koodist. See on standardne viis konfiguratsioonide haldamiseks.</p>"},{"location":"docker_orchestration/lab/#64-docker-compose-uuendamine","title":"6.4 Docker Compose uuendamine","text":"<p>Peame lisama andmebaasi teenuse ja \u00fchendama k\u00f5ik teenused omavahel.</p> <p>Uuenda <code>docker-compose.yml</code>:</p> YAML<pre><code>version: '3.8'\n\nservices:\n  frontend:\n    image: nginx:alpine\n    ports:\n      - \"8080:80\"\n    volumes:\n      - ./frontend:/usr/share/nginx/html\n    depends_on:\n      - backend\n\n  backend:\n    build: ./backend\n    environment:\n      - APP_ENV=${APP_ENV}      # Loeb .env failist\n      - DB_HOST=db              # Andmebaasi host nimi\n      - DB_NAME=${POSTGRES_DB}  # Loeb .env failist\n      - DB_USER=${POSTGRES_USER}        # Loeb .env failist\n      - DB_PASSWORD=${POSTGRES_PASSWORD} # Loeb .env failist\n    ports:\n      - \"5000:5000\"\n    depends_on:\n      - db                      # Backend vajab andmebaasi\n\n  db:                           # UUS: Andmebaasi teenus\n    image: postgres:13          # PostgreSQL 13 image\n    environment:\n      - POSTGRES_DB=${POSTGRES_DB}       # Loeb .env failist\n      - POSTGRES_USER=${POSTGRES_USER}   # Loeb .env failist\n      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}  # Loeb .env failist\n    volumes:\n      - postgres_data:/var/lib/postgresql/data  # Andmete p\u00fcsivus\n\nvolumes:\n  postgres_data:                # Named volume andmete jaoks\n</code></pre> <p>Docker Compose loeb automaatselt <code>.env</code> faili ja asendab <code>${MUUTUJA}</code> v\u00e4\u00e4rtused.</p>"},{"location":"docker_orchestration/lab/#samm-7-taieliku-rakenduse-testimine","title":"Samm 7: T\u00e4ieliku rakenduse testimine","text":""},{"location":"docker_orchestration/lab/#71-uuesti-ehitamine-ja-kaivitamine","title":"7.1 Uuesti ehitamine ja k\u00e4ivitamine","text":"Bash<pre><code>docker-compose up --build\n</code></pre> <p>N\u00fc\u00fcd k\u00e4ivitub kolm teenust: frontend, backend ja andmebaas.</p>"},{"location":"docker_orchestration/lab/#72-andmebaasi-uhenduse-testimine","title":"7.2 Andmebaasi \u00fchenduse testimine","text":"<p>Ava <code>http://localhost:5000/api/db-status</code> otse brauseris - peaksid n\u00e4gema:</p> JSON<pre><code>{\n  \"database\": \"connected\",\n  \"timestamp\": \"2025-01-15T10:30:00\"\n}\n</code></pre>"},{"location":"docker_orchestration/lab/#73-frontendi-uuendamine-andmebaasi-testimiseks","title":"7.3 Frontend'i uuendamine andmebaasi testimiseks","text":"<p>Uuenda <code>frontend/index.html</code>, lisa uus nupp:</p> HTML<pre><code>&lt;!-- Lisa see teiste nuppude k\u00f5rvale --&gt;\n&lt;button onclick=\"testDatabase()\"&gt;Testi andmebaasi&lt;/button&gt;\n\n&lt;script&gt;\n// Lisa see teiste funktsioonide k\u00f5rvale\nfunction testDatabase() {\n    fetch('/api/db-status')\n        .then(response =&gt; response.json())\n        .then(data =&gt; {\n            document.getElementById('result').innerHTML = \n                'Andmebaasi staatus: ' + JSON.stringify(data, null, 2);\n        });\n}\n&lt;/script&gt;\n</code></pre>"},{"location":"docker_orchestration/lab/#samm-8-kasulikud-kasud-ja-debugimine","title":"Samm 8: Kasulikud k\u00e4sud ja debugimine","text":""},{"location":"docker_orchestration/lab/#81-docker-compose-kasud","title":"8.1 Docker Compose k\u00e4sud","text":"Bash<pre><code># Vaata t\u00f6\u00f6tavaid container'eid\ndocker-compose ps\n\n# Vaata logisid k\u00f5igist teenustest\ndocker-compose logs\n\n# Vaata konkreetse teenuse logisid\ndocker-compose logs backend\n\n# J\u00e4lgi logisid reaalajas\ndocker-compose logs -f\n\n# K\u00e4ivita k\u00e4sk container'is\ndocker-compose exec backend bash\n\n# Peata k\u00f5ik teenused\ndocker-compose down\n\n# Eemalda ka volume'id\ndocker-compose down -v\n</code></pre>"},{"location":"docker_orchestration/lab/#82-containerite-probleemide-lahendamine","title":"8.2 Container'ite probleemide lahendamine","text":"<p>Kontrolli, kas container'id t\u00f6\u00f6tavad: Bash<pre><code>docker-compose ps\n</code></pre></p> <p>Peaksid n\u00e4gema: Text Only<pre><code>Name               State           Ports\nbackend_1          Up              0.0.0.0:5000-&gt;5000/tcp\ndb_1              Up              5432/tcp\nfrontend_1        Up              0.0.0.0:8080-&gt;80/tcp\n</code></pre></p> <p>Kontrolli container'i logisid: Bash<pre><code>docker-compose logs backend\n</code></pre></p> <p>Ligip\u00e4\u00e4s container'i shell'ile: Bash<pre><code>docker-compose exec backend bash\n</code></pre></p> <p>Testi v\u00f5rgu\u00fchendust: Bash<pre><code>docker-compose exec backend ping db\n</code></pre></p>"},{"location":"docker_orchestration/lab/#83-levinud-probleemid","title":"8.3 Levinud probleemid","text":"<p>Port on juba kasutusel: - Muuda host porti docker-compose.yml failis (nt \"8081:80\")</p> <p>Container ei k\u00e4ivitu: - Kontrolli logisid: <code>docker-compose logs [teenus]</code> - Kontrolli Dockerfile s\u00fcntaksit - Veendu, et k\u00f5ik vajalikud failid eksisteerivad</p> <p>Ei saa andmebaasiga \u00fchendust: - Kontrolli keskkonnamuutujaid - Veendu, et andmebaasi container t\u00f6\u00f6tab - Kontrolli, et teenused on samas v\u00f5rgus</p>"},{"location":"docker_orchestration/lab/#samm-9-production-kaalutlused","title":"Samm 9: Production kaalutlused","text":""},{"location":"docker_orchestration/lab/#91-env-faili-turvalisus","title":"9.1 .env faili turvalisus","text":"<p><code>.env</code> fail sisaldab tundlikke andmeid, seega:</p> Bash<pre><code># Lisa .gitignore faili\necho \".env\" &gt;&gt; .gitignore\n</code></pre> <p>Loo eraldi <code>.env.example</code> fail:</p> Text Only<pre><code># Andmebaasi seadistused\nPOSTGRES_DB=app\nPOSTGRES_USER=postgres\nPOSTGRES_PASSWORD=your_secure_password_here\n\n# Rakenduse seadistused\nAPP_ENV=production\n</code></pre> <p>Production keskkonnas kasuta tugevaid salas\u00f5nu ja eraldi <code>.env</code> faili.</p>"},{"location":"docker_orchestration/lab/#92-health-checkid","title":"9.2 Health check'id","text":"<p>Health check'id \u00fctlevad Docker'ile, kas teenus on t\u00f5esti valmis t\u00f6\u00f6tama, mitte ainult k\u00e4ivitatud.</p> <p>Lisa health check'id teenustele:</p>"},{"location":"docker_orchestration/lab/#yaml-1-2-3-4-5-6-7-8-9-10-11-12-13-14-15-16-17-db-image-postgres13-healthcheck-test-cmd-shell-pg_isready-u-postgres_user-interval-30s-kontrollib-iga-30-sekundi-jarel-timeout-10s-aeg-valja-kui-10s-parast-pole-vastust-retries-5-proovib-5-korda-enne-unhealthy-markimist-ulejaanud-konfiguratsioon-backend-build-backend-healthcheck-test-cmd-curl-f-httplocalhost5000apihealth-interval-30s-timeout-10s-retries-3-ulejaanud-konfiguratsioon","title":"YAML<pre><code>  db:\n    image: postgres:13\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U ${POSTGRES_USER}\"]\n      interval: 30s     # Kontrollib iga 30 sekundi j\u00e4rel\n      timeout: 10s      # Aeg v\u00e4lja, kui 10s p\u00e4rast pole vastust\n      retries: 5        # Proovib 5 korda enne \"unhealthy\" m\u00e4rkimist\n    # ... \u00fclej\u00e4\u00e4nud konfiguratsioon\n\n  backend:\n    build: ./backend\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:5000/api/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n    # ... \u00fclej\u00e4\u00e4nud konfiguratsioon\n</code></pre>","text":""},{"location":"docker_orchestration/lab/#lisaressursid-ja-abi","title":"Lisaressursid ja abi","text":""},{"location":"docker_orchestration/lab/#oppimiseks","title":"\u00d5ppimiseks:","text":"<ul> <li>Docker Compose Quickstart - kiire algus</li> <li>Docker Compose Examples - palju n\u00e4iteid</li> <li>Docker Compose Reference - k\u00f5ik v\u00f5imalikud seaded</li> </ul>"},{"location":"docker_orchestration/lab/#abi-saamiseks","title":"\ud83c\udd98 Abi saamiseks:","text":"<ul> <li>Docker Community - foorumid</li> <li>Stack Overflow - k\u00fcsimused ja vastused</li> <li>Docker Documentation - ametlik dokumentatsioon</li> </ul>"},{"location":"docker_orchestration/lab/#praktikaks","title":"Praktikaks:","text":"<ul> <li>Docker Compose Best Practices - tootmiskeskkonna n\u00f5uded</li> <li>Docker Compose Networking - v\u00f5rgu konfiguratsioon</li> <li>Docker Compose Environment Variables - keskkonnamuutujad</li> </ul>"},{"location":"docker_orchestration/lecture/","title":"Docker Orkestratsioon","text":""},{"location":"docker_orchestration/lecture/#sissejuhatus","title":"Sissejuhatus","text":"<p>Kaasaegses IT-maailmas koosneb enamik rakendusi mitmest komponendist. Ettev\u00f5tte veebileht vajab tavaliselt veebiserver staatiliste failide jaoks, rakendusserver \u00e4riloogika t\u00e4itmiseks, andmebaas andmete s\u00e4ilitamiseks ja v\u00f5ib-olla veel cache kiiruse parandamiseks. Traditsionaalselt paigaldati need k\u00f5ik samale serverile v\u00f5i hallati eraldi serverites keeruliste skriptidega.</p> <p>Docker on muutnud olukorda - iga komponent saab oma container'isse. See toob kaasa m\u00e4rkimisv\u00e4\u00e4rseid eeliseid: komponente saab s\u00f5ltumatult skaleerida, arendada ja testimiseks kiiresti \u00fcles seadistada. Kuid mitme container'i k\u00e4sitsi haldamine muutub kiiresti keeruliseks - tuleb meeles pidada \u00f5iget k\u00e4ivitamise j\u00e4rjekorda, konfigureerida v\u00f5rke ja hallata andmete s\u00e4ilitamist.</p> <p>Docker Compose lahendab need v\u00e4ljakutsed, v\u00f5imaldades defineerida kogu s\u00fcsteemi \u00fche YAML failiga. See on orkestreerimise t\u00f6\u00f6riist, mis automatiseerib mitme container'i koordineerimise ja annab arendajatele v\u00f5imaluse keskenduda \u00e4riloogikale, mitte infrastruktuuri detailidele.</p>"},{"location":"docker_orchestration/lecture/#mitme-konteineriga-susteemide-vajadus","title":"Mitme-konteineriga s\u00fcsteemide vajadus","text":""},{"location":"docker_orchestration/lecture/#monoliitiline-lahenemine-ja-selle-piirangud","title":"Monoliitiline l\u00e4henemine ja selle piirangud","text":"<p>Kui me paigaldame k\u00f5ik komponendid \u00fchte container'isse, tekivad kiiresti probleemid. Kujutage ette container'it, mis sisaldab Nginx veebiserverit, Python rakendusserverit ja PostgreSQL andmebaasi. Selline lahendus tundub alguses lihtne, kuid praktikas osutub see mitmel viisil ebaefektiivseks.</p> <p>Esiteks, skaleerimise probleem. Kui teie rakendus vajab rohkem arvutusv\u00f5imsust API p\u00e4ringute t\u00f6\u00f6tlemiseks, ei saa te k\u00e4ivitada ainult rohkem rakendusserveri instantse - teil tuleb k\u00e4ivitada terve container koos andmebaasiga. See raiskab ressursse ja muudab s\u00fcsteemi kulukamaks.</p> <p>Teiseks, vigade isolatsiooni puudumine. Kui Nginx server mingil p\u00f5hjusel kukub, kaob k\u00e4ttesaadavus kogu rakendusele, kuigi andmebaas ja API server v\u00f5iksid edasi t\u00f6\u00f6tada. \u00dche komponendi viga paral\u00fcseerib kogu s\u00fcsteemi.</p> <p>Kolmandaks, arendamise keerukus. Iga koodimuudatus n\u00f5uab terve container'i uuesti ehitamist ja k\u00e4ivitamist, mis v\u00f5tab aega ja aeglustab arendusprotsessi. Samuti muutub keeruliseks erinevate komponentide iseseisvad testimine ja juurutamine.</p>"},{"location":"docker_orchestration/lecture/#mikroteenuste-arhitektuur","title":"Mikroteenuste arhitektuur","text":"<p>Alternatiiviks on jagada rakendus loogilisteks komponentideks, kus iga\u00fcks t\u00e4idab konkreetset \u00fclesannet. Veebisirvija p\u00f6\u00f6rdub esialgu Nginx serveri poole, mis serveerib staatilised failid ja suunab API p\u00e4ringud edasi Python rakendusserverile. Rakendusserver tegeleb \u00e4riloogikaga ja suhtleb andmebaasiga ning cache serveriga.</p> <p>Selline arhitektuur toob kaasa m\u00e4rkimisv\u00e4\u00e4rseid eeliseid. Iga komponent saab optimeerida konkreetseks \u00fclesandeks - andmebaasile saab anda rohkem m\u00e4lu, API serverile rohkem CPU ressursse. Komponente saab s\u00f5ltumatult arendada ja juurutada, mis v\u00f5imaldab meeskondadel paralleelselt t\u00f6\u00f6tada.</p> <p>Siiski tekivad uued v\u00e4ljakutsed. Kuidas tagada, et API server leiab alati andmebaasi? Kuidas hallata seda, et andmebaas k\u00e4ivitatakse enne API serverit? Kuidas konfigureerida turvalist v\u00f5rgusuhtlust komponentide vahel?</p>"},{"location":"docker_orchestration/lecture/#docker-compose-kontseptsioonid","title":"Docker Compose kontseptsioonid","text":""},{"location":"docker_orchestration/lecture/#deklaratiivne-konfiguratsioon","title":"Deklaratiivne konfiguratsioon","text":"<p>Docker Compose lahendab orkestreerimise v\u00e4ljakutsed deklaratiivse l\u00e4henemisega. Selle asemel, et kirjutada skripte, mis kirjeldavad sammhaaval, kuidas s\u00fcsteemi \u00fcles seadistada, kirjeldame YAML failis, milline on soovitud l\u00f5pptulemus. Docker Compose v\u00f5tab vastutuse selle eest, kuidas see tulemus saavutada.</p> <p>YAML (YAML Ain't Markup Language) on inimloetav andmete serialiseerimise standard, mis sobib h\u00e4sti konfiguratsioonifailide jaoks. Selle s\u00fcntaks p\u00f5hineb taanetel ja hierarhial, muutes keerulised konfiguratsioonid visuaalselt m\u00f5istetavaks.</p> <p>Compose fail defineerib teenused (services), mis on abstraktsioon container'ite \u00fcle. Iga teenus kirjeldab, millist Docker image'it kasutada v\u00f5i kuidas seda ehitada, millised pordid avada, kuidas konfigureerida keskkonnamuutujaid ja kuidas \u00fchendada teiste teenustega.</p>"},{"location":"docker_orchestration/lecture/#automaatne-vorgundus-ja-service-discovery","title":"Automaatne v\u00f5rgundus ja service discovery","text":"<p>\u00dcks Docker Compose v\u00f5tmeomadusi on automaatne v\u00f5rgu seadistamine. Iga projekt saab oma isoleeritud virtuaalse v\u00f5rgu, kus k\u00f5ik teenused saavad omavahel suhelda. Veel olulisem on see, et Docker Compose seadistab DNS s\u00fcsteemi, mis v\u00f5imaldab teenustel \u00fcksteist leidmast nimede j\u00e4rgi.</p> <p>See t\u00e4hendab, et kui te m\u00e4\u00e4rate docker-compose.yml failis teenuse nimeks \"database\", siis teised teenused saavad sellega \u00fchenduda kasutades t\u00e4pselt seda nime. Pole vaja muretseda IP aadresside p\u00e4rast, mis muutuvad iga container'i taask\u00e4ivitamisel.</p> <p>Service discovery automatiseerimine lihtsustab m\u00e4rkimisv\u00e4\u00e4rselt rakenduse konfiguratsiooni. Python kood v\u00f5ib \u00fchenduda andmebaasiga kasutades connection string'i nagu \"postgresql://user:password@database:5432/myapp\", kus \"database\" on teenuse nimi compose failis.</p>"},{"location":"docker_orchestration/lecture/#soltuvuste-haldamine","title":"S\u00f5ltuvuste haldamine","text":"<p>Reaalsetes rakendustes on teenuste vahel selged s\u00f5ltuvused. API server ei saa t\u00f6\u00f6tada ilma andmebaasita, veebisirvija ei saa API'd kasutada, kui see pole k\u00e4ivitatud. Docker Compose pakub depends_on direktiivi, mis m\u00e4\u00e4rab k\u00e4ivitamise j\u00e4rjekorra.</p> <p>Siiski on oluline m\u00f5ista, et depends_on tagab ainult container'ite k\u00e4ivitamise j\u00e4rjekorra, mitte teenuste valmiduse ootamist. PostgreSQL container v\u00f5ib k\u00e4ivitada, kuid andmebaas ise v\u00f5ib veel initsialiseerumise protsessis olla. T\u00e4iustatud stsenaariumides kasutatakse health check'e, mis kontrollivad teenuse tegelikku valmidust.</p>"},{"location":"docker_orchestration/lecture/#yaml-suntaks-ja-compose-faili-struktuur","title":"YAML s\u00fcntaks ja compose faili struktuur","text":""},{"location":"docker_orchestration/lecture/#pohisuntaks-ja-reeglid","title":"P\u00f5his\u00fcntaks ja reeglid","text":"<p>YAML s\u00fcntaks n\u00f5uab t\u00e4psust, kuid selle omandamine on lihtne. K\u00f5ige olulisem reegel on kasutada ainult t\u00fchikuid taandamiseks - TAB m\u00e4rgid ei ole lubatud. Standardne on kasutada kahe t\u00fchiku sammu iga hierarhia taseme jaoks.</p> <p>V\u00f5ti-v\u00e4\u00e4rtus paarid kirjutatakse kujul \"key: value\", kus koolon j\u00e4rel peab olema t\u00fchik. Nimekirjad m\u00e4rgitakse sidekriipsuga, millele j\u00e4rgneb t\u00fchik ja element. Hierarhia luuakse taandamisega - lapse elemendid peavad olema rohkem taandatud kui vanem element.</p> YAML<pre><code># \u00d5ige YAML s\u00fcntaks\nversion: '3.8'                    # Koolon + t\u00fchik\nservices:                         # Koolon l\u00f5pus\n  web:                           # 2 t\u00fchikut taane\n    image: nginx:alpine          # 4 t\u00fchikut taane\n    ports:                       # 4 t\u00fchikut taane\n      - \"80:80\"                  # 6 t\u00fchikut + kriips + t\u00fchik\n\n# Vale s\u00fcntaks - \u00e4ra tee nii\nversion:'3.8'                     # T\u00fchik puudub\nservices:\nweb:                              # Taane puudub\n    image:nginx                   # T\u00fchik puudub kooloni j\u00e4rel\n    ports:                        # TAB m\u00e4rk (keelatud!)\n</code></pre> <p>Compose faili p\u00f5histruktuur algab versiooni deklaratsiooniga. Versioon 3.8 on laialt toetatud ja sisaldab k\u00f5iki kaasaegseid funktsioone. Seej\u00e4rel j\u00e4rgneb services sektsioon, kus defineeritakse k\u00f5ik rakenduse komponendid.</p>"},{"location":"docker_orchestration/lecture/#teenuste-defineerimine","title":"Teenuste defineerimine","text":"<p>Iga teenus compose failis vastab \u00fchele v\u00f5i mitmele container'ile. Teenuse definitsioon v\u00f5ib kasutada valmis Docker image'it Docker Hub'ist v\u00f5i ehitada image'i kohalikust Dockerfile'ist. Valik s\u00f5ltub sellest, kas tegu on standardse tarkvaraga nagu andmebaas v\u00f5i oma rakenduse koodiga.</p> YAML<pre><code>version: '3.8'\n\nservices:\n  # Valmis image - standardsed teenused\n  database:\n    image: postgres:13           # Konkreetne versioon on alati parem\n    environment:\n      - POSTGRES_PASSWORD=secret\n      - POSTGRES_DB=myapp\n\n  # Ehitame ise - oma rakenduse kood\n  api:\n    build: ./backend            # Lihtne variant\n    # V\u00d5I detailsem konfiguratsioon:\n    build:\n      context: ./backend\n      dockerfile: Dockerfile.dev\n      args:\n        - PYTHON_VERSION=3.11\n\n  # Web server valmis image'iga\n  web:\n    image: nginx:alpine\n    ports:\n      - \"8080:80\"              # HOST:CONTAINER\n</code></pre> <p>Standardsed teenused nagu PostgreSQL, Redis v\u00f5i Nginx kasutavad tavaliselt valmis image'eid. Need on hoolikalt testitud, optimeeritud ja regulaarselt uuendatud. Oma rakenduse komponendid n\u00f5uavad tavaliselt kohalikku ehitamist Dockerfile'i p\u00f5hjal.</p> <p>Port mapping v\u00f5imaldab container'i sees t\u00f6\u00f6tavaid teenuseid k\u00e4ttesaadavaks teha host s\u00fcsteemist. Mapping \"8080:80\" t\u00e4hendab, et host'i port 8080 suunatakse container'i port 80'le. Turvalisuse seisukohast tuleks avalikuks teha ainult need pordid, mis on t\u00f5esti vajalikud v\u00e4liseks ligip\u00e4\u00e4suks.</p>"},{"location":"docker_orchestration/lecture/#keskkonnamuutujate-haldamine","title":"Keskkonnamuutujate haldamine","text":"<p>Rakendused vajavad konfigureerimist erinevates keskkondades. Andmebaasi parool, API v\u00f5tmed ja debug seadistused erinevad development'i ja production'i keskkondades. Docker Compose toetab keskkonnamuutujate m\u00e4\u00e4ramist mitmel viisil.</p> YAML<pre><code>services:\n  api:\n    environment:\n      # Otse m\u00e4\u00e4ratud v\u00e4\u00e4rtus\n      - NODE_ENV=production\n      - DEBUG=false\n\n      # V\u00f5ta host'i keskkonnas\n      - PATH                     # Kasutab host'i PATH'i\n\n      # .env failist vaikev\u00e4\u00e4rtusega\n      - PORT=${API_PORT:-3000}   # Kui API_PORT puudub, kasuta 3000\n\n      # Keerukas arvutatud v\u00e4\u00e4rtus\n      - DATABASE_URL=postgres://user:${DB_PASSWORD}@database:5432/${DB_NAME}\n</code></pre> <p>Lihtsaim viis on m\u00e4\u00e4rata muutujad otse compose failis, kuid see pole soovitatav tundlike andmete jaoks. Turvalisem on kasutada .env faile, kus tundlikud seadistused hoitakse eraldi failides, mis ei l\u00e4he versioonikontrolli.</p> Text Only<pre><code># .env fail - ei l\u00e4he Git'i\nDB_PASSWORD=supersecret123\nAPI_PORT=5000\nDEBUG=true\nNODE_ENV=development\n\n# Database seadistused\nPOSTGRES_DB=myapp_dev\nPOSTGRES_USER=developer\n</code></pre> YAML<pre><code># docker-compose.yml - kasutab .env faili\nservices:\n  api:\n    environment:\n      - PORT=${API_PORT}\n      - DB_PASSWORD=${DB_PASSWORD}\n      - NODE_ENV=${NODE_ENV}\n\n  database:\n    environment:\n      - POSTGRES_DB=${POSTGRES_DB}\n      - POSTGRES_USER=${POSTGRES_USER}\n      - POSTGRES_PASSWORD=${DB_PASSWORD}\n</code></pre> <p>Environment variables v\u00f5imaldavad sama compose faili kasutada erinevates keskkondades, muutes ainult .env faili sisu. See j\u00e4rgib \"konfigureeri environment'i kaudu\" p\u00f5him\u00f5tet, mis on DevOps maailmas laialdaselt tunnustatud.</p>"},{"location":"docker_orchestration/lecture/#soltuvuste-defineerimine","title":"S\u00f5ltuvuste defineerimine","text":"<p>Reaalsetes rakendustes on teenuste vahel selged s\u00f5ltuvused. API server ei saa t\u00f6\u00f6tada ilma andmebaasita, veebisirvija ei saa API'd kasutada, kui see pole k\u00e4ivitatud. Docker Compose pakub depends_on direktiivi, mis m\u00e4\u00e4rab k\u00e4ivitamise j\u00e4rjekorra.</p> YAML<pre><code>services:\n  frontend:\n    image: nginx:alpine\n    depends_on:\n      - backend                 # Ootab backend'i k\u00e4ivitumist\n\n  backend:\n    build: ./api\n    environment:\n      - DATABASE_URL=postgres://postgres:secret@database:5432/app\n    depends_on:\n      - database               # Ootab database'i k\u00e4ivitumist\n      - cache                  # JA cache'i k\u00e4ivitumist\n\n  database:\n    image: postgres:13         # K\u00e4ivitub esimesena\n    environment:\n      - POSTGRES_PASSWORD=secret\n\n  cache:\n    image: redis:alpine        # K\u00e4ivitub paralleelselt database'iga\n</code></pre> <p>Siiski on oluline m\u00f5ista, et depends_on tagab ainult container'ite k\u00e4ivitamise j\u00e4rjekorra, mitte teenuste valmiduse ootamist. PostgreSQL container v\u00f5ib k\u00e4ivitada, kuid andmebaas ise v\u00f5ib veel initsialiseerumise protsessis olla. T\u00e4iustatud stsenaariumides kasutatakse health check'e, mis kontrollivad teenuse tegelikku valmidust.</p> YAML<pre><code>services:\n  backend:\n    build: ./api\n    depends_on:\n      database:\n        condition: service_healthy  # Ootab health check'i\n\n  database:\n    image: postgres:13\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U postgres\"]\n      interval: 10s              # Kontrolli iga 10 sekundi tagant\n      timeout: 5s                # 5 sekundi timeout\n      retries: 5                 # Max 5 katset\n      start_period: 30s          # Anna 30s k\u00e4ivitumiseks\n</code></pre>"},{"location":"docker_orchestration/lecture/#andmete-sailitamine-ja-volumeid","title":"Andmete s\u00e4ilitamine ja volume'id","text":""},{"location":"docker_orchestration/lecture/#persistent-storage-vajadus","title":"Persistent storage vajadus","text":"<p>Container'id on oma olemuselt ajutised - kui container kustutada ja uuesti luua, kaovad k\u00f5ik selle sees tehtud muudatused. Andmebaasi puhul t\u00e4hendaks see katastroofi, sest k\u00f5ik kasutajate andmed kaoksid. Volume'id lahendavad selle probleemi, v\u00f5imaldades m\u00e4\u00e4rata, millised kaustad tuleb s\u00e4ilitada container'ite eluts\u00fckli v\u00e4liselt.</p> YAML<pre><code>services:\n  database:\n    image: postgres:13\n    environment:\n      - POSTGRES_PASSWORD=secret\n    volumes:\n      - postgres_data:/var/lib/postgresql/data  # Named volume\n\n  cache:\n    image: redis:alpine\n    volumes:\n      - redis_data:/data         # Redis andmed\n\nvolumes:\n  postgres_data:                 # Docker haldab automaatselt\n  redis_data:\n</code></pre> <p>Docker pakub mitut t\u00fc\u00fcpi volume'e, iga\u00fcks oma kasutusjuhtudega. Named volume'id on Docker'i hallatavad ja optimeeritud, bind mount'id \u00fchendavad otse host s\u00fcsteemi kaustadega. Valik s\u00f5ltub sellest, kas tegu on production andmetega v\u00f5i development t\u00f6\u00f6voogudega.</p>"},{"location":"docker_orchestration/lecture/#named-volumeid","title":"Named volume'id","text":"<p>Named volume'id on eelistatud viis production andmete s\u00e4ilitamiseks. Docker haldab nende asukohta ja optimeerib j\u00f5udlust operatsioonis\u00fcsteemi v\u00f5imaluste kohaselt. Need on portaablid erinevate s\u00fcsteemide vahel ja toetavad backup ning restore operatsioone Docker CLI kaudu.</p> <p>Compose failis defineeritakse named volume'id kaks korda - esmalt teenuse juures, m\u00e4\u00e4rates mount point'i, ja seej\u00e4rel globaalselt volumes sektsioonis. See v\u00f5imaldab volume'e jagada mitme teenuse vahel kui vaja.</p>"},{"location":"docker_orchestration/lecture/#bind-mountid-developmentis","title":"Bind mount'id development'is","text":"<p>Development keskkonnas on sageli kasulik, kui koodi muudatused kajastuvad kohe container'is ilma uuesti ehitamata. Bind mount'id v\u00f5imaldavad host s\u00fcsteemi kausta \u00fchendada otse container'isse, luues \"live reload\" efekti.</p> YAML<pre><code>services:\n  web:\n    image: nginx:alpine\n    volumes:\n      # Konfiguratsioonifailid (read-only)\n      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro\n      - ./nginx/ssl:/etc/nginx/ssl:ro\n\n      # Staatilised failid development'is\n      - ./frontend/dist:/usr/share/nginx/html:ro\n\n      # Logid v\u00e4lja host s\u00fcsteemi\n      - ./logs/nginx:/var/log/nginx\n\n  api:\n    build: ./backend\n    volumes:\n      # Live reload - kood muutub, container n\u00e4eb kohe\n      - ./backend/src:/app/src:ro\n      - ./backend/app.py:/app/app.py:ro\n</code></pre> <p>Bind mount'ide kasutamisel tuleb olla ettevaatlik lubadega ja turvalisusega. Read-only mount'id (:ro) on turvalisemad, kui container ei vaja sinna kirjutamist. Production keskkonnas tuleks bind mount'e v\u00e4ltida, sest need loovad s\u00f5ltuvuse host s\u00fcsteemi struktuurist.</p>"},{"location":"docker_orchestration/lecture/#praktiline-naide-taielik-4-teenusega-susteem","title":"Praktiline n\u00e4ide: T\u00e4ielik 4-teenusega s\u00fcsteem","text":"<p>Demonstreerimaks k\u00f5iki \u00f5pitud kontseptsioone, ehitame kasutajate haldamise s\u00fcsteemi, mis koosneb neljast teenusest: Nginx frontend, Python Flask API, PostgreSQL andmebaas ja Redis cache.</p>"},{"location":"docker_orchestration/lecture/#projekti-struktuur","title":"Projekti struktuur","text":"Text Only<pre><code>user-management/\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 .env.example\n\u251c\u2500\u2500 frontend/\n\u2502   \u251c\u2500\u2500 index.html\n\u2502   \u2514\u2500\u2500 nginx.conf\n\u251c\u2500\u2500 backend/\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u251c\u2500\u2500 requirements.txt\n\u2502   \u2514\u2500\u2500 app.py\n\u2514\u2500\u2500 database/\n    \u2514\u2500\u2500 init.sql\n</code></pre>"},{"location":"docker_orchestration/lecture/#backend-implementatsioon","title":"Backend implementatsioon","text":"<p>Python Flask rakendus demonstreerib service discovery ja cache kasutamist:</p> Python<pre><code># backend/app.py\nfrom flask import Flask, jsonify, request\nimport psycopg2\nimport redis\nimport os\nimport json\n\napp = Flask(__name__)\n\n# Andmebaasi \u00fchendus - kasutab teenuse nime!\ndef get_db():\n    return psycopg2.connect(\n        host=os.getenv('DB_HOST', 'database'),    # 'database' on teenuse nimi\n        database=os.getenv('DB_NAME', 'userdb'),\n        user=os.getenv('DB_USER', 'postgres'),\n        password=os.getenv('DB_PASSWORD')\n    )\n\n# Redis \u00fchendus - samuti teenuse nimi\ncache = redis.Redis(\n    host=os.getenv('REDIS_HOST', 'cache'),        # 'cache' on teenuse nimi\n    port=6379,\n    decode_responses=True\n)\n\n@app.route('/api/health')\ndef health():\n    return jsonify({\"status\": \"healthy\", \"service\": \"user-api\"})\n\n@app.route('/api/users')\ndef get_users():\n    # Proovi cache'ist\n    cached = cache.get('users')\n    if cached:\n        return jsonify({\"users\": json.loads(cached), \"source\": \"cache\"})\n\n    # Laadi andmebaasist\n    conn = get_db()\n    cur = conn.cursor()\n    cur.execute(\"SELECT id, name, email FROM users\")\n    users = [{\"id\": r[0], \"name\": r[1], \"email\": r[2]} for r in cur.fetchall()]\n    conn.close()\n\n    # Salvesta cache'isse 60 sekundiks\n    cache.setex('users', 60, json.dumps(users))\n    return jsonify({\"users\": users, \"source\": \"database\"})\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n</code></pre>"},{"location":"docker_orchestration/lecture/#docker-compose-konfiguratsioon","title":"Docker Compose konfiguratsioon","text":"YAML<pre><code>version: '3.8'\n\nservices:\n  # Frontend - Nginx + HTML\n  frontend:\n    image: nginx:alpine\n    ports:\n      - \"${WEB_PORT:-8080}:80\"\n    volumes:\n      - ./frontend/index.html:/usr/share/nginx/html/index.html:ro\n      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf:ro\n    depends_on:\n      - backend\n    restart: unless-stopped\n\n  # Backend - Python Flask API\n  backend:\n    build: ./backend\n    environment:\n      - DB_HOST=database\n      - DB_NAME=${DB_NAME}\n      - DB_USER=${DB_USER}\n      - DB_PASSWORD=${DB_PASSWORD}\n      - REDIS_HOST=cache\n    depends_on:\n      database:\n        condition: service_healthy\n      cache:\n        condition: service_started\n    restart: unless-stopped\n\n  # Database - PostgreSQL\n  database:\n    image: postgres:13\n    environment:\n      - POSTGRES_DB=${DB_NAME}\n      - POSTGRES_USER=${DB_USER}\n      - POSTGRES_PASSWORD=${DB_PASSWORD}\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U ${DB_USER}\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n    restart: unless-stopped\n\n  # Cache - Redis\n  cache:\n    image: redis:7-alpine\n    command: redis-server --appendonly yes\n    volumes:\n      - redis_data:/data\n    restart: unless-stopped\n\nvolumes:\n  postgres_data:\n  redis_data:\n</code></pre>"},{"location":"docker_orchestration/lecture/#environment-konfiguratsioon","title":"Environment konfiguratsioon","text":"Text Only<pre><code># .env - development seadistused\nDB_NAME=userdb\nDB_USER=postgres\nDB_PASSWORD=secret123\nWEB_PORT=8080\n</code></pre> Text Only<pre><code># .env.example - template Git'i jaoks\nDB_NAME=userdb\nDB_USER=postgres\nDB_PASSWORD=change_this_password\nWEB_PORT=8080\n</code></pre>"},{"location":"docker_orchestration/lecture/#kaivitamine-ja-testimine","title":"K\u00e4ivitamine ja testimine","text":"Bash<pre><code># Kopeeri environment variables\ncp .env.example .env\n\n# Kontrolli konfiguratsiooni\ndocker-compose config\n\n# Ehita ja k\u00e4ivita\ndocker-compose up --build -d\n\n# Kontrolli teenuste staatust\ndocker-compose ps\n\n# Vaata logisid\ndocker-compose logs backend\n\n# Testi rakendust\ncurl http://localhost:8080/api/health\ncurl http://localhost:8080/api/users\n</code></pre>"},{"location":"docker_orchestration/lecture/#andmete-sailitamine-ja-volumeid_1","title":"Andmete s\u00e4ilitamine ja volume'id","text":""},{"location":"docker_orchestration/lecture/#persistent-storage-vajadus_1","title":"Persistent storage vajadus","text":"<p>Container'id on oma olemuselt ajutised - kui container kustutada ja uuesti luua, kaovad k\u00f5ik selle sees tehtud muudatused. Andmebaasi puhul t\u00e4hendaks see katastroofi, sest k\u00f5ik kasutajate andmed kaoksid. Volume'id lahendavad selle probleemi, v\u00f5imaldades m\u00e4\u00e4rata, millised kaustad tuleb s\u00e4ilitada container'ite eluts\u00fckli v\u00e4liselt.</p> <p>Docker pakub mitut t\u00fc\u00fcpi volume'e, iga\u00fcks oma kasutusjuhtudega. Named volume'id on Docker'i hallatavad ja optimeeritud, bind mount'id \u00fchendavad otse host s\u00fcsteemi kaustadega. Valik s\u00f5ltub sellest, kas tegu on production andmetega v\u00f5i development t\u00f6\u00f6voogudega.</p>"},{"location":"docker_orchestration/lecture/#named-volumeid_1","title":"Named volume'id","text":"<p>Named volume'id on eelistatud viis production andmete s\u00e4ilitamiseks. Docker haldab nende asukohta ja optimeerib j\u00f5udlust operatsioonis\u00fcsteemi v\u00f5imaluste kohaselt. Need on portaablid erinevate s\u00fcsteemide vahel ja toetavad backup ning restore operatsioone Docker CLI kaudu.</p> <p>Compose failis defineeritakse named volume'id kaks korda - esmalt teenuse juures, m\u00e4\u00e4rates mount point'i, ja seej\u00e4rel globaalselt volumes sektsioonis. See v\u00f5imaldab volume'e jagada mitme teenuse vahel kui vaja.</p>"},{"location":"docker_orchestration/lecture/#bind-mountid-developmentis_1","title":"Bind mount'id development'is","text":"<p>Development keskkonnas on sageli kasulik, kui koodi muudatused kajastuvad kohe container'is ilma uuesti ehitamata. Bind mount'id v\u00f5imaldavad host s\u00fcsteemi kausta \u00fchendada otse container'isse, luues \"live reload\" efekti.</p> <p>Bind mount'ide kasutamisel tuleb olla ettevaatlik lubadega ja turvalisusega. Read-only mount'id (:ro) on turvalisemad, kui container ei vaja sinna kirjutamist. Production keskkonnas tuleks bind mount'e v\u00e4ltida, sest need loovad s\u00f5ltuvuse host s\u00fcsteemi struktuurist.</p>"},{"location":"docker_orchestration/lecture/#vorguarhitektuur-ja-turvalisus","title":"V\u00f5rguarhitektuur ja turvalisus","text":""},{"location":"docker_orchestration/lecture/#automaatne-networki-loomine","title":"Automaatne network'i loomine","text":"<p>Docker Compose loob automaatselt isoleeritud v\u00f5rgu iga projekti jaoks. See t\u00e4hendab, et erinevate projektide container'id ei n\u00e4e \u00fcksteist, pakkudes loomulikku isolatsiooni. V\u00f5rgu nimi tuletakse tavaliselt projekti kausta nimest ja \"default\" liitega.</p> <p>Automaatne v\u00f5rk kasutab bridge driver'it, mis sobib enamiku rakenduste jaoks. K\u00f5ik sama projekti teenused saavad omavahel suhelda, kuid v\u00e4lismaailma ligip\u00e4\u00e4s on kontrollitud port mapping'ute kaudu.</p>"},{"location":"docker_orchestration/lecture/#custom-networkide-kasutamine","title":"Custom network'ide kasutamine","text":"<p>Keerukamates stsenaariumides v\u00f5ib olla vaja luua mitu v\u00f5rku, et eraldada teenused turvalisuse kaalutlustel. N\u00e4iteks v\u00f5ib luua frontend v\u00f5rgu web serveri ja API vahel ning backend v\u00f5rgu API ja andmebaasi vahel. See v\u00f5imaldab andmebaasil olla t\u00e4iesti isoleeritud v\u00e4lismaailmast.</p> <p>Network'ide defineerimine toimub sarnaselt volume'idega - esmalt kasutatakse neid teenuste juures ja seej\u00e4rel defineeritakse globaalselt networks sektsioonis. Internal network'id ei saa ligip\u00e4\u00e4su v\u00e4lismaailma, pakkudes maksimaalset isolatsiooni.</p>"},{"location":"docker_orchestration/lecture/#development-workflowde-optimeerimine","title":"Development workflow'de optimeerimine","text":""},{"location":"docker_orchestration/lecture/#live-reload-ja-kiire-iteratsioon","title":"Live reload ja kiire iteratsioon","text":"<p>Development keskkonnas on produktiivsuse jaoks kriitiline, et koodimuudatused kajastuksid kiiresti t\u00f6\u00f6tavas rakenduses. Docker Compose toetab seda bind mount'ide ja development-spetsiifiliste image'ite kaudu.</p> <p>Multi-stage Dockerfile'id v\u00f5imaldavad luua eraldi development ja production build'e samast l\u00e4htefailist. Development stage v\u00f5ib sisaldada lisainstrumente nagu debugger'id ja file watcher'id, samas kui production stage on optimeeritud suuruse ja j\u00f5udluse jaoks.</p>"},{"location":"docker_orchestration/lecture/#environment-spetsiifilised-konfiguratsioonid","title":"Environment-spetsiifilised konfiguratsioonid","text":"<p>\u00dcks Docker Compose v\u00f5tmeeeliseid on v\u00f5imalus kasutada mitut compose faili korraga. Base fail sisaldab \u00fchiseid seadistusi, samas kui environment-spetsiifilised failid sisaldavad ainult erinevusi.</p> <p>Development'i jaoks v\u00f5ib docker-compose.override.yml fail lisada debug porte ja bind mount'e, samas kui production fail lisab resource limit'id ja health check'e. See v\u00f5imaldab hoida DRY (Don't Repeat Yourself) p\u00f5him\u00f5tet konfiguratsioonis.</p>"},{"location":"docker_orchestration/lecture/#monitoring-ja-debugging","title":"Monitoring ja debugging","text":"<p>Production-ready s\u00fcsteemid vajavad monitooringut ja logimist. Docker Compose toetab erinevaid logging driver'eid ja resource monitoring'ut. Health check'id v\u00f5imaldavad automaatselt tuvastada ja taask\u00e4ivitada mittet\u00f6\u00f6tavaid teenuseid.</p> <p>Debugging tools'id nagu container'isse sisenemine, logide vaatamine ja resource kasutuse monitooring on olulised nii development kui production keskkonnas. Docker Compose pakub mugavaid k\u00e4ske nende operatsioonide jaoks.</p>"},{"location":"docker_orchestration/lecture/#turvalisus-ja-production-seadistused","title":"Turvalisus ja production seadistused","text":""},{"location":"docker_orchestration/lecture/#secrets-management","title":"Secrets management","text":"<p>Tundlike andmete nagu paroolide ja API v\u00f5tmete k\u00e4itlemine n\u00f5uab erilist t\u00e4helepanu. Need ei tohi kunagi sattuda versioonikontrolli ega olla hard-coded compose failides. Docker Compose toetab secrets s\u00fcsteemi, mis v\u00f5imaldab tundlikke andmeid turvaliselt container'itesse edastada.</p> <p>Development keskkonnas v\u00f5ib kasutada .env faile, kuid production'is tuleks kaaluda v\u00e4liseid secrets management s\u00fcsteeme nagu HashiCorp Vault v\u00f5i cloud provider'ite native lahendusi.</p>"},{"location":"docker_orchestration/lecture/#network-turvalisus","title":"Network turvalisus","text":"<p>Default network isolatsioon pakub head algtaset turvalisust, kuid t\u00e4iendavad meetmed v\u00f5ivad olla vajalikud. Internal network'id, port'ide minimaalne avamine ja non-root user'id container'ites parandavad turvalisust m\u00e4rkimisv\u00e4\u00e4rselt.</p> <p>Reverse proxy nagu Nginx v\u00f5ib pakkuda lisaturvalisust, TLS terminatsiooni ja rate limiting'ut. API teenused ei peaks olema otse internetist k\u00e4ttesaadavad.</p>"},{"location":"docker_orchestration/lecture/#resource-management","title":"Resource management","text":"<p>Production keskkonnas on oluline piirata container'ite resource kasutust, et v\u00e4ltida \u00fche teenuse poolt kogu s\u00fcsteemi monopoliseerimist. Memory ja CPU limit'id kaitsevad s\u00fcsteemi stabilsuse eest.</p> <p>Restart poliitikad tagavad, et teenused taask\u00e4ivitatakse automaatselt vigade korral. \"unless-stopped\" poliitika on tavaliselt hea valik, kuna see ei taask\u00e4ivita teenuseid, mis on tahtlikult peatatud.</p>"},{"location":"docker_orchestration/lecture/#jargmised-sammud-orkestreerimises","title":"J\u00e4rgmised sammud orkestreerimises","text":"<p>Docker Compose on suurep\u00e4rane \u00f5ppimise platvorm ja sobib v\u00e4ikeste kuni keskmiste production deployment'ide jaoks. Suurema skaala ja keerukama orkestreerimise jaoks tuleks kaaluda Kubernetes'e, mis pakub automaatset skaleerimist, advanced networking'ut ja enterprise-level funktsioone.</p> <p>Container orkestreerimise omandamine Docker Compose'iga annab tugeva aluse edasiseks arengus. Siin \u00f5pitud kontseptsioonid - service discovery, volume management, networking - kehtivad ka keerukamates orkestreerimise platvormides.</p> <p>J\u00e4tkuks tasub uurida CI/CD integreerimist, infrastructure as code ty\u00f6riistade nagu Terraform kasutamist ja monitoring stack'ide nagu Prometheus ja Grafana seadistamist Docker Compose keskkondades.</p>"},{"location":"git_version_control/homework/","title":"Git Projekti Portfolio - Kodut\u00f6\u00f6","text":"<p>Eesm\u00e4rk: Demonstreerida Git'i ja GitHub'i oskusi praktilise t\u00f6\u00f6 kaudu  </p>"},{"location":"git_version_control/homework/#ulesande-kirjeldus","title":"\u00dclesande Kirjeldus","text":"<p>Looge lihtne projekt, mis demonstreerib k\u00f5iki Git'i ja GitHub'i peamisi oskusi. Fookus on Git workflow'l, mitte koodi keerukusel. Teie \u00fclesanne on luua t\u00f6\u00f6tav Git/GitHub repositoorium koos \u00f5ige branching strateegiaga.</p>"},{"location":"git_version_control/homework/#oluline-oige-git-flow","title":"Oluline: \u00d5ige Git Flow","text":"<pre><code>gitgraph\n    commit id: \"Initial\"\n\n    branch develop\n    checkout develop\n    commit id: \"Setup\"\n\n    branch feature/system-info\n    checkout feature/system-info\n    commit id: \"Add script\"\n    commit id: \"Add docs\"\n\n    checkout develop\n    merge feature/system-info\n    commit id: \"Feature merged\"\n\n    checkout main\n    merge develop\n    commit id: \"Release v1.0\"</code></pre> <p>ALATI j\u00e4rgige: feature \u2192 develop \u2192 main</p> <p>MITTE KUNAGI: feature \u2192 main</p>"},{"location":"git_version_control/homework/#1-repository-loomine-ja-seadistamine","title":"1. Repository Loomine ja Seadistamine","text":""},{"location":"git_version_control/homework/#11-github-repository-loomine","title":"1.1 GitHub Repository Loomine","text":"<p>Minge GitHub'i ja looge uus repository:</p> <ol> <li>Klikkige rohelist \"New\" nuppu</li> <li>Repository nimi: <code>its-git-demo</code> (v\u00f5i oma valik)</li> <li>Tehke repository Public</li> <li>M\u00e4rkige \"Add a README file\"</li> <li>M\u00e4rkige \"Add .gitignore\" ja valige \"Node\" template</li> <li>M\u00e4rkige \"Choose a license\" ja valige \"MIT License\"</li> <li>Klikkige \"Create repository\"</li> </ol>"},{"location":"git_version_control/homework/#12-repository-kloonimine","title":"1.2 Repository Kloonimine","text":"<p>Kloonige repositoorium oma arvutisse:</p> Bash<pre><code>git clone https://github.com/TEIE-KASUTAJANIMI/its-git-demo.git\ncd its-git-demo\n</code></pre>"},{"location":"git_version_control/homework/#13-pohifailide-loomine","title":"1.3 P\u00f5hifailide Loomine","text":"<p>Muutke README.md faili ja lisage l\u00f5ppu:</p> Markdown<pre><code>## Projekti eesm\u00e4rk\nSee projekt demonstreerib Git'i ja GitHub'i oskusi.\n</code></pre> <p>Muutke .gitignore faili - lisage l\u00f5ppu:</p> Text Only<pre><code>*.log\n*.tmp\n.env\n</code></pre> <p>Tehke esimene commit:</p> Bash<pre><code>git add .\ngit commit -m \"docs: update README and gitignore\"\ngit push origin main\n</code></pre> <p>Kontrollpunkt: GitHub'is peaks n\u00e4ha teie commit'i.</p>"},{"location":"git_version_control/homework/#2-branching-strateegia-seadistamine","title":"2. Branching Strateegia Seadistamine","text":""},{"location":"git_version_control/homework/#21-develop-branch-loomine","title":"2.1 Develop Branch Loomine","text":"<p>Looge develop branch main'ist:</p> Bash<pre><code>git checkout -b develop\n</code></pre> <p>Push'ige develop branch GitHub'i:</p> Bash<pre><code>git push origin develop\n</code></pre>"},{"location":"git_version_control/homework/#22-feature-branch-loomine","title":"2.2 Feature Branch Loomine","text":"<p>Looge feature branch develop'ist:</p> Bash<pre><code>git checkout -b feature/system-info\n</code></pre> <p>Kontrollpunkt: Teil peaks olema 3 branch'i: main, develop, feature/system-info.</p>"},{"location":"git_version_control/homework/#3-pohifunktsionaalsuse-arendamine","title":"3. P\u00f5hifunktsionaalsuse Arendamine","text":""},{"location":"git_version_control/homework/#31-system-info-script-loomine","title":"3.1 System Info Script Loomine","text":"<p>Looge fail nimega <code>system_info.sh</code>:</p> Bash<pre><code>touch system_info.sh\n</code></pre> <p>Avage fail tekstiredaktoris ja sisestage:</p> Bash<pre><code>#!/bin/bash\necho \"=== System Information ===\"\necho \"Date: $(date)\"\necho \"User: $(whoami)\"\necho \"Current directory: $(pwd)\"\necho \"Home directory: $HOME\"\necho \"\"\necho \"=== Disk Usage ===\"\ndf -h | head -5\necho \"\"\necho \"=== Memory Info ===\"\nfree -h 2&gt;/dev/null || echo \"Memory info not available\"\necho \"\"\necho \"Script completed successfully!\"\n</code></pre> <p>Salvestage fail.</p> <p>Tehke script k\u00e4ivitatavaks:</p> Bash<pre><code>chmod +x system_info.sh\n</code></pre> <p>Testige script'i:</p> Bash<pre><code>./system_info.sh\n</code></pre>"},{"location":"git_version_control/homework/#32-dokumentatsiooni-loomine","title":"3.2 Dokumentatsiooni Loomine","text":"<p>Looge fail nimega <code>USAGE.md</code>:</p> Bash<pre><code>touch USAGE.md\n</code></pre> <p>Avage fail ja sisestage:</p> Markdown<pre><code># Usage Guide\n\n## System Info Script\n\n### Purpose\nShows basic system information.\n\n### Usage\n```bash\n./system_info.sh\n</code></pre>"},{"location":"git_version_control/homework/#output","title":"Output","text":"<p>Script displays: - Current date and time - Current user name - Current directory path - Disk usage information - Memory information</p>"},{"location":"git_version_control/homework/#requirements","title":"Requirements","text":"<ul> <li>Bash shell</li> <li>Unix/Linux system Text Only<pre><code>Salvestage fail.\n\n### 3.3 GitHub Actions Seadistamine\n\nLooge kataloogid:\n\n```bash\nmkdir -p .github/workflows\n</code></pre></li> </ul> <p>Looge fail <code>.github/workflows/test.yml</code>:</p> Bash<pre><code>touch .github/workflows/test.yml\n</code></pre> <p>Avage fail ja sisestage:</p> YAML<pre><code>name: Test\non: [push, pull_request]\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - run: |\n        bash -n system_info.sh\n        chmod +x system_info.sh\n        ./system_info.sh\n</code></pre> <p>Salvestage fail.</p>"},{"location":"git_version_control/homework/#34-muudatuste-commitimine","title":"3.4 Muudatuste Commit'imine","text":"<p>Lisage k\u00f5ik failid:</p> Bash<pre><code>git add .\n</code></pre> <p>Kontrollige olukorda:</p> Bash<pre><code>git status\n</code></pre> <p>Tehke commit:</p> Bash<pre><code>git commit -m \"feat: add system info script and documentation\"\n</code></pre> <p>Push'ige feature branch:</p> Bash<pre><code>git push origin feature/system-info\n</code></pre> <p>Kontrollpunkt: GitHub'is peaks n\u00e4ha teie feature branch'i.</p>"},{"location":"git_version_control/homework/#4-github-features-kasutamine","title":"4. GitHub Features Kasutamine","text":""},{"location":"git_version_control/homework/#41-issues-loomine","title":"4.1 Issues Loomine","text":"<p>Minge GitHub'i oma repository lehele:</p> <ol> <li>Klikkige \"Issues\" tab'i</li> <li>Klikkige \"New issue\"</li> <li>Pealkiri: \"Add system info script\"</li> <li>Kirjeldus: \"Need to create a script that shows system information\"</li> <li>Lisage label \"enhancement\"</li> <li>Create issue</li> </ol> <p>Looge teine issue:</p> <ol> <li>Pealkiri: \"Improve documentation\"</li> <li>Kirjeldus: \"Add usage documentation for the scripts\"</li> <li>Lisage label \"documentation\"</li> <li>Create issue</li> </ol>"},{"location":"git_version_control/homework/#42-pull-request-loomine","title":"4.2 Pull Request Loomine","text":"<p>GitHub'is:</p> <ol> <li>Klikkige \"Pull requests\" tab'i</li> <li>Klikkige \"New pull request\"</li> <li>Base branch: <code>develop</code> (OLULINE!)</li> <li>Compare branch: <code>feature/system-info</code></li> <li>Pealkiri: \"feat: add system info script and docs\"</li> <li>Kirjeldus: \"This PR adds system information script with documentation. Closes #1\"</li> <li>Create pull request</li> <li>Merge pull request</li> <li>Delete branch</li> </ol>"},{"location":"git_version_control/homework/#43-cleanup-parast-mergei","title":"4.3 Cleanup p\u00e4rast Merge'i","text":"<p>Kohalikult:</p> Bash<pre><code>git checkout develop\ngit pull origin develop\ngit branch -d feature/system-info\ngit push origin --delete feature/system-info\n</code></pre>"},{"location":"git_version_control/homework/#44-github-actions-kontrollimine","title":"4.4 GitHub Actions Kontrollimine","text":"<p>Minge GitHub'is \"Actions\" tab'ile ja kontrollige, et workflow t\u00f6\u00f6tab.</p> <p>Kontrollpunkt: Actions peaks n\u00e4itama rohelist checkmark'i.</p>"},{"location":"git_version_control/homework/#5-advanced-git-features","title":"5. Advanced Git Features","text":""},{"location":"git_version_control/homework/#51-merge-conflict-loomine-ja-lahendamine","title":"5.1 Merge Conflict Loomine ja Lahendamine","text":"<p>Develop branch'is:</p> Bash<pre><code>git checkout develop\n</code></pre> <p>Avage <code>README.md</code> ja lisage l\u00f5ppu:</p> Markdown<pre><code>## Status\nDevelopment version - active work in progress.\n</code></pre> <p>Commit'ige:</p> Bash<pre><code>git commit -am \"docs: update status in develop\"\n</code></pre> <p>Main branch'is:</p> Bash<pre><code>git checkout main\n</code></pre> <p>Avage <code>README.md</code> ja lisage sama koha l\u00e4hedale:</p> Markdown<pre><code>## Status\nStable release version.\n</code></pre> <p>Commit'ige:</p> Bash<pre><code>git commit -am \"docs: update status in main\"\n</code></pre> <p>Proovige merge'ida develop \u2192 main:</p> Bash<pre><code>git merge develop\n</code></pre> <p>Git teeb konflikti! Avage <code>README.md</code> ja lahendage konflikt:</p> <ol> <li>Leidke konfliktim\u00e4rgid (<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>, <code>=======</code>, <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>)</li> <li>Otsustage, millist versiooni hoida</li> <li>Eemaldage konfliktim\u00e4rgid</li> <li>Salvestage fail</li> </ol> <p>L\u00f5petage merge:</p> Bash<pre><code>git add README.md\ngit commit\n</code></pre>"},{"location":"git_version_control/homework/#52-tagged-release-loomine","title":"5.2 Tagged Release Loomine","text":"<p>Tag'ige praegune versioon:</p> Bash<pre><code>git tag v1.0.0\n</code></pre> <p>Push'ige tag:</p> Bash<pre><code>git push origin v1.0.0\n</code></pre> <p>GitHub'is looge Release:</p> <ol> <li>Minge \"Releases\" \u2192 \"Create a new release\"</li> <li>Tag: v1.0.0</li> <li>Title: \"Version 1.0.0\"</li> <li>Kirjeldus: \"First stable release with system info script\"</li> <li>Publish release</li> </ol> <p>Kontrollpunkt: GitHub'is peaks n\u00e4ha v1.0.0 release'i.</p>"},{"location":"git_version_control/homework/#6-projekti-lopetamine","title":"6. Projekti L\u00f5petamine","text":""},{"location":"git_version_control/homework/#61-readme-uuendamine","title":"6.1 README Uuendamine","text":"<p>Minge develop branch'ile:</p> Bash<pre><code>git checkout develop\n</code></pre> <p>Avage <code>README.md</code> ja asendage kogu sisu:</p> Markdown<pre><code># Git Demo Project\n\nLihtne projekt Git ja GitHub oskuste demonstreerimiseks.\n\n## Eesm\u00e4rk\nSee projekt n\u00e4itab:\n- Git branching ja merging\n- GitHub collaboration\n- Automatiseeritud testimine\n- Dokumentatsiooni haldus\n\n## Git Oskused\n- \u2705 Repository seadistamine\n- \u2705 Feature branch workflow\n- \u2705 Merge conflict lahendamine\n- \u2705 Pull Request'id\n- \u2705 GitHub Actions\n- \u2705 Tagged release'id\n\n## Failid\n- `system_info.sh` - S\u00fcsteemi info script\n- `USAGE.md` - Kasutamise juhend\n- `.github/workflows/test.yml` - Automaatne testimine\n\n## Kasutamine\n```bash\n./system_info.sh\n</code></pre> <p>See on \u00f5ppeprojekt Git workflow demonstreerimiseks. Text Only<pre><code>Commit'ige:\n\n```bash\ngit commit -am \"docs: update project README\"\n</code></pre></p>"},{"location":"git_version_control/homework/#62-loplik-release","title":"6.2 L\u00f5plik Release","text":"<p>Merge develop \u2192 main:</p> Bash<pre><code>git checkout main\ngit merge develop\n</code></pre> <p>Tag'ige uus versioon:</p> Bash<pre><code>git tag v1.1.0\n</code></pre> <p>Push'ige k\u00f5ik:</p> Bash<pre><code>git push origin main\ngit push origin develop\ngit push origin v1.1.0\n</code></pre> <p>GitHub'is looge v1.1.0 release.</p>"},{"location":"git_version_control/homework/#esitamine","title":"Esitamine","text":"<p>Esitage GitHub repository link:</p> <p><code>https://github.com/TEIE-KASUTAJANIMI/its-git-demo</code></p> <p>Repository peab sisaldama: - \u2705 V\u00e4hemalt 10 commit'i - \u2705 Mitut branch'i (main, develop, feature) - \u2705 Issues ja Pull Request'id - \u2705 T\u00f6\u00f6tavat GitHub Actions workflow'd - \u2705 V\u00e4hemalt 2 tagged release'i - \u2705 Merge conflict'i lahendamist commit'ides - \u2705 Kvaliteetseid commit s\u00f5numeid</p>"},{"location":"git_version_control/lab/","title":"Git Versioonikontrolli Labor: Git &amp; GitHub Praktiline Rakendamine","text":"<p>Eesm\u00e4rk: Praktiliselt harjutada k\u00f5iki Git'i peamisi funktsioone ja GitHub workflow'd</p>"},{"location":"git_version_control/lab/#1-git-alused-ja-kohalik-kasutamine","title":"1. Git Alused ja Kohalik Kasutamine","text":""},{"location":"git_version_control/lab/#11-git-seadistamine-ja-esimene-repository","title":"1.1 Git Seadistamine ja Esimene Repository","text":"<p>Enne Git'i kasutamist tuleb see korralikult seadistada. Git vajab kasutaja identiteeti, et teada, kes muudatusi teeb.</p> <p>Avage terminal ja kontrollige, kas Git on teie arvutis installeeritud:</p> Bash<pre><code>git --version\n</code></pre> <p>Kui Git ei ole installeeritud, installige see oma operatsioonis\u00fcsteemi jaoks.</p> <p>Seadistage oma kasutajainfo (kasutage oma tegelikke andmeid):</p> Bash<pre><code>git config --global user.name \"Teie Nimi\"\n</code></pre> <p>Seadistage email:</p> Bash<pre><code>git config --global user.email \"teie.email@example.com\"\n</code></pre> <p>Kontrollige, et seadistused on \u00f5igesti salvestatud:</p> Bash<pre><code>git config --list\n</code></pre> <p>Valikuliselt m\u00e4\u00e4rake tekstiredaktor:</p> Bash<pre><code>git config --global core.editor \"code --wait\"\n</code></pre> <p>Looge uus kaust oma projektile:</p> Bash<pre><code>mkdir git-practice-lab\n</code></pre> <p>Minge selle kausta sisse:</p> Bash<pre><code>cd git-practice-lab\n</code></pre> <p>Algatage selles kaustas Git repository:</p> Bash<pre><code>git init\n</code></pre> <p>Kontrollige repository olukorda:</p> Bash<pre><code>git status\n</code></pre> <p>Looge README fail k\u00e4sitsi v\u00f5i k\u00e4sureaga:</p> Bash<pre><code>echo \"# Git Praktika Projekt\" &gt; README.md\n</code></pre> <p>Lisage faili veel sisu:</p> Bash<pre><code>echo \"See on Git'i \u00f5ppimise projekt.\" &gt;&gt; README.md\necho \"\" &gt;&gt; README.md\necho \"Siin harjutame k\u00f5iki Git'i p\u00f5hifunktsioone.\" &gt;&gt; README.md\n</code></pre> <p>Kontrollige uuesti repository olukorda:</p> Bash<pre><code>git status\n</code></pre> <p>Lisage README fail staging area'sse:</p> Bash<pre><code>git add README.md\n</code></pre> <p>Kontrollige olukorda p\u00e4rast add k\u00e4sku:</p> Bash<pre><code>git status\n</code></pre> <p>Tehke oma esimene commit:</p> Bash<pre><code>git commit -m \"Algne commit: lisa README fail\"\n</code></pre> <p>Vaadake commit'ide ajalugu:</p> Bash<pre><code>git log\n</code></pre> <p>Vaadake ka l\u00fchemat versiooni:</p> Bash<pre><code>git log --oneline\n</code></pre> <p>Kontrollpunkt: Kontrollige, et teil on <code>.git</code> kaust ja \u00fcks commit ajaloos.</p>"},{"location":"git_version_control/lab/#12-failide-haldamine-ja-workflow","title":"1.2 Failide Haldamine ja Workflow","text":"<p>Git'i p\u00f5hiline t\u00f6\u00f6voog koosneb kolmest etapist: t\u00f6\u00f6kataloog \u2192 staging area \u2192 repository. Harjutame seda workflow'd.</p> <p>Looge uus Python fail nimega <code>kalkulaator.py</code>:</p> Bash<pre><code>touch kalkulaator.py\n</code></pre> <p>Avage fail tekstiredaktoris ja sisestage j\u00e4rgmine kood:</p> Python<pre><code>def liida(a, b):\n    \"\"\"Liida kaks arvu.\"\"\"\n    return a + b\n\ndef lahuta(a, b):\n    \"\"\"Lahuta teine arv esimesest.\"\"\" \n    return a - b\n\nif __name__ == \"__main__\":\n    print(\"Kalkulaator: 5 + 3 =\", liida(5, 3))\n    print(\"Kalkulaator: 10 - 4 =\", lahuta(10, 4))\n</code></pre> <p>Salvestage fail ja sulgege redaktor.</p> <p>Kontrollige repository olukorda:</p> Bash<pre><code>git status\n</code></pre> <p>Lisage fail staging area'sse:</p> Bash<pre><code>git add kalkulaator.py\n</code></pre> <p>Kontrollige olukorda p\u00e4rast add k\u00e4sku:</p> Bash<pre><code>git status\n</code></pre> <p>Tehke commit:</p> Bash<pre><code>git commit -m \"Lisa p\u00f5hiline kalkulaator\"\n</code></pre> <p>N\u00fc\u00fcd laiendame kalkulaatorit. Avage <code>kalkulaator.py</code> uuesti ja lisage faili l\u00f5ppu:</p> Python<pre><code>def korruta(a, b):\n    \"\"\"Korruta kaks arvu.\"\"\"\n    return a * b\n\ndef jaga(a, b):\n    \"\"\"Jaga esimene arv teisega.\"\"\"\n    if b != 0:\n        return a / b\n    return 'Viga: nulliga jagamine!'\n</code></pre> <p>Salvestage fail.</p> <p>Vaadake, millised muudatused on tehtud:</p> Bash<pre><code>git diff\n</code></pre> <p>Kontrollige repository olukorda:</p> Bash<pre><code>git status\n</code></pre> <p>Lisage muudatused staging area'sse:</p> Bash<pre><code>git add kalkulaator.py\n</code></pre> <p>Tehke commit:</p> Bash<pre><code>git commit -m \"Lisa korrutamise ja jagamise funktsioonid\"\n</code></pre> <pre><code>graph TD\n    WD[T\u00f6\u00f6kataloog&lt;br/&gt;Working Directory]\n    SA[Staging Area&lt;br/&gt;Index]\n    LR[Repository&lt;br/&gt;Local]\n\n    WD --&gt;|git add| SA\n    SA --&gt;|git commit| LR\n    LR --&gt;|git checkout| WD\n\n    style WD fill:#e1f5fe\n    style SA fill:#fff3e0\n    style LR fill:#e8f5e8</code></pre>"},{"location":"git_version_control/lab/#13-taiendavad-git-operatsioonid","title":"1.3 T\u00e4iendavad Git Operatsioonid","text":"<p>Looge uus Python fail:</p> Bash<pre><code>touch tervitus.py\n</code></pre> <p>Avage fail ja sisestage:</p> Python<pre><code>print(\"Tere, Git maailm!\")\n</code></pre> <p>Salvestage fail.</p> <p>Looge <code>.gitignore</code> fail:</p> Bash<pre><code>touch .gitignore\n</code></pre> <p>Avage <code>.gitignore</code> ja sisestage:</p> Text Only<pre><code>*.pyc\n__pycache__/\n.env\n*.log\n</code></pre> <p>Salvestage fail.</p> <p>Lisage m\u00f5lemad failid korraga:</p> Bash<pre><code>git add .\n</code></pre> <p>Kontrollige olukorda:</p> Bash<pre><code>git status\n</code></pre> <p>Tehke commit:</p> Bash<pre><code>git commit -m \"Lisa tervitusskript ja gitignore\"\n</code></pre> <p>N\u00fc\u00fcd harjutame muudatuste tagasiv\u00f5tmist. Avage <code>kalkulaator.py</code> ja lisage faili l\u00f5ppu:</p> Python<pre><code>print(\"Vigane kood siin\")\n</code></pre> <p>Salvestage fail.</p> <p>Vaadake muudatust:</p> Bash<pre><code>git diff\n</code></pre> <p>V\u00f5tke muudatus tagasi:</p> Bash<pre><code>git restore kalkulaator.py\n</code></pre> <p>Kontrollige, et muudatus on tagasi v\u00f5etud:</p> Bash<pre><code>git status\n</code></pre> <p>Kontrollpunkt: Teil peaks olema 3-4 commit'i erinevate failidega.</p>"},{"location":"git_version_control/lab/#2-branching-ja-merging","title":"2. Branching ja Merging","text":""},{"location":"git_version_control/lab/#21-harude-loomine-ja-arendamine","title":"2.1 Harude Loomine ja Arendamine","text":"<p>Git'i harud v\u00f5imaldavad parallel arendust. Loome kaks erinevat feature haru.</p> <p>Vaadake praeguseid harusid:</p> Bash<pre><code>git branch\n</code></pre> <p>Looge uus haru ja l\u00fclituge sellele:</p> Bash<pre><code>git checkout -b feature/string-utils\n</code></pre> <p>Looge uus Python fail:</p> Bash<pre><code>touch string_tools.py\n</code></pre> <p>Avage fail ja sisestage:</p> Python<pre><code>def p\u00f6\u00f6rda_tekst(tekst):\n    \"\"\"P\u00f6\u00f6ra tekst tagurpidi.\"\"\"\n    return tekst[::-1]\n\ndef loe_s\u00f5nu(tekst):\n    \"\"\"Loe s\u00f5nade arv tekstis.\"\"\"\n    return len(tekst.split())\n\ndef suure_t\u00e4hega(tekst):\n    \"\"\"Muuda iga s\u00f5na esimene t\u00e4ht suureks.\"\"\"\n    return ' '.join(s\u00f5na.capitalize() for s\u00f5na in tekst.split())\n\nif __name__ == \"__main__\":\n    test_tekst = \"tere git maailm\"\n    print(\"Algne:\", test_tekst)\n    print(\"Tagurpidi:\", p\u00f6\u00f6rda_tekst(test_tekst))\n    print(\"S\u00f5nade arv:\", loe_s\u00f5nu(test_tekst))\n    print(\"Suurt\u00e4htedega:\", suure_t\u00e4hega(test_tekst))\n</code></pre> <p>Salvestage fail.</p> <p>Lisage fail ja tehke commit:</p> Bash<pre><code>git add string_tools.py\ngit commit -m \"Lisa string'ide t\u00f6\u00f6tlemise moodul\"\n</code></pre> <p>Looge teine feature haru:</p> Bash<pre><code>git checkout -b feature/advanced-math\n</code></pre> <p>Looge uus Python fail:</p> Bash<pre><code>touch t\u00e4psem_matemaatika.py\n</code></pre> <p>Avage fail ja sisestage:</p> Python<pre><code>import math\n\ndef astenda(alus, eksponent):\n    \"\"\"T\u00f5sta arv astmesse.\"\"\"\n    return alus ** eksponent\n\ndef ruutjuur(arv):\n    \"\"\"Arvuta ruutjuur.\"\"\"\n    if arv &lt; 0:\n        return \"Viga: negatiivne arv\"\n    return math.sqrt(arv)\n\ndef faktoriaal(n):\n    \"\"\"Arvuta faktoriaal.\"\"\"\n    if n &lt; 0:\n        return \"Viga: negatiivne arv\"\n    if n &lt;= 1:\n        return 1\n    return n * faktoriaal(n - 1)\n\nif __name__ == \"__main__\":\n    print(\"2^3 =\", astenda(2, 3))\n    print(\"\u221a16 =\", ruutjuur(16))\n    print(\"5! =\", faktoriaal(5))\n</code></pre> <p>Salvestage fail.</p> <p>Lisage fail ja tehke commit:</p> Bash<pre><code>git add t\u00e4psem_matemaatika.py\ngit commit -m \"Lisa t\u00e4psema matemaatika moodul\"\n</code></pre> <p>Vaadake harude ajalugu graafiliselt:</p> Bash<pre><code>git log --oneline --graph --all\n</code></pre> <pre><code>gitgraph\n    commit id: \"README\"\n    commit id: \"Kalkulaator\"\n    commit id: \"Tervitus + .gitignore\"\n\n    branch feature/string-utils\n    checkout feature/string-utils\n    commit id: \"String tools\"\n\n    checkout main\n    branch feature/advanced-math\n    checkout feature/advanced-math\n    commit id: \"Advanced math\"\n\n    checkout main</code></pre>"},{"location":"git_version_control/lab/#22-harude-mergeimine","title":"2.2 Harude Merge'imine","text":"<p>Minge main harule:</p> Bash<pre><code>git checkout main\n</code></pre> <p>Merge'ige string-utils haru:</p> Bash<pre><code>git merge feature/string-utils\n</code></pre> <p>Testage tulemust:</p> Bash<pre><code>python3 string_tools.py\n</code></pre> <p>Merge'ige advanced-math haru:</p> Bash<pre><code>git merge feature/advanced-math\n</code></pre> <p>Testage:</p> Bash<pre><code>python3 t\u00e4psem_matemaatika.py\n</code></pre> <p>Vaadake l\u00f5plikku ajalugu:</p> Bash<pre><code>git log --oneline --graph\n</code></pre>"},{"location":"git_version_control/lab/#23-merge-konfliktide-lahendamine","title":"2.3 Merge Konfliktide Lahendamine","text":"<p>Loome tahtlikult merge konflikti, et harjutada selle lahendamist.</p> <p>Looge konflikt tekitav haru:</p> Bash<pre><code>git checkout -b fix/kalkulaator-v\u00e4ljund\n</code></pre> <p>Avage <code>kalkulaator.py</code> ja muutke print laused:</p> Python<pre><code>if __name__ == \"__main__\":\n    print(\"KALKULAATOR: 5 + 3 =\", liida(5, 3))\n    print(\"KALKULAATOR: 10 - 4 =\", lahuta(10, 4))\n</code></pre> <p>Salvestage fail.</p> <p>Lisage muudatus ja tehke commit:</p> Bash<pre><code>git add kalkulaator.py\ngit commit -m \"Muuda v\u00e4ljund suurt\u00e4htedega\"\n</code></pre> <p>Minge main harule:</p> Bash<pre><code>git checkout main\n</code></pre> <p>Avage <code>kalkulaator.py</code> ja muutke print laused teisiti:</p> Python<pre><code>if __name__ == \"__main__\":\n    print(\"Arvutus: 5 + 3 =\", liida(5, 3))\n    print(\"Arvutus: 10 - 4 =\", lahuta(10, 4))\n</code></pre> <p>Salvestage fail.</p> <p>Lisage muudatus ja tehke commit:</p> Bash<pre><code>git add kalkulaator.py\ngit commit -m \"Muuda v\u00e4ljund l\u00fchemaks\"\n</code></pre> <p>Proovige merge'ida - tekib konflikt:</p> Bash<pre><code>git merge fix/kalkulaator-v\u00e4ljund\n</code></pre> <p>Vaadake konflikti:</p> Bash<pre><code>cat kalkulaator.py\n</code></pre> <p>Avage <code>kalkulaator.py</code> tekstiredaktoris ja lahendage konflikt. Eemaldage konfliktim\u00e4rgid (<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>, <code>=======</code>, <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>) ja valige sobiv versioon.</p> <p>N\u00e4iteks j\u00e4tke:</p> Python<pre><code>if __name__ == \"__main__\":\n    print(\"KALKULAATOR: 5 + 3 =\", liida(5, 3))\n    print(\"KALKULAATOR: 10 - 4 =\", lahuta(10, 4))\n</code></pre> <p>Salvestage fail.</p> <p>Lisage lahendatud fail:</p> Bash<pre><code>git add kalkulaator.py\n</code></pre> <p>L\u00f5petage merge:</p> Bash<pre><code>git commit\n</code></pre> <p>Kustutage kasutatud haru:</p> Bash<pre><code>git branch -d fix/kalkulaator-v\u00e4ljund\n</code></pre> <p>Kontrollpunkt: Olete edukalt merge konflikti lahendanud.</p>"},{"location":"git_version_control/lab/#3-github-ja-remote-repositories","title":"3. GitHub ja Remote Repositories","text":""},{"location":"git_version_control/lab/#31-ssh-seadistamine-githubiga","title":"3.1 SSH Seadistamine GitHub'iga","text":"<p>SSH v\u00f5tmed on turvaline viis GitHub'iga autentimiseks.</p> <p>Kontrollige olemasolevaid SSH v\u00f5tmeid:</p> Bash<pre><code>ls -la ~/.ssh/\n</code></pre> <p>Looge uus SSH v\u00f5ti (kasutage oma email'i):</p> Bash<pre><code>ssh-keygen -t ed25519 -C \"teie.email@example.com\"\n</code></pre> <p>Vajutage Enter vaikimisi failikoha jaoks.</p> <p>Vajutage Enter t\u00fchja parooliga (v\u00f5i sisestage parool).</p> <p>K\u00e4ivitage SSH agent:</p> Bash<pre><code>eval \"$(ssh-agent -s)\"\n</code></pre> <p>Lisage v\u00f5ti SSH agentisse:</p> Bash<pre><code>ssh-add ~/.ssh/id_ed25519\n</code></pre> <p>Kopeerige avalik v\u00f5ti:</p> Bash<pre><code>cat ~/.ssh/id_ed25519.pub\n</code></pre> <p>GitHub'is: 1. Minge Settings \u2192 SSH and GPG keys 2. Klikkige \"New SSH key\" 3. Kleepige avalik v\u00f5ti 4. Salvestage</p> <p>Testege SSH \u00fchendust:</p> Bash<pre><code>ssh -T git@github.com\n</code></pre>"},{"location":"git_version_control/lab/#32-remote-repository-ja-koostoo","title":"3.2 Remote Repository ja Koost\u00f6\u00f6","text":"<p>GitHub'is looge uus repository: 1. Klikkige \"New repository\" 2. Nimi: <code>git-practice-lab</code> 3. Public repository 4. \u00c4RA lisage README (teil on juba olemas) 5. Create repository</p> <p>\u00dchendage kohalik repo GitHub'iga:</p> Bash<pre><code>git remote add origin git@github.com:TEIE-KASUTAJANIMI/git-practice-lab.git\n</code></pre> <p>Kontrollige remote'e:</p> Bash<pre><code>git remote -v\n</code></pre> <p>Push'ige esimest korda:</p> Bash<pre><code>git push -u origin main\n</code></pre> <pre><code>graph LR\n    LR[Lokaalne&lt;br/&gt;Repository]\n    RR[GitHub&lt;br/&gt;Repository]\n\n    LR --&gt;|git push| RR\n    RR --&gt;|git pull| LR\n    RR --&gt;|git clone| LR2[Teine kohalik&lt;br/&gt;Repository]\n\n    style LR fill:#e8f5e8\n    style RR fill:#fff3e0\n    style LR2 fill:#e1f5fe</code></pre>"},{"location":"git_version_control/lab/#33-pull-requests-ja-koostoo","title":"3.3 Pull Requests ja Koost\u00f6\u00f6","text":"<p>Looge uus feature dokumentatsiooni jaoks:</p> Bash<pre><code>git checkout -b feature/dokumentatsioon\n</code></pre> <p>Looge uus fail:</p> Bash<pre><code>touch KASUTAMINE.md\n</code></pre> <p>Avage fail ja sisestage:</p> Markdown<pre><code># Git Praktika Projekti Kasutamine\n\n## Failide kirjeldus\n\n- `kalkulaator.py` - P\u00f5hilised matemaatilised operatsioonid\n- `t\u00e4psem_matemaatika.py` - Keerukamad matemaatikafunktsioonid  \n- `string_tools.py` - Tekstide t\u00f6\u00f6tlemise t\u00f6\u00f6riistad\n- `tervitus.py` - Lihtne tervitusprogramm\n\n## Programmide k\u00e4ivitamine\n\n```bash\npython3 kalkulaator.py\npython3 t\u00e4psem_matemaatika.py\npython3 string_tools.py\npython3 tervitus.py\n</code></pre>"},{"location":"git_version_control/lab/#arendamisjuhised","title":"Arendamisjuhised","text":"<ol> <li>Tehke uus feature haru</li> <li>Arendage funktsioon</li> <li>Testite koodi</li> <li>Tehke commit</li> <li>Looge Pull Request</li> </ol>"},{"location":"git_version_control/lab/#testimine","title":"Testimine","text":"<p>K\u00f5ik programmid peaks t\u00f6\u00f6tama ilma vigadeta. Text Only<pre><code>Salvestage fail.\n\nLisage fail ja tehke commit:\n\n```bash\ngit add KASUTAMINE.md\ngit commit -m \"Lisa kasutamise dokumentatsioon\"\n</code></pre></p> <p>Push'ige haru:</p> Bash<pre><code>git push origin feature/dokumentatsioon\n</code></pre> <p>GitHub'is looge Pull Request: 1. Minge oma repository lehele 2. Klikkige \"Compare &amp; pull request\" 3. Kirjutage hea pealkiri ja kirjeldus 4. Create pull request 5. Review ja merge pull request 6. Delete branch</p> <p>Kohalikult uuendage ja puhastage:</p> Bash<pre><code>git checkout main\ngit pull origin main\ngit branch -d feature/dokumentatsioon\ngit remote prune origin\n</code></pre> <p>Kontrollpunkt: Olete edukalt teinud Pull Request workflow.</p>"},{"location":"git_version_control/lab/#4-tapsemad-git-funktsioonid","title":"4. T\u00e4psemad Git Funktsioonid","text":""},{"location":"git_version_control/lab/#41-git-stash-ajutine-salvestamine","title":"4.1 Git Stash - Ajutine Salvestamine","text":"<p>Alustage t\u00f6\u00f6d. Avage <code>kalkulaator.py</code> ja lisage l\u00f5ppu:</p> Python<pre><code># Pooleli olev funktsioon\n# TODO: l\u00f5peta see\n</code></pre> <p>Salvestage fail.</p> <p>Aga vajate kiirestina teist t\u00f6\u00f6d teha:</p> Bash<pre><code>git stash\n</code></pre> <p>Kontrollige olukorda:</p> Bash<pre><code>git status\n</code></pre> <p>Tehke kiire parandus. Avage <code>README.md</code> ja lisage l\u00f5ppu:</p> Markdown<pre><code>## Viimati uuendatud\n$(date)\n</code></pre> <p>Salvestage fail.</p> <p>Lisage ja commit'ige:</p> Bash<pre><code>git add README.md\ngit commit -m \"Lisa kuup\u00e4ev README'sse\"\n</code></pre> <p>Taastage stash'itud t\u00f6\u00f6:</p> Bash<pre><code>git stash pop\n</code></pre> <p>L\u00f5petage t\u00f6\u00f6. Avage <code>kalkulaator.py</code> ja muutke kommentaar:</p> Python<pre><code># Pooleli olev funktsioon - n\u00fc\u00fcd valmis\nprint(\"Uus funktsioon lisatud!\")\n</code></pre> <p>Salvestage fail.</p> <p>Lisage ja commit'ige:</p> Bash<pre><code>git add kalkulaator.py\ngit commit -m \"Lisa pooleli olnud funktsioon\"\n</code></pre>"},{"location":"git_version_control/lab/#42-git-rebase-ajaloo-puhastamine","title":"4.2 Git Rebase - Ajaloo Puhastamine","text":"<p>Looge mitu v\u00e4ikest commit'i. Looge fail:</p> Bash<pre><code>touch VERSIOON.md\n</code></pre> <p>Avage fail ja sisestage:</p> Markdown<pre><code># Versioon 1.0\n</code></pre> <p>Salvestage, lisage ja commit'ige:</p> Bash<pre><code>git add VERSIOON.md\ngit commit -m \"Lisa versiooni fail\"\n</code></pre> <p>Avage <code>VERSIOON.md</code> uuesti ja lisage:</p> Markdown<pre><code>- Kalkulaator\n</code></pre> <p>Salvestage ja commit'ige:</p> Bash<pre><code>git add VERSIOON.md\ngit commit -m \"Lisa kalkulaator versiooni\"\n</code></pre> <p>Lisage veel:</p> Markdown<pre><code>- String tools\n</code></pre> <p>Commit'ige:</p> Bash<pre><code>git add VERSIOON.md\ngit commit -m \"Lisa string tools versiooni\"\n</code></pre> <p>Lisage veel:</p> Markdown<pre><code>- T\u00e4psem matemaatika\n</code></pre> <p>Commit'ige:</p> Bash<pre><code>git add VERSIOON.md\ngit commit -m \"Lisa matemaatika versiooni\"\n</code></pre> <p>\u00dchendage viimased 4 commit'i \u00fcheks:</p> Bash<pre><code>git rebase -i HEAD~4\n</code></pre> <p>Editor avaneb. Muutke viimased 3 \"pick\" \u2192 \"squash\" (v\u00f5i \"s\"). Salvestage ja sulgege. Uues editoris redigeerige commit s\u00f5numit.</p> <p>Kontrollpunkt: Oskate kasutada Git'i t\u00e4psemaid funktsioone.</p>"},{"location":"git_version_control/lab/#5-projekti-lopetamine-ja-hindamine","title":"5. Projekti L\u00f5petamine ja Hindamine","text":""},{"location":"git_version_control/lab/#51-loplik-kontroll","title":"5.1 L\u00f5plik Kontroll","text":"<p>Kontrollige projekti struktuuri:</p> Bash<pre><code>ls -la\n</code></pre> <p>Vaadake Git ajalugu:</p> Bash<pre><code>git log --oneline --graph -10\n</code></pre> <p>Kontrollige remote'e:</p> Bash<pre><code>git remote -v\n</code></pre> <p>Kontrollige harusid:</p> Bash<pre><code>git branch -a\n</code></pre> <p>Vaadake viimased commit'id:</p> Bash<pre><code>git log --oneline -5\n</code></pre> <p>Kontrollige Git seadistusi:</p> Bash<pre><code>git config --list | grep user\n</code></pre>"},{"location":"git_version_control/lab/#52-git-aliases-boonusulesanne","title":"5.2 Git Aliases - Boonus\u00fclesanne","text":"<p>Seadistage kasulikud l\u00fchendid:</p> Bash<pre><code>git config --global alias.st status\n</code></pre> Bash<pre><code>git config --global alias.co checkout\n</code></pre> Bash<pre><code>git config --global alias.br branch\n</code></pre> Bash<pre><code>git config --global alias.ci commit\n</code></pre> Bash<pre><code>git config --global alias.lg 'log --oneline --graph --all'\n</code></pre> <p>Testage aliaseid:</p> Bash<pre><code>git st\ngit lg\n</code></pre>"},{"location":"git_version_control/lab/#esitamine-ja-hindamine","title":"Esitamine ja Hindamine","text":"<p>Esitamisn\u00f5uded: - GitHub repository link: <code>https://github.com/TEIE-KASUTAJANIMI/git-practice-lab</code> - Repository peab sisaldama k\u00f5iki harjutuste faile - N\u00e4htav clean Git history - V\u00e4hemalt \u00fcks Pull Request tehtud ja merge'itud - README.md peab sisaldama projekti kirjeldust</p> <p>Hindamiskriteeriumid:</p> Kriteerium Punktid Kirjeldus Repository seadistamine 15% \u00d5ige Git config, SSH seadistus P\u00f5hilised Git k\u00e4sud 25% add, commit, status, log Branching ja merging 25% Harude loomine, merge'imine, konfliktide lahendamine GitHub workflow 20% Remote repo, pull requests T\u00e4psemad funktsioonid 10% stash, rebase vms Koodi kvaliteet 5% Clean history, head commit s\u00f5numid <p>\u00d5nnitleme! Olete l\u00e4binud Git'i p\u00f5hilise praktika.</p>"},{"location":"git_version_control/reading_materials/","title":"Git Versioonikontroll","text":""},{"location":"git_version_control/reading_materials/#giti-ajalugu-ja-areng","title":"Giti ajalugu ja areng","text":"<p>Git ei tekkinud vaakumis - see lahendas reaalseid probleeme, millega silmitsi seisis Linux kerneli arendustiim 2005. aastal. Linus Torvalds oli aastatega kasutanud erinevaid versioonikontrolli lahendusi, kuid \u00fckski ei vastanud kerneli arenduse k\u00f5rgetele n\u00f5udmistele. BitKeeper, mida nad kasutasid, muutus \u00e4kitselt tasuliseks ning alternatiivid nagu CVS ja Subversion olid liiga aeglased ja tsentraliseeritud.</p> <pre><code>timeline\n    title Git'i ajalugu\n    2000 : BitKeeper kasutamine\n         : Linux kernel arendus\n    2005 : BitKeeper'i litsents muutub\n         : Linus alustab Git'i loomist\n         : Esimene Git'i versioon 2 n\u00e4dalaga\n    2008 : GitHub'i k\u00e4ivitamine\n    2010 : Git muutub populaarseks\n    2020 : Git on de facto standard</code></pre> <p>Giti loomise ajendiks oli vajadus kiire, hajutatud versioonikontrolli j\u00e4rele, mis suudaks k\u00e4sitleda tuhandeid arendajaid \u00fcle maailma. Torvalds l\u00f5i Giti kahe n\u00e4dalaga, keskendudes kolmele p\u00f5hiprintsiibile: kiirus, lihtne disain ja tugev mittelineaarse arenduse tugi. Need p\u00f5him\u00f5tted on siiani Giti s\u00fcdames.</p> <p>Giti hajutatud olemus t\u00e4hendab, et iga arendaja masinas on t\u00e4ielik koopia repositooriumi ajaloost. See erineb fundamentaalselt tsentraliseeritud s\u00fcsteemidest nagu SVN, kus \u00fcks keskne server hoiab kogu ajalugu.</p> <pre><code>graph TB\n    subgraph \"Tsentraliseeritud (SVN)\"\n        CS[Keskne Server]\n        WC1[T\u00f6\u00f6kataloog 1]\n        WC2[T\u00f6\u00f6kataloog 2]\n        WC3[T\u00f6\u00f6kataloog 3]\n\n        CS --&gt; WC1\n        CS --&gt; WC2\n        CS --&gt; WC3\n    end\n\n    subgraph \"Hajutatud (Git)\"\n        R1[Repositoorium 1]\n        R2[Repositoorium 2]\n        R3[Repositoorium 3]\n        RS[Jagatud repositoorium]\n\n        R1 &lt;--&gt; RS\n        R2 &lt;--&gt; RS\n        R3 &lt;--&gt; RS\n        R1 &lt;--&gt; R2\n        R2 &lt;--&gt; R3\n    end</code></pre>"},{"location":"git_version_control/reading_materials/#giti-sisemused","title":"Giti sisemused","text":"<p>Giti geniaalsus peitub selle arhitektuuris. Git kasutab sisu-adresseeritavat salvestust, kus iga faili sisu r\u00e4sitakse SHA-1 algoritmiga. See r\u00e4si muutub faili unikaalseks identifikaatoriks, tagades andmete terviklikkuse ja v\u00f5imaldades kiiret duplikaatide tuvastamist.</p> <pre><code>graph TD\n    subgraph \"Git'i objektide mudel\"\n        C[Commit]\n        T[Tree]\n        B1[Blob: file1.txt]\n        B2[Blob: file2.txt]\n        B3[Blob: file3.txt]\n        ST[Subtree]\n\n        C --&gt; T\n        T --&gt; B1\n        T --&gt; B2\n        T --&gt; ST\n        ST --&gt; B3\n    end</code></pre> <p>Git kasutab nelja p\u00f5hilist objekti t\u00fc\u00fcpi. Blob'id sisaldavad failide sisu, puud (trees) kirjeldavad kataloogi struktuuri, commit'id salvestavad hetkt\u00f5mmised koos metaandmetega ning tag'id m\u00e4rgistavad olulisi versioonipunkte. Need objektid moodustavad suunatud ats\u00fcklilise graafi, mis esitab projekti ajalugu.</p> <p>Kolmeastmeline arhitektuur - t\u00f6\u00f6kataloog, staged area ja repositoorium - annab arendajatele t\u00e4pse kontrolli selle \u00fcle, mida nad commit'ivad.</p> <pre><code>graph LR\n    WD[T\u00f6\u00f6kataloog&lt;br/&gt;Working Directory]\n    SA[Staged Area&lt;br/&gt;Index]\n    LR[Lokaalne Repositoorium&lt;br/&gt;Local Repository]\n    RR[Kaugrepositoorium&lt;br/&gt;Remote Repository]\n\n    WD --&gt;|git add| SA\n    SA --&gt;|git commit| LR\n    LR --&gt;|git push| RR\n    RR --&gt;|git pull| WD\n    LR --&gt;|git checkout| WD</code></pre>"},{"location":"git_version_control/reading_materials/#hargnemisstrateegia","title":"Hargnemisstrateegia","text":"<p>Erinevad tiimid kasutavad erinevaid hargnemisstrateegiaid s\u00f5ltuvalt oma vajadustest. Git Flow on struktureeritud l\u00e4henemine, mis kasutab mitut p\u00fcsivat haru: master (v\u00f5i main) stabiilsete versioonide jaoks, develop jooksvaks arendust\u00f6\u00f6ks, feature harusid uute funktsioonide jaoks ning release ja hotfix harusid spetsiifiliste \u00fclesannete t\u00e4itmiseks.</p> <pre><code>gitgraph\n    commit id: \"Initial\"\n    branch develop\n    checkout develop\n    commit id: \"Dev work\"\n\n    branch feature/login\n    checkout feature/login\n    commit id: \"Add login\"\n    commit id: \"Fix login\"\n\n    checkout develop\n    merge feature/login\n    commit id: \"Integration\"\n\n    branch release/v1.0\n    checkout release/v1.0\n    commit id: \"Prepare release\"\n\n    checkout main\n    merge release/v1.0\n    commit id: \"v1.0\" tag: \"v1.0\"\n\n    checkout develop\n    merge release/v1.0\n\n    checkout main\n    branch hotfix/critical-bug\n    commit id: \"Fix critical bug\"\n\n    checkout main\n    merge hotfix/critical-bug\n    commit id: \"v1.0.1\" tag: \"v1.0.1\"\n\n    checkout develop\n    merge hotfix/critical-bug</code></pre> <p>GitHub Flow on lihtsam alternatiiv, mis sobib paremini pideva integratsiooni keskkonnas. Selles mudelis on ainult \u00fcks main haru, millest luuakse feature harud. Iga feature haru merge'itakse tagasi main'i p\u00e4rast code review'd.</p> <pre><code>gitgraph\n    commit id: \"Initial\"\n    commit id: \"Feature 1\"\n\n    branch feature/new-component\n    checkout feature/new-component\n    commit id: \"Start component\"\n    commit id: \"Add tests\"\n    commit id: \"Finalize\"\n\n    checkout main\n    merge feature/new-component\n    commit id: \"Deploy\"\n\n    branch feature/bug-fix\n    checkout feature/bug-fix\n    commit id: \"Fix bug\"\n\n    checkout main\n    merge feature/bug-fix\n    commit id: \"Deploy fix\"</code></pre>"},{"location":"git_version_control/reading_materials/#lugemiskusimused","title":"Lugemisk\u00fcsimused","text":"<p>P\u00e4rast lugemist vasta j\u00e4rgmistele k\u00fcsimustele oma GitHub repositooriumis failis <code>git_reading_reflection.md</code>:</p> <ol> <li> <p>Millise probleemi lahendamiseks Git loodi ja kuidas see erineb tsentraliseeritud versioonikontrolli s\u00fcsteemidest?</p> </li> <li> <p>Selgita Giti nelja objekti t\u00fc\u00fcpi (blob, tree, commit, tag) ja kuidas need omavahel seotud on.</p> </li> <li> <p>Millal kasutaksid Git Flow'd ja millal GitHub Flow'd? Anna konkreetsed n\u00e4ited.</p> </li> <li> <p>Kirjelda, mis toimub Giti kolmes etapis: t\u00f6\u00f6kataloog \u2192 staged area \u2192 repositoorium.</p> </li> </ol>"},{"location":"git_version_control/reading_materials/#viited-ja-lisalugemine","title":"Viited ja lisalugemine","text":"<ul> <li>Pro Git raamat - p\u00f5hjalik Git'i k\u00e4siraamat</li> <li>Git internals dokumentatsioon</li> <li>Atlassian Git tutorials</li> <li>GitHub Flow guide</li> </ul>"},{"location":"git_version_control/examples/git_apply_changes/","title":"Git Apply - Praktilised Patch'ide Rakendamise Oskused","text":"<p>Eesm\u00e4rk: \u00d5ppida rakendama muudatusi patch failidest versioonihalduse kontekstis</p>"},{"location":"git_version_control/examples/git_apply_changes/#mis-on-patch-ja-miks-see-oluline-on","title":"Mis on Patch ja Miks See Oluline On?","text":"<p>Patch on fail, mis sisaldab muudatuste kirjeldust kahe faili versiooni vahel. See on fundamentaalne versioonihalduse t\u00f6\u00f6riist, mis v\u00f5imaldab muudatusi t\u00e4pselt ja kontrollitult edastada.</p> <p>Praktiline n\u00e4ide: teie kolleeg leiab vea teie koodis ja saadab teile patch faili. Selle asemel, et kopeerida-kleepida koodi k\u00e4sitsi, saate patch'i automaatselt rakendada.</p>"},{"location":"git_version_control/examples/git_apply_changes/#patchide-roll-versioonihalduses","title":"Patch'ide Roll Versioonihalduses","text":""},{"location":"git_version_control/examples/git_apply_changes/#millal-patche-kasutatakse","title":"Millal Patch'e Kasutatakse","text":"<p>Moodsas arendust\u00f6\u00f6s on patch'id kriitilised j\u00e4rgmistes olukordades:</p> <p>Bug fix'ide rakendamine: Kui tootmises avastatakse kriitiline viga, saab patch'iga kiiresti paranduse rakendada ilma kogu koodi uuesti deployment'ita.</p> <p>Code review protsess: P\u00e4rast code review'd saadete tavaliselt n\u00f5uded muudatuste tegemiseks. Patch aitab neid muudatusi t\u00e4pselt implementeerida.</p> <p>Meeskonnat\u00f6\u00f6: Mitme arendaja vahel muudatuste jagamine ja s\u00fcnkroniseerimine.</p> <p>Eksperimentaalne arendus: Ajutiste muudatuste testimine ilma Git ajalugu m\u00f5jutamata.</p>"},{"location":"git_version_control/examples/git_apply_changes/#patch-vs-teised-versioonihalduse-meetodid","title":"Patch vs Teised Versioonihalduse Meetodid","text":"<pre><code>graph TD\n    A[Muudatuste Edastamine] --&gt; B[Git Commit/Push]\n    A --&gt; C[Patch Fail]\n    A --&gt; D[Manual Copy-Paste]\n\n    B --&gt; B1[+ T\u00e4ielik ajalugu]\n    B --&gt; B2[+ Automaatne sync]\n    B --&gt; B3[- N\u00f5uab Git setup'i]\n\n    C --&gt; C1[+ Lihtne jagada]\n    C --&gt; C2[+ Ei muuda Git ajalugu]\n    C --&gt; C3[- Ei salvesta metaandmeid]\n\n    D --&gt; D1[- Vigaderohke]\n    D --&gt; D2[- Aegan\u00f5udev]\n    D --&gt; D3[- Pole j\u00e4lgitav]</code></pre>"},{"location":"git_version_control/examples/git_apply_changes/#1-patch-failide-suntaks-ja-struktuur","title":"1. Patch Failide S\u00fcntaks ja Struktuur","text":""},{"location":"git_version_control/examples/git_apply_changes/#11-unified-diff-formaat","title":"1.1 Unified Diff Formaat","text":"<p>Patch failid kasutavad unified diff formaati. Iga patch koosneb kolmest osast:</p> Diff<pre><code>--- orig_file.py    2023-12-01 10:00:00 +0000\n+++ new_file.py     2023-12-01 10:05:00 +0000\n@@ -1,3 +1,4 @@\n def calculate_sum(a, b):\n-    return a + b\n+    result = a + b\n+    print(f\"Sum: {result}\")\n+    return result\n</code></pre> <p>Struktuuri seletus: - <code>---</code> rida n\u00e4itab originaalfaili - <code>+++</code> rida n\u00e4itab uut faili - <code>@@</code> rida n\u00e4itab ridade numbrite vahemikku - <code>-</code> m\u00e4rk n\u00e4itab eemaldatud ridu - <code>+</code> m\u00e4rk n\u00e4itab lisatud ridu - Tavaline rida (ilma m\u00e4rgita) j\u00e4\u00e4b muutmata</p>"},{"location":"git_version_control/examples/git_apply_changes/#12-konteksti-read","title":"1.2 Konteksti Read","text":"<p>Unified diff sisaldab konteksti ridu (tavaliselt 3 enne ja p\u00e4rast muudatust), mis aitavad patch'il \u00f5iges kohas rakenduda:</p> Diff<pre><code>@@ -5,7 +5,8 @@\n def process_data(data):\n     if not data:\n         return None\n-    return data.strip()\n+    cleaned = data.strip()\n+    return cleaned.lower()\n</code></pre>"},{"location":"git_version_control/examples/git_apply_changes/#2-patchide-rakendamine","title":"2. Patch'ide Rakendamine","text":""},{"location":"git_version_control/examples/git_apply_changes/#21-traditsiooniline-patch-kask","title":"2.1 Traditsiooniline <code>patch</code> K\u00e4sk","text":"<p>Looge testkeskond:</p> Bash<pre><code>mkdir patch-practice\ncd patch-practice\n</code></pre> <p>Looge fail <code>calculator.py</code>:</p> Python<pre><code>def add(a, b):\n    return a + b\n\ndef subtract(a, b):\n    return a - b\n\nif __name__ == \"__main__\":\n    print(\"Calculator ready\")\n</code></pre> <p>Looge patch fail <code>calculator.patch</code>:</p> Diff<pre><code>--- calculator.py   2023-12-01 10:00:00 +0000\n+++ calculator_improved.py  2023-12-01 10:05:00 +0000\n@@ -1,7 +1,12 @@\n def add(a, b):\n+    \"\"\"Add two numbers.\"\"\"\n     return a + b\n\n def subtract(a, b):\n+    \"\"\"Subtract second number from first.\"\"\"\n     return a - b\n\n+def multiply(a, b):\n+    \"\"\"Multiply two numbers.\"\"\"\n+    return a * b\n+\n if __name__ == \"__main__\":\n-    print(\"Calculator ready\")\n+    print(\"Enhanced calculator ready\")\n</code></pre> <p>Rakendage patch:</p> Bash<pre><code>patch calculator.py &lt; calculator.patch\n</code></pre> <p>Kontrollige tulemust:</p> Bash<pre><code>cat calculator.py\n</code></pre>"},{"location":"git_version_control/examples/git_apply_changes/#22-git-apply-kask","title":"2.2 Git Apply K\u00e4sk","text":"<p>Git projektides on <code>git apply</code> eelistatud meetod:</p> Bash<pre><code>git init\ngit add calculator.py\ngit commit -m \"Initial calculator\"\n</code></pre> <p>Looge uus patch <code>feature.patch</code>:</p> Diff<pre><code>--- calculator.py   2023-12-01 10:00:00 +0000\n+++ calculator.py   2023-12-01 10:10:00 +0000\n@@ -10,5 +10,9 @@\n     \"\"\"Multiply two numbers.\"\"\"\n     return a * b\n\n+def divide(a, b):\n+    \"\"\"Divide first number by second.\"\"\"\n+    return a / b if b != 0 else \"Error: Division by zero\"\n+\n if __name__ == \"__main__\":\n     print(\"Enhanced calculator ready\")\n</code></pre> <p>Rakendage Git'iga:</p> Bash<pre><code>git apply feature.patch\n</code></pre> <p>Erinevus <code>patch</code> ja <code>git apply</code> vahel: - <code>git apply</code> kontrollib faili olemasolu Git'i index'is - <code>git apply</code> on rangem whitespace'i suhtes - <code>git apply</code> ei muuda faile automaatselt - see eba\u00f5nnestub, kui patch ei sobi</p>"},{"location":"git_version_control/examples/git_apply_changes/#3-praktilised-harjutused","title":"3. Praktilised Harjutused","text":""},{"location":"git_version_control/examples/git_apply_changes/#31-lihtne-bug-fix","title":"3.1 Lihtne Bug Fix","text":"<p>Looge fail <code>temperature.py</code>:</p> Python<pre><code>def celsius_to_fahrenheit(celsius):\n    return celsius * 9/5 + 32\n\ndef fahrenheit_to_celsius(fahrenheit):\n    return (fahrenheit - 32) * 5/9\n\n# Test\nprint(f\"0\u00b0C = {celsius_to_fahrenheit(0)}\u00b0F\")\nprint(f\"32\u00b0F = {fahrenheit_to_celsius(32)}\u00b0C\")\n</code></pre> <p>Looge patch <code>temperature_fix.patch</code>:</p> Diff<pre><code>--- temperature.py  2023-12-01 10:00:00 +0000\n+++ temperature.py  2023-12-01 10:05:00 +0000\n@@ -1,8 +1,12 @@\n def celsius_to_fahrenheit(celsius):\n+    if celsius &lt; -273.15:\n+        raise ValueError(\"Temperature below absolute zero\")\n     return celsius * 9/5 + 32\n\n def fahrenheit_to_celsius(fahrenheit):\n+    if fahrenheit &lt; -459.67:\n+        raise ValueError(\"Temperature below absolute zero\")\n     return (fahrenheit - 32) * 5/9\n\n # Test\n-print(f\"0\u00b0C = {celsius_to_fahrenheit(0)}\u00b0F\")\n-print(f\"32\u00b0F = {fahrenheit_to_celsius(32)}\u00b0C\")\n+print(f\"0\u00b0C = {celsius_to_fahrenheit(0):.1f}\u00b0F\")\n+print(f\"32\u00b0F = {fahrenheit_to_celsius(32):.1f}\u00b0C\")\n</code></pre> <p>Rakendage patch ja testige:</p> Bash<pre><code>patch temperature.py &lt; temperature_fix.patch\npython3 temperature.py\n</code></pre>"},{"location":"git_version_control/examples/git_apply_changes/#32-keerukas-muudatus-mitmes-kohas","title":"3.2 Keerukas Muudatus Mitmes Kohas","text":"<p>Looge fail <code>data_processor.py</code>:</p> Python<pre><code>import json\n\nclass DataProcessor:\n    def __init__(self):\n        self.data = []\n\n    def load_data(self, filename):\n        with open(filename, 'r') as f:\n            self.data = json.load(f)\n\n    def process(self):\n        return [item.upper() for item in self.data]\n</code></pre> <p>Looge patch <code>data_processor_enhancement.patch</code>:</p> Diff<pre><code>--- data_processor.py   2023-12-01 10:00:00 +0000\n+++ data_processor.py   2023-12-01 10:10:00 +0000\n@@ -1,12 +1,21 @@\n import json\n+import logging\n\n class DataProcessor:\n     def __init__(self):\n         self.data = []\n+        self.logger = logging.getLogger(__name__)\n\n     def load_data(self, filename):\n-        with open(filename, 'r') as f:\n-            self.data = json.load(f)\n+        try:\n+            with open(filename, 'r') as f:\n+                self.data = json.load(f)\n+                self.logger.info(f\"Loaded {len(self.data)} items\")\n+        except FileNotFoundError:\n+            self.logger.error(f\"File {filename} not found\")\n+            self.data = []\n\n     def process(self):\n-        return [item.upper() for item in self.data]\n+        processed = [item.upper() if isinstance(item, str) else str(item).upper() \n+                    for item in self.data]\n+        return processed\n</code></pre> <p>Rakendage ja kontrollige:</p> Bash<pre><code>patch data_processor.py &lt; data_processor_enhancement.patch\n</code></pre>"},{"location":"git_version_control/examples/git_apply_changes/#4-patchide-loomine","title":"4. Patch'ide Loomine","text":""},{"location":"git_version_control/examples/git_apply_changes/#41-diff-kask","title":"4.1 Diff K\u00e4sk","text":"<p>Looge kaks faili versiooni ja genereerige patch:</p> Bash<pre><code>cp calculator.py calculator_original.py\n</code></pre> <p>Muutke <code>calculator.py</code> (lisage kommentaarid):</p> Python<pre><code>def add(a, b):\n    \"\"\"Add two numbers together.\"\"\"\n    return a + b\n\ndef subtract(a, b):\n    \"\"\"Subtract second number from first.\"\"\"\n    return a - b\n\nif __name__ == \"__main__\":\n    print(\"Calculator v2.0 ready\")\n</code></pre> <p>Genereerige patch:</p> Bash<pre><code>diff -u calculator_original.py calculator.py &gt; my_changes.patch\n</code></pre>"},{"location":"git_version_control/examples/git_apply_changes/#42-git-diff","title":"4.2 Git Diff","text":"<p>Git projektides:</p> Bash<pre><code># Muudatused staging area's\ngit diff --cached &gt; staged_changes.patch\n\n# Muudatused working directory's\ngit diff &gt; working_changes.patch\n\n# Konkreetne commit vs teine\ngit diff HEAD~1 HEAD &gt; commit_diff.patch\n</code></pre>"},{"location":"git_version_control/examples/git_apply_changes/#5-veakasitlus-ja-probleemide-lahendamine","title":"5. Veak\u00e4sitlus ja Probleemide Lahendamine","text":""},{"location":"git_version_control/examples/git_apply_changes/#51-patchi-testimine","title":"5.1 Patch'i Testimine","text":"<p>Enne patch'i rakendamist testige seda:</p> Bash<pre><code>git apply --check my_changes.patch\n</code></pre> <p>Kui v\u00e4ljund on t\u00fchi, on patch rakendatav.</p>"},{"location":"git_version_control/examples/git_apply_changes/#52-osaliselt-ebaonnestunud-patch","title":"5.2 Osaliselt Eba\u00f5nnestunud Patch","text":"<p>Kui patch osaliselt eba\u00f5nnestub:</p> Bash<pre><code>patch --verbose calculator.py &lt; problematic.patch\n</code></pre> <p>Vaadake <code>.rej</code> faile (reject files):</p> Bash<pre><code>cat calculator.py.rej\n</code></pre>"},{"location":"git_version_control/examples/git_apply_changes/#53-whitespace-probleemid","title":"5.3 Whitespace Probleemid","text":"<p>Git on tundlik whitespace'i suhtes:</p> Bash<pre><code>git apply --ignore-whitespace problematic.patch\n</code></pre>"},{"location":"git_version_control/examples/git_apply_changes/#6-taiendavad-voimalused","title":"6. T\u00e4iendavad V\u00f5imalused","text":""},{"location":"git_version_control/examples/git_apply_changes/#61-reverse-patch","title":"6.1 Reverse Patch","text":"<p>Patch'i tagasiv\u00f5tmine:</p> Bash<pre><code>patch -R calculator.py &lt; calculator.patch\n</code></pre>"},{"location":"git_version_control/examples/git_apply_changes/#62-dry-run","title":"6.2 Dry Run","text":"<p>Katsetamine ilma muudatusi tegemata:</p> Bash<pre><code>patch --dry-run calculator.py &lt; calculator.patch\n</code></pre>"},{"location":"git_version_control/examples/git_apply_changes/#63-directory-patchid","title":"6.3 Directory Patch'id","text":"<p>Mitme faili muutmine korraga:</p> Bash<pre><code>patch -p1 &lt; multi_file_changes.patch\n</code></pre>"},{"location":"git_version_control/examples/git_apply_changes/#kokkuvote-ja-jargmised-sammud","title":"Kokkuv\u00f5te ja J\u00e4rgmised Sammud","text":""},{"location":"git_version_control/examples/git_apply_changes/#mida-oppisite","title":"Mida \u00d5ppisite","text":"<p>N\u00fc\u00fcd oskate: - M\u00f5ista patch failide struktuuri - Rakendada lihtsaid ja keerukaid muudatusi - Genereerida oma patch faile - K\u00e4sitleda tavalisi probleeme - Kasutada patch'e Git workflow'des</p>"},{"location":"git_version_control/examples/git_apply_changes/#patchide-koht-versioonihalduses","title":"Patch'ide Koht Versioonihalduses","text":"<p>Patch'id on sild kahe Git'i p\u00f5hikonceptsiooni vahel: - Diff'id n\u00e4itavad, mis muutus - Commit'id salvestavad muudatused ajalukku</p>"},{"location":"git_version_control/examples/git_apply_changes/#jargmised-teemad","title":"J\u00e4rgmised Teemad","text":"<p>P\u00e4rast patch'ide valdamist saate s\u00fcveneda: - Git stash - ajutiste muudatuste salvestamine - Git cherry-pick - konkreetsete commit'ide rakendamine - Git rebase - commit'ide ajaloo \u00fcmberkorraldamine - Advanced merging - keerukate konfliktide lahendamine</p> <p>Patch'ide oskus annab teile parema kontrolli koodi muudatuste \u00fcle ja valmistab ette keerukamate versioonihalduse tehnikate \u00f5ppimiseks.</p>"},{"location":"git_version_control/examples/git_diff_examples/","title":"Git Diff ja Diff V\u00e4ljundi Anal\u00fc\u00fcs","text":"<p>Eesm\u00e4rk: \u00d5ppida lugema ja anal\u00fc\u00fcsima diff v\u00e4ljundit versioonihalduse kontekstis</p>"},{"location":"git_version_control/examples/git_diff_examples/#diffi-roll-versioonihalduses","title":"Diff'i Roll Versioonihalduses","text":"<p>Diff on fundamentaalne t\u00f6\u00f6riist, mis n\u00e4itab failide vahelisi erinevusi. Moodsa tarkvaraarenduse kontekstis on diff'i lugemise oskus kriitilise t\u00e4htsusega mitmel p\u00f5hjusel.</p> <p>Code review protsessis anal\u00fc\u00fcsivad arendajad diff'e, et m\u00f5ista kolleegide tehtud muudatusi ja anda tagasisidet. Debugging'u k\u00e4igus aitab diff tuvastada, millised muudatused v\u00f5isid vea tekitada. Merge konfliktide lahendamisel on vaja t\u00e4pselt m\u00f5ista, kus ja miks konfliktid tekivad.</p> <p>Git kasutab universaalset unified diff formaati, mis p\u00e4rineb Unix/Linux maailmast ja on saanud de facto standardiks versioonihalduses.</p>"},{"location":"git_version_control/examples/git_diff_examples/#1-diff-valjundi-struktuur-ja-suntaks","title":"1. Diff V\u00e4ljundi Struktuur ja S\u00fcntaks","text":""},{"location":"git_version_control/examples/git_diff_examples/#11-unified-diff-anatoomia","title":"1.1 Unified Diff Anatoomia","text":"<p>Unified diff koosneb mitmest erinevast osast, millest iga\u00fcks kannab spetsiifilist informatsiooni:</p> Diff<pre><code>--- original_file.py    2023-12-01 10:00:00 +0000\n+++ modified_file.py    2023-12-01 10:05:00 +0000\n@@ -5,7 +5,8 @@\n def process_data(data):\n     if not data:\n         return None\n-    return data.strip()\n+    cleaned = data.strip()\n+    return cleaned.lower()\n\n def validate_input(input_str):\n</code></pre> <p>Struktuuri komponendid:</p> <p>Faili header (<code>---</code> ja <code>+++</code> read): N\u00e4itab v\u00f5rreldavate failide nimesid ja ajatemplit. Konventsiooniliselt <code>---</code> m\u00e4rgib \"vana\" versiooni ja <code>+++</code> \"uut\" versiooni.</p> <p>Hunk header (<code>@@</code> rida): Sisaldab kriitist informatsiooni muudatuste asukoha kohta. Formaat <code>@@ -old_start,old_count +new_start,new_count @@</code> n\u00e4itab, et vanas failis algab muudatus realt <code>old_start</code> ja h\u00f5lmab <code>old_count</code> rida, uues failis algab realt <code>new_start</code> ja h\u00f5lmab <code>new_count</code> rida.</p> <p>Muudatuste read: Iga rida algab \u00fche kolmest s\u00fcmbolist: - <code>-</code> (miinus) t\u00e4histab vanas failis olnud, kuid uuest eemaldatud rida - <code>+</code> (pluss) t\u00e4histab uues failis lisatud rida - <code></code> (t\u00fchik) t\u00e4histab m\u00f5lemas failis muutumatuna s\u00e4ilinud kontekstirida</p>"},{"location":"git_version_control/examples/git_diff_examples/#12-konteksti-moistmine","title":"1.2 Konteksti M\u00f5istmine","text":"<p>Unified diff sisaldab tavaliselt kolm kontekstirida enne ja p\u00e4rast iga muudatust. See kontekst aitab: - T\u00e4pselt lokaliseerida muudatuse asukohta - M\u00f5ista muudatuse konteksti koodis - Patch'ide rakendamisel \u00f5iges kohas paigutada</p>"},{"location":"git_version_control/examples/git_diff_examples/#2-praktilised-diff-analuusi-naited","title":"2. Praktilised Diff Anal\u00fc\u00fcsi N\u00e4ited","text":""},{"location":"git_version_control/examples/git_diff_examples/#21-lihtne-funktsiooni-taiustamine","title":"2.1 Lihtne Funktsiooni T\u00e4iustamine","text":"<p>Vaatleme j\u00e4rgmist n\u00e4idet, kus t\u00e4iustatakse kasutajanime valideerimise funktsiooni:</p> <p>Algne versioon (user_validator.py): Python<pre><code>def validate_username(username):\n    if len(username) &lt; 3:\n        return False\n    if not username.isalnum():\n        return False\n    return True\n</code></pre></p> <p>T\u00e4iustatud versioon: Python<pre><code>def validate_username(username):\n    if not isinstance(username, str):\n        raise TypeError(\"Username must be a string\")\n    if len(username) &lt; 3:\n        return False\n    if len(username) &gt; 20:\n        return False\n    if not username.isalnum():\n        return False\n    if username[0].isdigit():\n        return False\n    return True\n</code></pre></p> <p>Unified diff: Diff<pre><code>--- user_validator.py   2023-12-01 10:00:00 +0000\n+++ user_validator.py   2023-12-01 10:15:00 +0000\n@@ -1,6 +1,12 @@\n def validate_username(username):\n+    if not isinstance(username, str):\n+        raise TypeError(\"Username must be a string\")\n     if len(username) &lt; 3:\n         return False\n+    if len(username) &gt; 20:\n+        return False\n     if not username.isalnum():\n         return False\n+    if username[0].isdigit():\n+        return False\n     return True\n</code></pre></p> <p>Anal\u00fc\u00fcs: Diff n\u00e4itab kolme olulist t\u00e4iustust: t\u00fc\u00fcbi kontroll, pikkuse \u00fclempiiri kontroll ja numbriga algavate kasutajanimede keelamine. Muudatused on loogiliselt j\u00e4rjestatud ja ei m\u00f5juta olemasolevat loogikat.</p>"},{"location":"git_version_control/examples/git_diff_examples/#22-keerukas-refaktoreerimine","title":"2.2 Keerukas Refaktoreerimine","text":"<p>Vaatleme keerukama n\u00e4ite puhul, kuidas diff aitab m\u00f5ista arhitektuurilisi muudatusi:</p> <p>Algne versioon (data_manager.py): Python<pre><code>import json\n\nclass DataManager:\n    def __init__(self, filename):\n        self.filename = filename\n        self.data = self.load_data()\n\n    def load_data(self):\n        try:\n            with open(self.filename, 'r') as f:\n                return json.load(f)\n        except FileNotFoundError:\n            return {}\n\n    def save_data(self):\n        with open(self.filename, 'w') as f:\n            json.dump(self.data, f)\n\n    def get_value(self, key):\n        return self.data.get(key)\n\n    def set_value(self, key, value):\n        self.data[key] = value\n        self.save_data()\n</code></pre></p> <p>Refaktoreeritud versioon koos error handling'u ja logging'iga:</p> <p>Diff v\u00e4ljund: Diff<pre><code>--- data_manager.py 2023-12-01 10:00:00 +0000\n+++ data_manager.py 2023-12-01 10:30:00 +0000\n@@ -1,24 +1,42 @@\n import json\n+import logging\n+from pathlib import Path\n\n class DataManager:\n     def __init__(self, filename):\n-        self.filename = filename\n+        self.filename = Path(filename)\n         self.data = self.load_data()\n+        self.logger = logging.getLogger(__name__)\n\n     def load_data(self):\n         try:\n-            with open(self.filename, 'r') as f:\n+            if not self.filename.exists():\n+                self.logger.info(f\"File {self.filename} does not exist, creating empty dataset\")\n+                return {}\n+            \n+            with self.filename.open('r') as f:\n                 return json.load(f)\n-        except FileNotFoundError:\n+        except json.JSONDecodeError as e:\n+            self.logger.error(f\"Invalid JSON in {self.filename}: {e}\")\n             return {}\n+        except PermissionError as e:\n+            self.logger.error(f\"Permission denied accessing {self.filename}: {e}\")\n+            raise\n\n     def save_data(self):\n-        with open(self.filename, 'w') as f:\n-            json.dump(self.data, f)\n+        try:\n+            with self.filename.open('w') as f:\n+                json.dump(self.data, f, indent=2)\n+            self.logger.debug(f\"Data saved to {self.filename}\")\n+        except PermissionError as e:\n+            self.logger.error(f\"Cannot save to {self.filename}: {e}\")\n+            raise\n\n     def get_value(self, key):\n         return self.data.get(key)\n\n     def set_value(self, key, value):\n+        old_value = self.data.get(key)\n         self.data[key] = value\n+        self.logger.debug(f\"Updated {key}: {old_value} -&gt; {value}\")\n         self.save_data()\n</code></pre></p> <p>Anal\u00fc\u00fcsi sammud:</p> <p>Importide muudatused n\u00e4itavad uute s\u00f5ltuvuste lisamist - <code>logging</code> ja <code>pathlib.Path</code>.</p> <p>Error handling on m\u00e4rkimisv\u00e4\u00e4rselt t\u00e4iustatud - lihtne <code>FileNotFoundError</code> k\u00e4sitlus on asendatud detailsema l\u00e4henemisega, mis k\u00e4sitleb JSON decode vigu ja \u00f5iguste probleeme.</p> <p>Logging funktsioonid on lisatud l\u00e4bivalt kogu klassi, andes \u00fclevaate operatsioonidest ja v\u00f5imalikest probleemidest.</p>"},{"location":"git_version_control/examples/git_diff_examples/#23-merge-conflict-diff","title":"2.3 Merge Conflict Diff","text":"<p>Merge konfliktide puhul n\u00e4eb diff teistsugune v\u00e4lja:</p> Diff<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\ndef calculate_total(items):\n    return sum(item.price for item in items)\n=======\ndef calculate_total(items):\n    total = 0\n    for item in items:\n        total += item.price * (1 - item.discount)\n    return total\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature/discount-calculation\n</code></pre> <p>See n\u00e4itab konflikti, kus \u00fcks branch kasutab lihtsat <code>sum()</code> funktsiooni, teine arvestab allahindlustega.</p>"},{"location":"git_version_control/examples/git_diff_examples/#3-git-diff-kasud-ja-variandid","title":"3. Git Diff K\u00e4sud ja Variandid","text":""},{"location":"git_version_control/examples/git_diff_examples/#31-tookataloog-vs-staging-area","title":"3.1 T\u00f6\u00f6kataloog vs Staging Area","text":"Bash<pre><code>git diff\n</code></pre> <p>See k\u00e4sk n\u00e4itab muudatusi, mis on tehtud t\u00f6\u00f6kataloogi failides, kuid pole veel staging area'sse lisatud:</p> Diff<pre><code>diff --git a/app.py b/app.py\nindex 1a2b3c4..5d6e7f8 100644\n--- a/app.py\n+++ b/app.py\n@@ -15,7 +15,8 @@ def main():\n     config = load_configuration()\n\n     if config.debug_mode:\n-        print(\"Debug mode is enabled\")\n+        logger = setup_logging(config.log_level)\n+        logger.info(\"Debug mode is enabled\")\n\n     app = create_application(config)\n     return app.run()\n</code></pre>"},{"location":"git_version_control/examples/git_diff_examples/#32-staging-area-vs-viimane-commit","title":"3.2 Staging Area vs Viimane Commit","text":"Bash<pre><code>git diff --staged\n# v\u00f5i\ngit diff --cached\n</code></pre> <p>N\u00e4itab, millised muudatused on staging area's ja l\u00e4hevad j\u00e4rgmisse commit'i:</p> Diff<pre><code>diff --git a/requirements.txt b/requirements.txt\nindex abcd123..efgh456 100644\n--- a/requirements.txt\n+++ b/requirements.txt\n@@ -5,3 +5,4 @@ requests==2.28.1\n flask==2.2.2\n sqlalchemy==1.4.41\n pytest==7.1.3\n+black==22.8.0\n</code></pre>"},{"location":"git_version_control/examples/git_diff_examples/#33-commitide-vordlus","title":"3.3 Commit'ide V\u00f5rdlus","text":"Bash<pre><code># Viimase kahe commit'i v\u00f5rdlus\ngit diff HEAD~1 HEAD\n\n# Konkreetsete commit'ide v\u00f5rdlus\ngit diff abc123..def456\n\n# Branch'ide v\u00f5rdlus\ngit diff main..feature/new-api\n</code></pre> <p>N\u00e4ide branch'ide v\u00f5rdlusest:</p> Diff<pre><code>diff --git a/api/endpoints.py b/api/endpoints.py\nindex 1234567..890abcd 100644\n--- a/api/endpoints.py\n+++ b/api/endpoints.py\n@@ -20,6 +20,15 @@ def get_user(user_id):\n     except UserNotFound:\n         return jsonify({'error': 'User not found'}), 404\n\n+@app.route('/api/users', methods=['POST'])\n+def create_user():\n+    data = request.get_json()\n+    try:\n+        user = User.create(data)\n+        return jsonify(user.to_dict()), 201\n+    except ValidationError as e:\n+        return jsonify({'error': str(e)}), 400\n+\n @app.route('/api/health')\n def health_check():\n     return jsonify({'status': 'healthy'})\n</code></pre>"},{"location":"git_version_control/examples/git_diff_examples/#4-diff-analuusi-strateegia","title":"4. Diff Anal\u00fc\u00fcsi Strateegia","text":""},{"location":"git_version_control/examples/git_diff_examples/#41-sustemaatiline-lahenemise-metoodika","title":"4.1 S\u00fcstemaatiline L\u00e4henemise Metoodika","text":"<p>Esimene samm - \u00dclevaate saamine: Alustage hunk header'ite vaatamisest, et m\u00f5ista muudatuste mahu ja asukohta. K\u00fcsige endalt: kui palju faile on m\u00f5jutatud ja kui suured on muudatused?</p> <p>Teine samm - Konteksti m\u00f5istmine: Vaadake kontekstiridu, et m\u00f5ista, millises funktsioonis v\u00f5i meetodis muudatused toimuvad. See aitab m\u00f5ista muudatuste eesm\u00e4rki.</p> <p>Kolmas samm - Muudatuste t\u00fc\u00fcpide tuvastamine: Eristage, kas tegemist on: - Bug fix'iga (tavaliselt v\u00e4ikesed, fokuseeritud muudatused) - Uue feature'i lisamisega (tavaliselt suuremad, mitut funktsiooni m\u00f5jutavad muudatused) - Refaktoreerimisega (struktuuri muutused ilma funktsionaalsust muutmata) - Performance optimiseerimisega</p> <p>Neljas samm - M\u00f5ju hindamine: Anal\u00fc\u00fcsige, kas muudatused v\u00f5ivad: - Muuta API'd (breaking changes) - M\u00f5jutada performance'i - Tuua kaasa uusi s\u00f5ltuvusi - N\u00f5uda dokumentatsiooni uuendamist</p>"},{"location":"git_version_control/examples/git_diff_examples/#42-code-review-kontekstis","title":"4.2 Code Review Kontekstis","text":"<p>Code review k\u00e4igus diff anal\u00fc\u00fcsimisel keskenduge j\u00e4rgmistele aspektidele:</p> <p>Funktsionaalsus: Kas kood teeb seda, mida peaks? Kas loogiline voog on \u00f5ige?</p> <p>Loetavus: Kas muudatused teevad koodi selgemaks v\u00f5i keerulisemaks?</p> <p>Testimine: Kas on vaja lisada uusi teste? Kas olemasolevad testid vajavad uuendamist?</p> <p>Turvalisus: Kas muudatused v\u00f5ivad tuua kaasa turvaprobleeme?</p>"},{"location":"git_version_control/examples/git_diff_examples/#5-tavalisemad-diff-mustrid","title":"5. Tavalisemad Diff Mustrid","text":""},{"location":"git_version_control/examples/git_diff_examples/#51-importide-muudatused","title":"5.1 Import'ide Muudatused","text":"Diff<pre><code> import os\n import sys\n+import logging\n+from datetime import datetime\n from pathlib import Path\n-from typing import List\n+from typing import List, Dict, Optional\n</code></pre> <p>Selline muster n\u00e4itab tavaliselt funktsionaalsuse laiendamist.</p>"},{"location":"git_version_control/examples/git_diff_examples/#52-konfiguratsiooni-muudatused","title":"5.2 Konfiguratsiooni Muudatused","text":"Diff<pre><code> config = {\n     'database_url': 'postgresql://localhost/mydb',\n     'debug': True,\n-    'log_level': 'INFO'\n+    'log_level': 'DEBUG',\n+    'cache_timeout': 300,\n+    'api_rate_limit': 1000\n }\n</code></pre>"},{"location":"git_version_control/examples/git_diff_examples/#53-error-handling-taiustamine","title":"5.3 Error Handling T\u00e4iustamine","text":"Diff<pre><code> def process_file(filename):\n-    with open(filename, 'r') as f:\n-        return f.read()\n+    try:\n+        with open(filename, 'r') as f:\n+            return f.read()\n+    except FileNotFoundError:\n+        logger.error(f\"File {filename} not found\")\n+        return None\n+    except PermissionError:\n+        logger.error(f\"Permission denied for {filename}\")\n+        raise\n</code></pre>"},{"location":"git_version_control/examples/git_diff_examples/#6-harjutused-ja-praktilised-ulesanded","title":"6. Harjutused ja Praktilised \u00dclesanded","text":""},{"location":"git_version_control/examples/git_diff_examples/#61-diff-analuusi-harjutus","title":"6.1 Diff Anal\u00fc\u00fcsi Harjutus","text":"<p>Anal\u00fc\u00fcsige j\u00e4rgmist diff'i:</p> Diff<pre><code>--- calculator.py   2023-12-01 10:00:00 +0000\n+++ calculator.py   2023-12-01 10:15:00 +0000\n@@ -1,12 +1,19 @@\n+import math\n+\n def add(a, b):\n     return a + b\n\n def subtract(a, b):\n     return a - b\n\n-def multiply(a, b):\n-    return a * b\n+def multiply(*args):\n+    result = 1\n+    for num in args:\n+        result *= num\n+    return result\n\n-def divide(a, b):\n-    return a / b\n+def divide(a, b):\n+    if b == 0:\n+        raise ValueError(\"Cannot divide by zero\")\n+    return a / b\n\n+def power(base, exponent):\n+    return math.pow(base, exponent)\n</code></pre> <p>Anal\u00fc\u00fcsi k\u00fcsimused:</p> <ol> <li>Millised on peamised muudatused?</li> <li>Kas m\u00f5ni muudatus on breaking change?</li> <li>Millised on turva- v\u00f5i vigade seisukohast olulised parandused?</li> <li>Kas kood on muutunud paremaks?</li> </ol>"},{"location":"git_version_control/examples/git_diff_examples/#62-merge-conflict-analuus","title":"6.2 Merge Conflict Anal\u00fc\u00fcs","text":"Diff<pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\ndef send_notification(user, message):\n    if user.email_enabled:\n        send_email(user.email, message)\n=======\ndef send_notification(user, message):\n    if user.notification_preferences.email:\n        email_service.send(user.email, message)\n    if user.notification_preferences.sms:\n        sms_service.send(user.phone, message)\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature/multi-channel-notifications\n</code></pre> <p>Anal\u00fc\u00fcsige konflikti ja kirjeldage, kuidas seda lahendada.</p>"},{"location":"git_version_control/examples/git_diff_examples/#7-taiendavad-diff-tooriistad-ja-tehnikad","title":"7. T\u00e4iendavad Diff T\u00f6\u00f6riistad ja Tehnikad","text":""},{"location":"git_version_control/examples/git_diff_examples/#71-graafilised-diff-tooriistad","title":"7.1 Graafilised Diff T\u00f6\u00f6riistad","text":"<p>K\u00e4surea k\u00f5rval on kasulikud ka graafilised t\u00f6\u00f6riistad:</p> <ul> <li>VS Code built-in diff viewer</li> <li>GitKraken visuaalne Git klient</li> <li>Meld cross-platform diff t\u00f6\u00f6riist</li> <li>Beyond Compare kommertsiaal diff t\u00f6\u00f6riist</li> </ul>"},{"location":"git_version_control/examples/git_diff_examples/#72-spetsialiseeritud-git-diff-kasud","title":"7.2 Spetsialiseeritud Git Diff K\u00e4sud","text":"Bash<pre><code># Ainult failide nimed\ngit diff --name-only\n\n# Statistika muudatuste kohta\ngit diff --stat\n\n# S\u00f5nade tasemel diff\ngit diff --word-diff\n\n# Ignore whitespace muudatused\ngit diff -w\n\n# Show function context\ngit diff --function-context\n</code></pre>"},{"location":"git_version_control/examples/git_diff_examples/#73-custom-diff-drivers","title":"7.3 Custom Diff Drivers","text":"<p>Git v\u00f5imaldab seadistada erinevaid diff driver'eid konkreetsete failit\u00fc\u00fcpide jaoks:</p> Bash<pre><code># .gitattributes failis\n*.py diff=python\n*.md diff=markdown\n</code></pre>"},{"location":"git_version_control/examples/git_diff_examples/#kokkuvote","title":"Kokkuv\u00f5te","text":"<p>Diff'i lugemise oskus on fundamentaalne versioonihalduses. See v\u00f5imaldab:</p> <p>M\u00f5ista muudatuste konteksti - n\u00e4ha, miks ja kuidas kood muutus Teha kvaliteetseid code review'sid - anal\u00fc\u00fcsida kolleegide t\u00f6\u00f6d Lahendada merge konflikte - m\u00f5ista konfliktide p\u00f5hjuseid Debug'ida efektiivselt - leida, millised muudatused vigu tekitasid J\u00e4lgida projekti arengut - m\u00f5ista koodi evolusiooni</p> <p>Regulaarne harjutamine erinevate diff'ide anal\u00fc\u00fcsimisega arendab intuitsiooni koodi muudatuste m\u00f5istmisel ja teeb t\u00f6\u00f6st versioonihalduss\u00fcsteemidega palju efektiivsema.</p> <p>Diff'i lugemise oskus on investeering, mis tasub end \u00e4ra kogu programmeerimiskarj\u00e4\u00e4ri v\u00e4ltel.</p>"},{"location":"git_version_control/reference/git_commands_reference/","title":"Git K\u00e4sud","text":""},{"location":"git_version_control/reference/git_commands_reference/#pohilised-kasud","title":"P\u00f5hilised K\u00e4sud","text":""},{"location":"git_version_control/reference/git_commands_reference/#seadistamine","title":"Seadistamine","text":"Bash<pre><code>git config --global user.name \"Teie Nimi\"\ngit config --global user.email \"teie.email@example.com\"\ngit config --list\n</code></pre>"},{"location":"git_version_control/reference/git_commands_reference/#repository-loomine","title":"Repository Loomine","text":"Bash<pre><code>git init                    # Uue repo loomine\ngit clone URL               # Olemasoleva repo kopeerimine\n</code></pre>"},{"location":"git_version_control/reference/git_commands_reference/#pohiline-toovoog","title":"P\u00f5hiline T\u00f6\u00f6voog","text":"Bash<pre><code>git status                  # Vaata olekut\ngit add .                   # Lisa k\u00f5ik muudatused\ngit commit -m \"S\u00f5num\"       # Salvesta muudatused\ngit push origin main        # Saada muudatused\ngit pull origin main        # V\u00f5ta uusimad muudatused\n</code></pre>"},{"location":"git_version_control/reference/git_commands_reference/#info-ja-ajalugu","title":"Info ja Ajalugu","text":""},{"location":"git_version_control/reference/git_commands_reference/#muudatuste-vaatamine","title":"Muudatuste Vaatamine","text":"Bash<pre><code>git diff                    # T\u00f6\u00f6kausta vs staging\ngit diff --staged           # Staging vs viimane commit\ngit diff HEAD~1             # Viimase commit'iga v\u00f5rdlus\ngit show                    # Viimane commit\ngit show commit-hash        # Konkreetne commit\ngit show --stat             # Statistika koos\n</code></pre>"},{"location":"git_version_control/reference/git_commands_reference/#ajaloo-vaatamine","title":"Ajaloo Vaatamine","text":"Bash<pre><code>git log --oneline          # Kompaktne vaade\ngit log --graph            # Visuaalne harudemudel  \ngit log --author=\"Nimi\"    # Konkreetse autori commit'id\ngit blame fail.txt         # Kes millise rea muutis\n</code></pre>"},{"location":"git_version_control/reference/git_commands_reference/#harude-branches-haldamine","title":"\ud83c\udf3f Harude (Branches) Haldamine","text":""},{"location":"git_version_control/reference/git_commands_reference/#harude-loomine-ja-vahetamine","title":"Harude Loomine ja Vahetamine","text":"Bash<pre><code>git branch                  # Vaata harusid\ngit branch -v               # Koos viimase commit'iga\ngit branch -a               # K\u00f5ik harud (ka remote)\ngit branch funktsioon-login # Loo uus haru\ngit checkout -b funktsioon-login  # Loo ja vaheta haru\ngit checkout main          # Vaheta main harule\ngit switch -c funktsioon-login  # Uuem s\u00fcntaks\ngit switch main            # Uuem s\u00fcntaks\n</code></pre>"},{"location":"git_version_control/reference/git_commands_reference/#harude-uhendamine","title":"Harude \u00dchendamine","text":"Bash<pre><code>git merge branch-nimi       # \u00dchenda haru\ngit merge --no-ff branch-nimi  # Merge ilma fast-forward'ta\ngit merge --abort          # Katkesta merge\n</code></pre>"},{"location":"git_version_control/reference/git_commands_reference/#rebase","title":"Rebase","text":"Bash<pre><code>git rebase origin/main      # Rebase kohalikud commit'id\ngit rebase -i origin/main   # Interaktiivne rebase\ngit rebase -i HEAD~3        # Viimased 3 commit'i\ngit rebase --abort          # Katkesta rebase\ngit rebase --continue       # J\u00e4tka p\u00e4rast konfliktide lahendamist\n</code></pre>"},{"location":"git_version_control/reference/git_commands_reference/#kaugrepositooriumid-remote","title":"\ud83c\udf10 Kaugrepositooriumid (Remote)","text":""},{"location":"git_version_control/reference/git_commands_reference/#remoteide-haldamine","title":"Remote'ide Haldamine","text":"Bash<pre><code>git remote -v              # Vaata remote'ide URL'e\ngit remote show origin     # Remote'i info\ngit remote add origin URL  # Lisa remote\ngit remote rename origin upstream  # Nimetage remote \u00fcmber\ngit remote remove old-remote      # Eemalda remote\ngit remote set-url origin uus-url # Muuda URL'i\n</code></pre>"},{"location":"git_version_control/reference/git_commands_reference/#fetch-ja-pull","title":"Fetch ja Pull","text":"Bash<pre><code>git fetch origin           # Too info serverist\ngit fetch origin main      # Konkreetse haru info\ngit fetch --all            # K\u00f5igi remote'ide info\ngit pull origin main       # Fetch + merge\ngit pull --rebase origin main  # Rebase pull\ngit pull --ff-only origin main # Ainult fast-forward\n</code></pre>"},{"location":"git_version_control/reference/git_commands_reference/#push","title":"Push","text":"Bash<pre><code>git push origin main       # Saada muudatused\ngit push -u origin main    # Esimene kord (tracking)\ngit push origin funktsioon-login  # Uue haru saatmine\ngit push origin --delete funktsioon-login  # Haru kustutamine\n</code></pre>"},{"location":"git_version_control/reference/git_commands_reference/#failide-haldamine","title":"Failide Haldamine","text":""},{"location":"git_version_control/reference/git_commands_reference/#failide-lisamine-ja-eemaldamine","title":"Failide Lisamine ja Eemaldamine","text":"Bash<pre><code>git add failinimi.txt      # Lisa konkreetne fail\ngit add .                  # Lisa k\u00f5ik muudatused\ngit rm failinimi.txt       # Kustuta fail Git'ist ja s\u00fcsteemist\ngit rm --cached failinimi.txt  # Kustuta ainult Git'ist\ngit mv vana.txt uus.txt    # Nimetage fail \u00fcmber\n</code></pre>"},{"location":"git_version_control/reference/git_commands_reference/#muudatuste-tagasivotmine","title":"Muudatuste Tagasiv\u00f5tmine","text":"Bash<pre><code>git checkout -- failinimi.txt  # Taasta fail viimase commit'i olekusse\ngit checkout -- .              # Taasta k\u00f5ik failid\ngit reset HEAD failinimi.txt   # Eemalda fail staging'ust\ngit reset HEAD                 # Eemalda k\u00f5ik failid staging'ust\n</code></pre>"},{"location":"git_version_control/reference/git_commands_reference/#commitide-haldamine","title":"Commit'ide Haldamine","text":""},{"location":"git_version_control/reference/git_commands_reference/#commitide-muutmine","title":"Commit'ide Muutmine","text":"Bash<pre><code>git commit --amend -m \"Uus s\u00f5num\"  # Muuda viimast commit'i\ngit commit --amend --no-edit       # Lisa faile viimase commit'i\ngit commit -am \"S\u00f5num\"             # Lisa ja commit k\u00f5ik muudetud failid\n</code></pre>"},{"location":"git_version_control/reference/git_commands_reference/#commitide-tagasivotmine","title":"Commit'ide Tagasiv\u00f5tmine","text":"Bash<pre><code>git revert commit-hash      # Turvaline tagasiv\u00f5tmine (loob uue commit'i)\ngit revert commit1..commit2 # Mitme commit'i tagasiv\u00f5tmine\ngit reset --soft HEAD~1     # J\u00e4tab muudatused staging'u\ngit reset --mixed HEAD~1    # J\u00e4tab muudatused t\u00f6\u00f6kausta\ngit reset --hard HEAD~1     # Kustutab muudatused t\u00e4ielikult\n</code></pre>"},{"location":"git_version_control/reference/git_commands_reference/#commitide-identifitseerimine","title":"Commit'ide Identifitseerimine","text":"Bash<pre><code>git show HEAD               # Viimane commit\ngit show HEAD~1             # Eelmine commit\ngit show HEAD~2             # Kaks commit'i tagasi\ngit show branch-name^       # Eelmine commit\ngit show branch-name~3      # Kolm commit'i tagasi\ngit show a1b2c3d            # L\u00fchike hash\ngit show v1.0.0             # Tag\n</code></pre>"},{"location":"git_version_control/reference/git_commands_reference/#ajutine-salvestamine-stash","title":"\ud83d\udce6 Ajutine Salvestamine (Stash)","text":"Bash<pre><code>git stash                   # Salvesta muudatused ajutiselt\ngit stash pop              # Taasta salvestatud muudatused\ngit stash list             # Vaata stash'e\ngit stash apply stash@{0}  # Taasta konkreetne stash\ngit stash drop stash@{0}   # Kustuta stash\ngit stash clear            # Kustuta k\u00f5ik stash'ed\n</code></pre>"},{"location":"git_version_control/reference/git_commands_reference/#otsimine-ja-filtreerimine","title":"Otsimine ja Filtreerimine","text":"Bash<pre><code>git log --grep=\"s\u00f5na\"      # Otsi commit'ides\ngit log -S \"s\u00f5na\"          # Otsi muudatuste sisus\ngit log --since=\"2023-01-01\"  # Filtreeri kuup\u00e4eva j\u00e4rgi\ngit log --until=\"2023-12-31\"  # Filtreeri kuup\u00e4eva j\u00e4rgi\ngit log --author=\"Nimi\"    # Filtreeri autori j\u00e4rgi\ngit log --oneline -10      # Viimased 10 commit'i\n</code></pre>"},{"location":"git_version_control/reference/git_commands_reference/#tagid","title":"\ud83c\udff7 Tag'id","text":"Bash<pre><code>git tag v1.0.0             # Loo tag\ngit tag -a v1.0.0 -m \"S\u00f5num\"  # Annotated tag\ngit tag -l                 # Vaata tag'e\ngit show v1.0.0            # Vaata tag'i info\ngit push origin v1.0.0     # Saada tag\ngit push origin --tags     # Saada k\u00f5ik tag'id\n</code></pre>"},{"location":"git_version_control/reference/git_commands_reference/#konfliktide-lahendamine","title":"Konfliktide Lahendamine","text":"Bash<pre><code>git status                 # N\u00e4itab konfliktilisi faile\ngit diff                   # N\u00e4itab konfliktide detaile\ngit mergetool              # Avab graafilise lahendaja\ngit add konfliktne-fail.txt # P\u00e4rast konfliktide lahendamist\n</code></pre>"},{"location":"git_version_control/reference/git_commands_reference/#aliasid-ja-konfiguratsioon","title":"Alias'id ja Konfiguratsioon","text":""},{"location":"git_version_control/reference/git_commands_reference/#kasulikud-aliasid","title":"Kasulikud Alias'id","text":"Bash<pre><code># Lisa need git config'u\ngit config --global alias.st status\ngit config --global alias.co checkout\ngit config --global alias.br branch\ngit config --global alias.ci commit\ngit config --global alias.unstage 'reset HEAD --'\ngit config --global alias.last 'log -1 HEAD'\ngit config --global alias.visual '!gitk'\n</code></pre>"},{"location":"git_version_control/reference/git_commands_reference/#kasutamine","title":"Kasutamine","text":"Bash<pre><code>git st                     # git status\ngit co main               # git checkout main\ngit br                    # git branch\ngit ci -m \"s\u00f5num\"        # git commit -m \"s\u00f5num\"\ngit unstage fail.txt     # git reset HEAD -- fail.txt\n</code></pre>"},{"location":"git_version_control/reference/git_commands_reference/#hoiatused-ja-nouanded","title":"\ud83d\udea8 Hoiatused ja N\u00f5uanded","text":""},{"location":"git_version_control/reference/git_commands_reference/#ara-tee-kunagi","title":"\u00c4ra tee kunagi:","text":"<ul> <li><code>git push --force</code> shared branch'ides</li> <li><code>git reset --hard</code> salvestamata muudatustega</li> <li><code>git clean -fd</code> ilma kontrollimata</li> <li>Commit'i saladusi (API keys, paroolid)</li> </ul>"},{"location":"git_version_control/reference/git_commands_reference/#kasuta-alati","title":"Kasuta alati:","text":"<ul> <li><code>git push --force-with-lease</code> force push'i asemel</li> <li><code>git status</code> enne keerulisi operatsioone</li> <li>Selgeid commit s\u00f5numeid</li> <li><code>.gitignore</code> faili</li> </ul>"},{"location":"git_version_control/reference/git_commands_reference/#lisaressursid","title":"Lisaressursid","text":"<ul> <li>Git'i ametlik dokumentatsioon</li> <li>Git'i visuaalne \u00f5petus</li> <li>Git'i cheatsheet</li> <li>Git'i branching model</li> </ul> <p>See viide sisaldab k\u00f5ige populaarsemaid ja kasulikumaid Git k\u00e4ske. T\u00e4psem info leiad Git'i ametlikust dokumentatsioonist.</p>"},{"location":"git_version_control/reference/vscode/","title":"VS Code Seadistamise Juhend","text":""},{"location":"git_version_control/reference/vscode/#mis-on-ide-integrated-development-environment","title":"Mis on IDE (Integrated Development Environment)?","text":"<p>IDE on integreeritud arenduskeskkond - \u00fcks programm, mis sisaldab k\u00f5iki arendamiseks vajalikke t\u00f6\u00f6riistu:</p>"},{"location":"git_version_control/reference/vscode/#traditsiooniline-vs-ide-toovoog","title":"Traditsiooniline vs IDE T\u00f6\u00f6voog","text":"Traditsioooniline IDE (VS Code) Notepad koodi kirjutamiseks Code Editor - syntax highlighting Command line kompileerimiseks Integrated Terminal - k\u00e4sud sama aknas Eraldi FTP klient failide \u00fcleslaadimiseks Remote Extensions - otse\u00fchendus Git bash versioonihalduseks Source Control - Git integreeritud Veebilehtisja vigade otsimiseks Debugging - breakpointid, watches"},{"location":"git_version_control/reference/vscode/#ide-vs-code-editor-vs-text-editor","title":"IDE vs Code Editor vs Text Editor","text":"T\u00fc\u00fcp N\u00e4ited Eelised Puudused Text Editor Notepad, gedit Kiire, lihtne Pole programmeerimisfunktsioone Code Editor VS Code, Sublime Kerge, laiendatav Vajab seadistamist IDE IntelliJ, Eclipse K\u00f5ik kaasas Raske, aeglane <p>VS Code on h\u00fcbriid - Code Editor, mida saab laienduste abil IDE-ks muuta!</p>"},{"location":"git_version_control/reference/vscode/#miks-vs-code-devops-ile","title":"Miks VS Code DevOps-ile?","text":"<ul> <li>Kerge ja kiire - k\u00e4ivitub sekundiga</li> <li>Laiendatav - lisa ainult see, mida vajad</li> <li>Multi-language - Python, YAML, JSON, Bash, Dockerfile</li> <li>Remote-first - loodud serveritega t\u00f6\u00f6tamiseks</li> <li>Git-centered - versioonihaldus on s\u00fcvuti integreeritud</li> </ul>"},{"location":"git_version_control/reference/vscode/#vs-code-installimine","title":"VS Code Installimine","text":""},{"location":"git_version_control/reference/vscode/#windows","title":"Windows","text":"<p>PowerShell<pre><code>winget install Microsoft.VisualStudioCode\n</code></pre> V\u00f5i lae alla: https://code.visualstudio.com</p>"},{"location":"git_version_control/reference/vscode/#macos","title":"macOS","text":"Bash<pre><code>brew install --cask visual-studio-code\n</code></pre>"},{"location":"git_version_control/reference/vscode/#linux-ubuntudebian","title":"Linux (Ubuntu/Debian)","text":"Bash<pre><code>sudo snap install code --classic\n</code></pre>"},{"location":"git_version_control/reference/vscode/#vajalikud-laiendused","title":"Vajalikud Laiendused","text":""},{"location":"git_version_control/reference/vscode/#laienduste-allikad","title":"Laienduste Allikad","text":"<ul> <li>VS Code sisene: <code>Ctrl+Shift+X</code> - p\u00f5hiline viis</li> <li>VS Marketplace: https://marketplace.visualstudio.com/ - brauseris sirvimine</li> <li>Teemade galerii: https://vscodethemes.com/ - visuaalsete teemade sirvimine</li> <li>Command line: <code>code --install-extension publisher.name</code></li> </ul>"},{"location":"git_version_control/reference/vscode/#installimisvoimalused","title":"Installimisv\u00f5imalused","text":"Meetod Kuidas kasutada Millal kasutada N\u00e4ide VS Code GUI <code>Ctrl+Shift+X</code> \u2192 otsi \u2192 Install Tavakasutus Otsi \"Prettier\" Marketplace veeb Sirvi \u2192 Install \u2192 ava VS Code Laienduste uurimine marketplace.visualstudio.com Teemade galerii Vali teema \u2192 Install \u2192 ava VS Code Visuaalse disaini valik vscodethemes.com Command line <code>code --install-extension ms-vscode-remote.remote-ssh</code> Automiseering, skriptid Bulk install VSIX fail Download .vsix \u2192 Install from VSIX Erilaiendused, beta versioonid .vsix local install"},{"location":"git_version_control/reference/vscode/#teemade-installimine","title":"Teemade Installimine","text":"<ol> <li>Mine https://vscodethemes.com/</li> <li>Sirvi visuaalselt erinevaid teemasid (Dark, Light, High Contrast)</li> <li>Kliki Install \u2192 avaneb VS Code</li> <li>Teema aktiveeritakse automaatselt</li> </ol>"},{"location":"git_version_control/reference/vscode/#minu-lemmikud-laiendused","title":"Minu lemmikud laiendused","text":"<p>Ava VS Code \u2192 Vajuta <code>Ctrl+Shift+X</code> \u2192 Paigalda j\u00e4rgmised:</p> Laienduse nimi Autor Otsingus\u00f5na Marketplace ID Kasutus Remote - SSH Microsoft \"Remote - SSH\" <code>ms-vscode-remote.remote-ssh</code> Serveritega t\u00f6\u00f6tamiseks Remote Explorer Microsoft \"Remote Explorer\" <code>ms-vscode.remote-explorer</code> Remote \u00fchenduste haldamiseks Prettier - Code formatter Prettier \"Prettier\" <code>esbenp.prettier-vscode</code> Koodi automaatseks formateerimiseks GitHub Actions GitHub \"GitHub Actions\" <code>github.vscode-github-actions</code> CI/CD t\u00f6\u00f6voogluste jaoks GitHub Codespaces GitHub \"GitHub Codespaces\" <code>github.codespaces</code> Pilve arenduskeskkonnaks indent-rainbow oderwat \"indent-rainbow\" <code>oderwat.indent-rainbow</code> Taanduste visualiseerimiseks (YAML!)"},{"location":"git_version_control/reference/vscode/#marketplace-kasutamine","title":"Marketplace Kasutamine","text":"<ol> <li>Mine https://marketplace.visualstudio.com/</li> <li>Otsi laiendust (nt \"Docker\")</li> <li>Install \u2192 avaneb VS Code automaatselt</li> <li>V\u00f5i kopeeri Marketplace ID \u2192 k\u00e4surea install</li> </ol>"},{"location":"git_version_control/reference/vscode/#ssh-seadistamine","title":"SSH Seadistamine","text":""},{"location":"git_version_control/reference/vscode/#ssh-votme-loomine","title":"SSH v\u00f5tme loomine:","text":"Bash<pre><code>ssh-keygen -t rsa -b 4096 -C \"sinu.email@example.com\"\n</code></pre>"},{"location":"git_version_control/reference/vscode/#vs-code-ssh-config","title":"VS Code SSH config:","text":"<p>Vajuta <code>F1</code> \u2192 <code>Remote-SSH: Open Configuration File</code></p> <p>Lisa: Text Only<pre><code>Host serverinimi\n    HostName IP.aadress.v\u00f5i.domeen\n    User kasutajanimi\n    Port 22\n    IdentityFile ~/.ssh/id_rsa\n</code></pre></p>"},{"location":"git_version_control/reference/vscode/#pohiseadistused","title":"P\u00f5hiseadistused","text":"<p>Ava Settings (<code>Ctrl+,</code>) ja lisa:</p> JSON<pre><code>{\n    \"editor.formatOnSave\": true,\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n    \"files.autoSave\": \"afterDelay\",\n    \"editor.tabSize\": 2,\n    \"editor.insertSpaces\": true,\n    \"yaml.format.enable\": true\n}\n</code></pre>"},{"location":"git_version_control/reference/vscode/#virtuaalmasinad-ja-uhendused","title":"Virtuaalmasinad ja \u00dchendused","text":""},{"location":"git_version_control/reference/vscode/#voimalikud-keskkonnad","title":"V\u00f5imalikud Keskkonnad","text":"Keskkond Installimisviis IP aadressi leidmine WSL2 (Windows) <code>wsl --install Ubuntu</code> Automaatne (localhost) Multipass <code>multipass launch --name dev</code> <code>multipass list</code> VirtualBox GUI kaudu Ubuntu ISO VM seadetest Network Docker <code>docker run -it ubuntu bash</code> <code>docker inspect container_id</code>"},{"location":"git_version_control/reference/vscode/#wsl2-uhendus-koige-lihtsam","title":"WSL2 \u00dchendus (k\u00f5ige lihtsam)","text":"Bash<pre><code># Windows PowerShell-is\nwsl --install Ubuntu\n# Taask\u00e4ivita arvuti\n# WSL2 k\u00e4ivitub automaatselt VS Code-s Remote Explorer-is\n</code></pre>"},{"location":"git_version_control/reference/vscode/#multipass-uhendus","title":"Multipass \u00dchendus","text":"Bash<pre><code># Masina loomine\nmultipass launch --name devserver --cpus 2 --mem 2G --disk 10G\n\n# SSH info saamine\nmultipass info devserver\n\n# VS Code config\nHost multipass-dev\n    HostName [IP multipass info k\u00e4sust]\n    User ubuntu\n    IdentityFile ~/.ssh/id_rsa\n</code></pre>"},{"location":"git_version_control/reference/vscode/#virtualbox-uhendus","title":"VirtualBox \u00dchendus","text":"<ol> <li>Loo Ubuntu VM VirtualBox-is</li> <li>Network: Bridged Adapter v\u00f5i NAT + Port Forwarding</li> <li>Ubuntu-s: <code>sudo apt install openssh-server</code></li> <li>Lisa VS Code SSH config-i</li> </ol>"},{"location":"git_version_control/reference/vscode/#remote-explorer-kasutamine","title":"Remote Explorer Kasutamine","text":""},{"location":"git_version_control/reference/vscode/#uhenduste-vaatamine","title":"\u00dchenduste Vaatamine","text":"<ol> <li>K\u00fclgriba \u2192 Remote Explorer ikoon</li> <li>SSH Targets all n\u00e4ed k\u00f5iki seadistatud \u00fchendusi  </li> <li>Kliki masina nime \u2192 Connect in New Window</li> </ol>"},{"location":"git_version_control/reference/vscode/#remote-extensions","title":"Remote Extensions","text":"<p>Remote masinas on eraldi extension store: - \u00dchenda remote masinaga - Extensions paneel n\u00e4itab \"Install in SSH: serverinimi\" - Paigalda vajalikud extensions remote masinas</p> <p>Soovitatud remote extensions: - Python, Docker, YAML - kui vaja remote masinas</p>"},{"location":"git_version_control/reference/vscode/#mitme-terminali-kasutamine","title":"Mitme Terminali Kasutamine","text":""},{"location":"git_version_control/reference/vscode/#terminal-loomine","title":"Terminal Loomine","text":"Text Only<pre><code>Ctrl+Shift+` - Uus terminal\nCtrl+` - Terminali n\u00e4itamine/peitmine\n</code></pre>"},{"location":"git_version_control/reference/vscode/#terminal-tuubid","title":"Terminal T\u00fc\u00fcbid","text":"Kiirklahv Terminal t\u00fc\u00fcp <code>Ctrl+Shift+</code> Kohalik terminal Remote aknas: <code>Ctrl+Shift+</code> Remote terminal <code>+</code> nupp terminal paneelil Lisa uus"},{"location":"git_version_control/reference/vscode/#terminali-haldamine","title":"Terminali Haldamine","text":"<ul> <li>Split Terminal: Terminal paremkl\u00f5ps \u2192 \"Split Terminal\"  </li> <li>Rename: Terminal paremkl\u00f5ps \u2192 \"Rename\"</li> <li>Kill Terminal: Terminal paremkl\u00f5ps \u2192 \"Kill Terminal\"</li> <li>Switch: <code>Ctrl+PageUp/PageDown</code> v\u00f5i dropdown men\u00fc\u00fc</li> </ul>"},{"location":"git_version_control/reference/vscode/#kiire-test","title":"Kiire Test","text":"<ol> <li>Loo uus kaust ja ava VS Code-s</li> <li>Loo fail <code>test.yaml</code>: YAML<pre><code>server:\n  host: localhost\n  port: 8080\n  settings:\n    debug: true\n    timeout: 30\n</code></pre></li> <li>Salvesta (<code>Ctrl+S</code>) - Prettier peaks formateerima</li> </ol>"},{"location":"git_version_control/reference/whatthecommit_guide/","title":"WhatTheCommit.com \u2013 Commit-s\u00f5numid, mis solvavad sind tagasi \ud83d\ude04","text":""},{"location":"git_version_control/reference/whatthecommit_guide/#mis-see-tegelikult-on","title":"Mis see tegelikult on?","text":"<p>WhatTheCommit.com on sait, mis viskab sulle suvalisi commit-s\u00f5numeid, sest sa oled ilmselt liiga laisk, et m\u00f5elda ise midagi paremat kui \u201cupdate\u201d v\u00f5i \u201casdfasdkjf\u201d.</p> <p>Kasuta seda ainult kohalikes projektides, muidu keegi vaatab su Git-ajalugu ja valandab kogemata.</p>"},{"location":"git_version_control/reference/whatthecommit_guide/#kiire-seadistus-sest-sul-on-kannatust-umbes-6-sekundiks","title":"Kiire Seadistus, sest sul on kannatust umbes 6 sekundiks","text":"<p>Lisa oma <code>~/.bashrc</code>-i:</p> Bash<pre><code>alias gitcommit='git commit -m \"$(curl -s https://whatthecommit.com/index.txt)\"'\n</code></pre> <p>V\u00f5i kui sa tahad teha seda \"nagu proff\":</p> Bash<pre><code>git config --global alias.commit-fun '!f() { git commit -m \"$(curl -s https://whatthecommit.com/index.txt)\"; }; f'\n</code></pre>"},{"location":"git_version_control/reference/whatthecommit_guide/#kuidas-see-tootab-ei-toota-see-toimib-umbes","title":"\ud83c\udfae Kuidas see t\u00f6\u00f6tab? Ei t\u00f6\u00f6ta, see toimib\u2026 umbes.","text":"Bash<pre><code>$ git add .\n$ gitcommit\n[main a1b2c3d] i have no idea what i\u2019m doing\n 1 file changed, 1 panic attack triggered\n</code></pre>"},{"location":"git_version_control/reference/whatthecommit_guide/#moned-parlid-masinast-kes-moistab-su-hingevalu","title":"M\u00f5ned p\u00e4rlid masinast, kes m\u00f5istab su hingevalu","text":"<ul> <li>\u201ccommit before i break more shit\u201d \u2013 v\u00e4ga ennetav</li> <li>\u201coops, forgot to add that file\u201d \u2013 klassika</li> <li>\u201cthat last commit? oh, forget it\u201d \u2013 Git-zen</li> <li>\u201ctrust me, it\u2019s working\u201d \u2013 valede tippvorm</li> </ul>"},{"location":"git_version_control/reference/whatthecommit_guide/#mitte-kasutada-too-juures-kui-sa-tahad-tookohta-hoida","title":"\u26a0 Mitte kasutada t\u00f6\u00f6 juures\u2026 kui sa tahad t\u00f6\u00f6kohta hoida","text":"<p>See t\u00f6\u00f6riist sobib h\u00e4sti: \u2705 Protot\u00fc\u00fcpideks \u2705 Kodukoodiks \u2705 Identiteedikriisideks</p>"},{"location":"kubernetes_overview/homework/","title":"Kubernetes Kodut\u00f6\u00f6: BookStore E-commerce Rakendus","text":"<p>Eesm\u00e4rk: Deploy'ida kolmeosaline web rakendus Kubernetes'i kasutades</p>"},{"location":"kubernetes_overview/homework/#ulesande-kirjeldus","title":"\u00dclesande Kirjeldus","text":"<p>Teie \u00fclesanne on luua Kubernetes deployment lihtsa e-commerce rakenduse jaoks nimega \"BookStore\". Fork'ige antud repositoorium, parandage vigased failid ja lisage puuduvad komponendid.</p>"},{"location":"kubernetes_overview/homework/#arhitektuur","title":"Arhitektuur","text":"Text Only<pre><code>Internet \u2192 Frontend (nginx) \u2192 Backend API \u2192 PostgreSQL Database\n</code></pre>"},{"location":"kubernetes_overview/homework/#repository-link","title":"Repository Link","text":"<p>Starter Repository: <code>https://github.com/your-instructor/bookstore-k8s-starter</code></p> <p>Fork'ige see repo ja t\u00f6\u00f6tage oma koopias!</p>"},{"location":"kubernetes_overview/homework/#praegused-failid-repos-vigasedmittetaielikud","title":"Praegused Failid Repo's (Vigased/Mittet\u00e4ielikud!)","text":""},{"location":"kubernetes_overview/homework/#databasepostgres-secretyaml","title":"\ud83d\udcc1 <code>/database/postgres-secret.yaml</code>","text":"YAML<pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: postgres-secret\ntype: Opaque\ndata:\n  username: YWRtaW4=\n  password: \"\"           # \u274c PUUDU: lisa base64 encoded \"mypassword123\"\n  database: \"\"           # \u274c PUUDU: lisa base64 encoded \"bookstore\"\n</code></pre>"},{"location":"kubernetes_overview/homework/#databasepostgres-deploymentyaml","title":"\ud83d\udcc1 <code>/database/postgres-deployment.yaml</code>","text":"YAML<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres-db\n  labels:\n    app: database\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres      # \u274c VIGA: ei vasta metadata labels'iga\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:13-alpine\n        ports:\n        - containerPort: 5432\n        # \u274c PUUDUVAD: environment variables Secret'ist\n        # \u274c PUUDUVAD: resource limits\n</code></pre>"},{"location":"kubernetes_overview/homework/#backendbackend-configyaml","title":"\ud83d\udcc1 <code>/backend/backend-config.yaml</code>","text":"YAML<pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: backend-config\ndata:\n  NODE_ENV: \"development\"     # \u274c VALE: peaks olema \"production\"\n  PORT: \"8080\"               # \u274c VALE: peaks olema \"3000\"\n  DATABASE_HOST: \"localhost\" # \u274c VALE: peaks olema Kubernetes service nimi\n  API_ENDPOINT: \"/health\"    # \u2705 \u00d5KE\n</code></pre>"},{"location":"kubernetes_overview/homework/#backendbackend-deploymentyaml","title":"\ud83d\udcc1 <code>/backend/backend-deployment.yaml</code>","text":"YAML<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: backend-api\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: backend\n  template:\n    metadata:\n      labels:\n        app: backend\n    spec:\n      containers:\n      - name: api\n        image: hashicorp/http-echo:0.2.3\n        args:\n        - -text=Hello from BookStore API\n        - -listen=:3000\n        ports:\n        - containerPort: 3000\n        # \u274c PUUDUVAD: ConfigMap environment variables\n        # \u274c PUUDUVAD: health checks (liveness/readiness probes)\n        # \u274c PUUDUVAD: resource requests/limits\n</code></pre>"},{"location":"kubernetes_overview/homework/#frontendfrontend-serviceyaml","title":"\ud83d\udcc1 <code>/frontend/frontend-service.yaml</code>","text":"YAML<pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: frontend-service\nspec:\n  type: ClusterIP          # \u274c VIGA: peaks olema NodePort v\u00f5i LoadBalancer\n  selector:\n    app: frontend\n  ports:\n  - port: 80\n    targetPort: 8080       # \u274c VIGA: nginx kuulab port 80\n</code></pre>"},{"location":"kubernetes_overview/homework/#frontendnginx-configyaml","title":"\ud83d\udcc1 <code>/frontend/nginx-config.yaml</code>","text":"YAML<pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: nginx-config\ndata:\n  default.conf: |\n    server {\n        listen 80;\n        location / {\n            root /usr/share/nginx/html;\n            index index.html;\n        }\n        location /api/ {\n            proxy_pass http://backend-service:8080/;  # \u274c VIGA: vale port\n        }\n    }\n  # \u274c PUUDU: index.html sisu\n</code></pre>"},{"location":"kubernetes_overview/homework/#readmemd-mittetaielik","title":"\ud83d\udcc1 <code>/README.md</code> (Mittet\u00e4ielik)","text":"Markdown<pre><code># BookStore Kubernetes App\n\n## What this does\nSimple e-commerce app on Kubernetes\n\n## How to run\n```bash\nkubectl apply -f .\n</code></pre>"},{"location":"kubernetes_overview/homework/#puuduvad","title":"\u274c PUUDUVAD:","text":""},{"location":"kubernetes_overview/homework/#-detailed-setup-instructions","title":"- Detailed setup instructions","text":""},{"location":"kubernetes_overview/homework/#-prerequisites","title":"- Prerequisites","text":""},{"location":"kubernetes_overview/homework/#-troubleshooting","title":"- Troubleshooting","text":""},{"location":"kubernetes_overview/homework/#-architecture-diagram","title":"- Architecture diagram","text":"Text Only<pre><code>---\n\n## Teie \u00dclesanded\n\n### 1. Fork Repository\n```bash\n# Fork GitHub'is, seej\u00e4rel:\ngit clone https://github.com/YOUR-USERNAME/bookstore-k8s-starter\ncd bookstore-k8s-starter\n</code></pre>"},{"location":"kubernetes_overview/homework/#2-parandage-vigased-failid","title":"2. Parandage Vigased Failid","text":"<p>postgres-secret.yaml: - [ ] Lisa puuduv <code>password</code> base64 v\u00e4\u00e4rtus - [ ] Lisa puuduv <code>database</code> base64 v\u00e4\u00e4rtus</p> <p>postgres-deployment.yaml: - [ ] Paranda labels selector match - [ ] Lisa environment variables Secret'ist - [ ] Lisa resource limits (memory: 256Mi, cpu: 200m)</p> <p>backend-config.yaml: - [ ] Muuda NODE_ENV \u2192 \"production\" - [ ] Muuda PORT \u2192 \"3000\" - [ ] Muuda DATABASE_HOST \u00f5igeks service nimeks</p> <p>backend-deployment.yaml: - [ ] Lisa ConfigMap environment variables - [ ] Lisa liveness probe (HTTP GET :3000/) - [ ] Lisa readiness probe (HTTP GET :3000/) - [ ] Lisa resource limits</p> <p>frontend-service.yaml: - [ ] Muuda type NodePort v\u00f5i LoadBalancer'iks - [ ] Paranda targetPort \u2192 80</p> <p>nginx-config.yaml: - [ ] Paranda proxy_pass port number - [ ] Lisa index.html sisu (lihtne HTML leht)</p>"},{"location":"kubernetes_overview/homework/#3-looge-puuduvad-failid","title":"3. Looge Puuduvad Failid","text":"<p>Puuduvad failid, mida te peate looma:</p> <ul> <li> <code>/database/postgres-service.yaml</code></li> <li> <code>/backend/backend-service.yaml</code> </li> <li> <code>/frontend/frontend-deployment.yaml</code></li> </ul>"},{"location":"kubernetes_overview/homework/#4-taiendage-readmemd","title":"4. T\u00e4iendage README.md","text":"<p>Lisa j\u00e4rgmised sektsioonid: - [ ] Prerequisites (Minikube, kubectl) - [ ] Detailed deployment steps - [ ] Testing instructions - [ ] Troubleshooting common issues - [ ] Architecture explanation</p>"},{"location":"kubernetes_overview/homework/#5-testimine","title":"5. Testimine","text":"Bash<pre><code># Deploy k\u00f5ik\nkubectl apply -f database/\nkubectl apply -f backend/\nkubectl apply -f frontend/\n\n# Kontrolli\nkubectl get all\nminikube service frontend-service\n</code></pre>"},{"location":"kubernetes_overview/homework/#naited-oigetest-vaartustest","title":"N\u00e4ited \u00d5igetest V\u00e4\u00e4rtustest","text":""},{"location":"kubernetes_overview/homework/#base64-encoding-examples","title":"Base64 Encoding Examples","text":"Bash<pre><code>echo -n \"mypassword123\" | base64\n# V\u00e4ljund: bXlwYXNzd29yZDEyMw==\n\necho -n \"bookstore\" | base64  \n# V\u00e4ljund: Ym9va3N0b3Jl\n</code></pre>"},{"location":"kubernetes_overview/homework/#environment-variables-example","title":"Environment Variables Example","text":"YAML<pre><code>env:\n- name: POSTGRES_USER\n  valueFrom:\n    secretKeyRef:\n      name: postgres-secret\n      key: username\n</code></pre>"},{"location":"kubernetes_overview/homework/#health-probe-example","title":"Health Probe Example","text":"YAML<pre><code>livenessProbe:\n  httpGet:\n    path: /\n    port: 3000\n  initialDelaySeconds: 30\n  periodSeconds: 10\n</code></pre>"},{"location":"kubernetes_overview/homework/#resource-limits-example","title":"Resource Limits Example","text":"YAML<pre><code>resources:\n  requests:\n    memory: \"128Mi\"\n    cpu: \"100m\"\n  limits:\n    memory: \"256Mi\"\n    cpu: \"200m\"\n</code></pre>"},{"location":"kubernetes_overview/homework/#esitamine","title":"Esitamine","text":""},{"location":"kubernetes_overview/homework/#git-workflow","title":"Git Workflow","text":"Bash<pre><code># Tehke muudatused\ngit add .\ngit commit -m \"Fix Kubernetes deployments and add missing files\"\ngit push origin main\n\n# Saatke mulle repo link\n</code></pre> <p>Esitamisviis: Saatke email'iga oma GitHub repo link koos l\u00fchikese kirjeldusega, mida muutsite.</p>"},{"location":"kubernetes_overview/homework/#noutud-commitid","title":"N\u00f5utud Commit'id","text":"<p>Teie git history peaks n\u00e4itama: - [ ] Initial fork - [ ] Fix secret values - [ ] Fix deployment configurations - [ ] Add missing service files - [ ] Complete frontend setup - [ ] Update documentation</p>"},{"location":"kubernetes_overview/homework/#hindamiskriteeriumid","title":"Hindamiskriteeriumid","text":""},{"location":"kubernetes_overview/homework/#git-ja-kood-40-punkti","title":"Git ja Kood (40 punkti)","text":"<ul> <li> Repository korrektselt fork'itud (5p)</li> <li> K\u00f5ik vead parandatud (20p)  </li> <li> Puuduvad failid lisatud (15p)</li> </ul>"},{"location":"kubernetes_overview/homework/#funktsionaalsus-40-punkti","title":"Funktsionaalsus (40 punkti)","text":"<ul> <li> K\u00f5ik pod'id k\u00e4ivituvad (15p)</li> <li> Service'id t\u00f6\u00f6tavad (10p)</li> <li> V\u00e4line ligip\u00e4\u00e4s toimib (15p)</li> </ul>"},{"location":"kubernetes_overview/homework/#dokumentatsioon-20-punkti","title":"Dokumentatsioon (20 punkti)","text":"<ul> <li> README.md t\u00e4ielik (10p)</li> <li> Git commit message'id kirjeldavad muudatusi (10p)</li> </ul>"},{"location":"kubernetes_overview/homework/#abi-ja-ressursid","title":"Abi ja Ressursid","text":""},{"location":"kubernetes_overview/homework/#kubernetes-dokumentatsioon","title":"Kubernetes Dokumentatsioon","text":"<ul> <li>Deployments</li> <li>Services</li> <li>ConfigMaps</li> <li>Secrets</li> </ul>"},{"location":"kubernetes_overview/homework/#debug-kasud","title":"Debug K\u00e4sud","text":"Bash<pre><code>kubectl get pods\nkubectl describe pod &lt;pod-name&gt;\nkubectl logs &lt;pod-name&gt;\nkubectl get services\n</code></pre> <p>Edu t\u00f6\u00f6ga! Push'ige oma t\u00f6\u00f6 GitHub'i ja saatke link \ud83d\udce7</p>"},{"location":"kubernetes_overview/lab1/","title":"Kubernetes Labor - P\u00f5hialused","text":"<p>Eesm\u00e4rk: M\u00f5ista Kubernetes'i p\u00f5hikontseptsioone ja teha esimesed sammud</p>"},{"location":"kubernetes_overview/lab1/#1-keskkonna-seadistamine","title":"1. Keskkonna Seadistamine","text":""},{"location":"kubernetes_overview/lab1/#11-minikube-installeerimine","title":"1.1 Minikube Installeerimine","text":"<p>Minikube on t\u00f6\u00f6riist, mis loob kohaliku Kubernetes klastri teie arvutis. See emuleerib p\u00e4ris Kubernetes keskkonda, kuid t\u00f6\u00f6tab \u00fches masinas.</p> <p>Miks Minikube? P\u00e4ris Kubernetes klaster vajab mitut serverit ja keerukat seadistust. Minikube teeb selle lihtsaks \u00f5ppimiseks.</p> Bash<pre><code># macOS\nbrew install minikube\n\n# Linux  \ncurl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64\nsudo install minikube-linux-amd64 /usr/local/bin/minikube\n\n# Kontrollige installatsiooni\nminikube version\n</code></pre>"},{"location":"kubernetes_overview/lab1/#12-klastri-kaivitamine","title":"1.2 Klastri K\u00e4ivitamine","text":"Bash<pre><code># K\u00e4ivitage Minikube\nminikube start\n\n# Kontrollige, et k\u00f5ik t\u00f6\u00f6tab\nkubectl cluster-info\nkubectl get nodes\n</code></pre> <p>Peaksite n\u00e4gema \u00fchte node'i \"Ready\" staatuses. See on teie kohalik Kubernetes klaster.</p> <p>Kontrollpunkt: <code>kubectl get nodes</code> n\u00e4itab \"Ready\" staatust.</p>"},{"location":"kubernetes_overview/lab1/#2-esimene-pod","title":"2. Esimene Pod","text":""},{"location":"kubernetes_overview/lab1/#21-podi-moiste","title":"2.1 Pod'i M\u00f5iste","text":"<p>Pod on Kubernetes'i v\u00e4ikseim \u00fcksus. M\u00f5elge sellele nagu \"wrapper'ile\" \u00fche v\u00f5i mitme konteineri \u00fcmber. Tavaliselt on pod'is \u00fcks kontainer.</p> <p>Miks mitte lihtsalt kontainer? Pod annab konteinerile IP aadressi, DNS nime ja v\u00f5imaluse jagada failis\u00fcsteemi teiste pod'i konteineritega.</p> Bash<pre><code># Looge esimene pod\nkubectl run nginx-pod --image=nginx:1.20 --port=80\n\n# Vaadake pod'i staatust\nkubectl get pods\n\n# Vaadake detailset infot\nkubectl describe pod nginx-pod\n</code></pre>"},{"location":"kubernetes_overview/lab1/#22-podiga-suhtlemine","title":"2.2 Pod'iga Suhtlemine","text":"Bash<pre><code># Vaadake pod'i logisid\nkubectl logs nginx-pod\n\n# Minge pod'i sisse\nkubectl exec -it nginx-pod -- /bin/bash\n\n# Pod'i sees saate testida:\ncurl localhost\nexit\n\n# Testiga kohalikult (avahe uus terminal)\nkubectl port-forward nginx-pod 8080:80\n# Avage brauseris: http://localhost:8080\n</code></pre> <p>Selgitus: Port forwarding suunab teie arvuti pordi 8080 pod'i porti 80. Nii saate pod'i testida nagu see oleks teie arvutis.</p> Bash<pre><code># Kustutage pod\nkubectl delete pod nginx-pod\n</code></pre> <p>Kontrollpunkt: Saite luua pod'i, testida seda ja kustutada.</p>"},{"location":"kubernetes_overview/lab1/#3-deployment-rakenduse-haldamine","title":"3. Deployment - Rakenduse Haldamine","text":""},{"location":"kubernetes_overview/lab1/#31-miks-deployment","title":"3.1 Miks Deployment?","text":"<p>\u00dcksik pod on nagu \u00fcksik t\u00f6\u00f6taja. Kui t\u00f6\u00f6taja haigestub (pod kukub), ei ole kedagi, kes t\u00f6\u00f6d j\u00e4tkaks. Deployment on nagu manager - ta j\u00e4lgib, et t\u00f6\u00f6tajaid oleks alati \u00f5ige arv.</p> <p>Looge fail <code>nginx-deployment.yaml</code>:</p> YAML<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\nspec:\n  replicas: 3  # Tahame 3 pod'i\n  selector:\n    matchLabels:\n      app: nginx\n  template:    # Kuidas pod v\u00e4lja n\u00e4eb\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.20\n        ports:\n        - containerPort: 80\n</code></pre> Bash<pre><code># Looge deployment\nkubectl apply -f nginx-deployment.yaml\n\n# Vaadake deployment'i\nkubectl get deployments\n\n# Vaadake pod'e\nkubectl get pods\n\n# Vaadake, mis juhtub kui pod'i kustutada\nkubectl delete pod &lt;nginx-pod-name&gt;\nkubectl get pods\n</code></pre> <p>M\u00e4rkate: Uus pod tekib automaatselt! Deployment taastas soovitud oleku.</p>"},{"location":"kubernetes_overview/lab1/#32-skaleerimise-test","title":"3.2 Skaleerimise Test","text":"Bash<pre><code># Skaleerige 5 pod'ini\nkubectl scale deployment nginx-deployment --replicas=5\n\n# Vaadage tulemust\nkubectl get pods\n\n# Skaleerige tagasi 2 pod'ini  \nkubectl scale deployment nginx-deployment --replicas=2\n\n# Vaadake, kuidas pod'id kustutatakse\nkubectl get pods\n</code></pre> <p>Kontrollpunkt: M\u00f5istate, kuidas Deployment hoiab soovitud arvu pod'e t\u00f6\u00f6s.</p>"},{"location":"kubernetes_overview/lab1/#4-service-stabiilne-ligipaas","title":"4. Service - Stabiilne Ligip\u00e4\u00e4s","text":""},{"location":"kubernetes_overview/lab1/#41-servicei-probleem","title":"4.1 Service'i Probleem","text":"<p>Pod'ide IP aadressid muutuvad! Kui pod taask\u00e4ivitatakse, saab ta uue IP. Kuidas teised pod'id teda leiavad?</p> <p>Service lahendab selle - ta annab stabiilse IP aadressi ja DNS nime.</p> <p>Looge fail <code>nginx-service.yaml</code>:</p> YAML<pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-service\nspec:\n  selector:\n    app: nginx  # Leiab k\u00f5ik pod'id label'iga app=nginx\n  ports:\n  - port: 80\n    targetPort: 80\n  type: NodePort  # V\u00f5imaldab v\u00e4lisest ligip\u00e4\u00e4su\n</code></pre> Bash<pre><code># Looge service\nkubectl apply -f nginx-service.yaml\n\n# Vaadake service'e\nkubectl get services\n\n# Testige service'i DNS'd\nkubectl run test-pod --image=busybox --rm -it --restart=Never -- sh\n\n# Test pod'is:\nnslookup nginx-service\nwget -qO- nginx-service\nexit\n</code></pre>"},{"location":"kubernetes_overview/lab1/#42-valine-ligipaas","title":"4.2 V\u00e4line Ligip\u00e4\u00e4s","text":"Bash<pre><code># Avage service v\u00e4ljastpoolt\nminikube service nginx-service\n</code></pre> <p>See peaks avama brauseri nginx'i lehega.</p> <p>Kontrollpunkt: Service suunab liikluse pod'idele ja on ligip\u00e4\u00e4setav v\u00e4ljastpoolt.</p>"},{"location":"kubernetes_overview/lab1/#5-configmap-konfiguratsioon","title":"5. ConfigMap - Konfiguratsioon","text":""},{"location":"kubernetes_overview/lab1/#51-miks-configmap","title":"5.1 Miks ConfigMap?","text":"<p>Rakendused vajavad konfiguratsiooni (andmebaasi URL, API v\u00f5tmed). Neid ei tohiks k\u00f5vakoodida image'i sisse. ConfigMap hoiab neid eraldi.</p> Bash<pre><code># Looge ConfigMap k\u00e4surealt\nkubectl create configmap app-config \\\n  --from-literal=database.host=postgres-service \\\n  --from-literal=api.timeout=30 \\\n  --from-literal=environment=development\n\n# Vaadake ConfigMap'i\nkubectl get configmap app-config -o yaml\n</code></pre>"},{"location":"kubernetes_overview/lab1/#52-configmapi-kasutamine","title":"5.2 ConfigMap'i Kasutamine","text":"<p>Looge fail <code>config-pod.yaml</code>:</p> YAML<pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: config-test-pod\nspec:\n  containers:\n  - name: test\n    image: busybox\n    command: [\"sh\", \"-c\", \"echo Database: $DB_HOST; echo Timeout: $API_TIMEOUT; sleep 3600\"]\n    env:\n    - name: DB_HOST\n      valueFrom:\n        configMapKeyRef:\n          name: app-config\n          key: database.host\n    - name: API_TIMEOUT\n      valueFrom:\n        configMapKeyRef:\n          name: app-config\n          key: api.timeout\n</code></pre> Bash<pre><code># Deploy'ige pod\nkubectl apply -f config-pod.yaml\n\n# Vaadake tulemust\nkubectl logs config-test-pod\n</code></pre> <p>Kontrollpunkt: Pod kasutab ConfigMap'i v\u00e4\u00e4rtuseid keskkonnamuutujatena.</p>"},{"location":"kubernetes_overview/lab1/#6-cleanup","title":"6. Cleanup","text":"Bash<pre><code># Kustutage k\u00f5ik ressursid\nkubectl delete deployment nginx-deployment\nkubectl delete service nginx-service\nkubectl delete configmap app-config\nkubectl delete pod config-test-pod\n\n# Peatage Minikube\nminikube stop\n</code></pre>"},{"location":"kubernetes_overview/lab1/#kokkuvote","title":"Kokkuv\u00f5te","text":"<p>Mida \u00f5ppisite: - Pod - v\u00e4ikseim \u00fcksus, sisaldab konteinereid - Deployment - haldab pod'ide arvu ja uuendusi - Service - stabiilne v\u00f5rguligip\u00e4\u00e4s pod'idele - ConfigMap - konfiguratsioon rakenduste jaoks</p> <p>J\u00e4rgmises osas (Intermediate): - Secret'id ja turvalisus - Health check'id ja monitoring - Rolling update'id - Keerukamad rakendused</p>"},{"location":"kubernetes_overview/lab1/#viited","title":"Viited","text":"<ul> <li>Kubernetes Official Documentation - ametlik dokumentatsioon</li> <li>Minikube Documentation - Minikube seadistamine</li> <li>kubectl Cheat Sheet - kasulikud k\u00e4sud</li> </ul>"},{"location":"kubernetes_overview/lab2/","title":"Kubernetes Labor - Intermediate","text":"<p>Eesm\u00e4rk: \u00d5ppida Kubernetes'i edasij\u00f5udnud funktsioone ja t\u00f6\u00f6riistade kompleksset kasutamist</p>"},{"location":"kubernetes_overview/lab2/#1-secretid-ja-turvalisus","title":"1. Secret'id ja Turvalisus","text":""},{"location":"kubernetes_overview/lab2/#11-tundlike-andmete-haldamine","title":"1.1 Tundlike Andmete Haldamine","text":"<p>Erinevalt ConfigMap'ist, mis hoiab avalikku konfiguratsiooni, hoiavad Secret'id tundlikke andmeid nagu paroolid ja API v\u00f5tmed. Secret'id on base64 kodeeritud (mitte kr\u00fcpteeritud!) ja Kubernetes piirab nende ligip\u00e4\u00e4su.</p> Bash<pre><code># Looge secret k\u00e4surealt\nkubectl create secret generic database-secret \\\n  --from-literal=username=postgres \\\n  --from-literal=password=SuperSecret123 \\\n  --from-literal=connection-string=\"postgresql://postgres:SuperSecret123@db:5432/myapp\"\n\n# Vaadake secret'i struktuuri\nkubectl get secret database-secret -o yaml\n\n# Dekodeerige base64 v\u00e4\u00e4rtus\necho \"cG9zdGdyZXM=\" | base64 -d\n</code></pre>"},{"location":"kubernetes_overview/lab2/#12-security-context-ja-pod-turvalisus","title":"1.2 Security Context ja Pod Turvalisus","text":"<p>Production keskkonnas tuleb pod'e k\u00e4ivitada minimaalse \u00f5igustega. Security context m\u00e4\u00e4rab, milliste \u00f5igustega pod t\u00f6\u00f6tab.</p> <p>Looge fail <code>secure-pod.yaml</code>:</p> YAML<pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: secure-app-pod\nspec:\n  securityContext:\n    runAsNonRoot: true    # Ei tohi k\u00e4ivituda root kasutajana\n    runAsUser: 1000       # Kasuta UID 1000\n    runAsGroup: 3000      # Kasuta GID 3000\n    fsGroup: 2000         # Failis\u00fcsteemi \u00f5igused\n  containers:\n  - name: app\n    image: busybox\n    command: [\"sh\", \"-c\"]\n    args:\n    - |\n      echo \"K\u00e4ivitan turvaliselt!\"\n      echo \"Kasutaja ID: $(id)\"\n      echo \"Database kasutaja: $DB_USER\"\n      echo \"\u00dchendusstring pikkus: ${#DB_CONNECTION}\"\n      sleep 3600\n    env:\n    - name: DB_USER\n      valueFrom:\n        secretKeyRef:\n          name: database-secret\n          key: username\n    - name: DB_CONNECTION\n      valueFrom:\n        secretKeyRef:\n          name: database-secret\n          key: connection-string\n    securityContext:\n      allowPrivilegeEscalation: false  # Ei saa \u00f5igusi t\u00f5sta\n      readOnlyRootFilesystem: true     # Root failis\u00fcsteem read-only\n      capabilities:\n        drop:\n        - ALL  # Eemalda k\u00f5ik Linux capabilities\n    volumeMounts:\n    - name: tmp-volume\n      mountPath: /tmp\n    - name: secret-files\n      mountPath: /etc/database\n      readOnly: true\n  volumes:\n  - name: tmp-volume\n    emptyDir: {}\n  - name: secret-files\n    secret:\n      secretName: database-secret\n      defaultMode: 0400  # Read-only owner'ile\n</code></pre> Bash<pre><code># Deploy'ige turvaline pod\nkubectl apply -f secure-pod.yaml\n\n# Kontrollige turvalisust\nkubectl logs secure-app-pod\nkubectl describe pod secure-app-pod\n\n# Testige security piiranguid\nkubectl exec -it secure-app-pod -- sh\n\n# Pod'is proovige (peaks eba\u00f5nnestuma):\necho \"test\" &gt; /test.txt      # Read-only filesystem\nwhoami                      # Peaks n\u00e4itama user 1000\nps aux                      # Vaadake protsessi omanik\n\nexit\n</code></pre> <p>Kontrollpunkt: Pod t\u00f6\u00f6tab mitteroot kasutajana ja read-only failis\u00fcsteemiga.</p>"},{"location":"kubernetes_overview/lab2/#2-health-checkid-ja-monitoring","title":"2. Health Check'id ja Monitoring","text":""},{"location":"kubernetes_overview/lab2/#21-probeide-tuubid","title":"2.1 Probe'ide T\u00fc\u00fcbid","text":"<p>Kubernetes kasutab kolme t\u00fc\u00fcpi probe'e pod'ide tervise j\u00e4lgimiseks:</p> <ul> <li>Liveness Probe - kas kontainer t\u00f6\u00f6tab? Kui mitte, restart</li> <li>Readiness Probe - kas kontainer on valmis liiklust vastu v\u00f5tma?</li> <li>Startup Probe - kas kontainer on k\u00e4ivitunud? (aeglastele app'idele)</li> </ul> <p>Looge fail <code>webapp-with-probes.yaml</code>:</p> YAML<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: webapp-with-health\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: webapp\n  template:\n    metadata:\n      labels:\n        app: webapp\n    spec:\n      containers:\n      - name: webapp\n        image: hashicorp/http-echo:0.2.3\n        args:\n        - -text={\"status\":\"ok\",\"pod\":\"$(HOSTNAME)\",\"version\":\"1.0\"}\n        - -listen=:8080\n        ports:\n        - containerPort: 8080\n          name: http\n        env:\n        - name: HOSTNAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        # Startup probe - annab aeglasele app'ile aega k\u00e4ivituda\n        startupProbe:\n          httpGet:\n            path: /\n            port: 8080\n          initialDelaySeconds: 10\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 6  # 30 sekundit aega k\u00e4ivituda\n        # Readiness probe - kas ready liiklust vastu v\u00f5tma?\n        readinessProbe:\n          httpGet:\n            path: /\n            port: 8080\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          successThreshold: 1\n          failureThreshold: 3\n        # Liveness probe - kas app t\u00f6\u00f6tab?\n        livenessProbe:\n          httpGet:\n            path: /\n            port: 8080\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        resources:\n          requests:\n            memory: \"32Mi\"\n            cpu: \"50m\"\n          limits:\n            memory: \"64Mi\"\n            cpu: \"100m\"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: webapp-service\nspec:\n  selector:\n    app: webapp\n  ports:\n  - port: 80\n    targetPort: 8080\n  type: NodePort\n</code></pre> Bash<pre><code># Deploy'ige rakendus\nkubectl apply -f webapp-with-probes.yaml\n\n# J\u00e4lgige pod'ide k\u00e4ivitumist\nkubectl get pods -l app=webapp -w\n\n# Vaadake probe'ide tulemusi\nkubectl describe pod -l app=webapp\n</code></pre>"},{"location":"kubernetes_overview/lab2/#22-health-checkide-testimine","title":"2.2 Health Check'ide Testimine","text":"Bash<pre><code># Testige rakendust\nminikube service webapp-service\n\n# Simuleerige app'i \"katkestamist\"\nkubectl exec -it deployment/webapp-with-health -- pkill http-echo\n\n# J\u00e4lgige, kuidas Kubernetes reageerib\nkubectl get pods -l app=webapp -w\n\n# Vaadake event'e\nkubectl get events --sort-by=.metadata.creationTimestamp\n</code></pre> <p>Kontrollpunkt: Liveness probe tuvastab \"katkise\" konteiner'i ja restardib selle.</p>"},{"location":"kubernetes_overview/lab2/#3-rolling-updateid-ja-deployment-strategies","title":"3. Rolling Update'id ja Deployment Strategies","text":""},{"location":"kubernetes_overview/lab2/#31-rolling-update-konfigureerimine","title":"3.1 Rolling Update Konfigureerimine","text":"<p>Rolling update v\u00f5imaldab rakendust uuendada null downtime'iga. Kubernetes asendab vanu pod'e uutega j\u00e4rk-j\u00e4rgult.</p> <p>Uuendage webapp deployment'i:</p> YAML<pre><code># Lisage spec sektsiooni strategy osa\nspec:\n  replicas: 4\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxUnavailable: 1      # Max 1 pod v\u00f5ib olla k\u00e4ttesaamatu\n      maxSurge: 1           # Max 1 lisa pod saab olla ajutiselt\n</code></pre> Bash<pre><code># Uuendage deployment'i\nkubectl patch deployment webapp-with-health -p '{\"spec\":{\"strategy\":{\"type\":\"RollingUpdate\",\"rollingUpdate\":{\"maxUnavailable\":1,\"maxSurge\":1}}}}'\n\n# Simuleerige update'i\nkubectl set image deployment/webapp-with-health webapp=hashicorp/http-echo:0.2.1\n\n# J\u00e4lgige update'i progressi detailselt\nkubectl rollout status deployment/webapp-with-health -w\n\n# Vaadake update'i ajalugu\nkubectl rollout history deployment/webapp-with-health\n\n# Testige rollback'i\nkubectl rollout undo deployment/webapp-with-health\n\n# Kontrollige rollback'i tulemust\nkubectl rollout status deployment/webapp-with-health\n</code></pre>"},{"location":"kubernetes_overview/lab2/#32-update-strategy-testimine","title":"3.2 Update Strategy Testimine","text":"Bash<pre><code># Looge load test script\nkubectl run load-tester --image=busybox --rm -it --restart=Never -- sh\n\n# Load tester'is:\nwhile true; do\n  wget -qO- webapp-service &amp;&amp; echo \" - $(date)\"\n  sleep 1\ndone\n\n# Teises terminalis tehke update\nkubectl set image deployment/webapp-with-health webapp=hashicorp/http-echo:0.2.3\n</code></pre> <p>Peaksite m\u00e4rkama, et teenus j\u00e4\u00e4b k\u00e4ttesaadavaks update'i ajal.</p> <p>Kontrollpunkt: Rolling update toimub ilma teenuse katkestusteta.</p>"},{"location":"kubernetes_overview/lab2/#4-persistent-storage","title":"4. Persistent Storage","text":""},{"location":"kubernetes_overview/lab2/#41-volumeide-vajadus","title":"4.1 Volume'ide Vajadus","text":"<p>Vaikimisi pod'ide andmed kaovad pod'i restarti korral. Persistent volume'id lahendasid selle probleemi.</p> <p>Looge fail <code>database-with-storage.yaml</code>:</p> YAML<pre><code># PersistentVolume - f\u00fc\u00fcsiline storage\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: postgres-pv\nspec:\n  capacity:\n    storage: 1Gi\n  accessModes:\n  - ReadWriteOnce\n  persistentVolumeReclaimPolicy: Retain\n  storageClassName: manual\n  hostPath:\n    path: /tmp/postgres-data\n---\n# PersistentVolumeClaim - taotlus storage'i jaoks\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: postgres-pvc\nspec:\n  accessModes:\n  - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\n  storageClassName: manual\n---\n# PostgreSQL pod'iga PVC\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres-db\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:13-alpine\n        env:\n        - name: POSTGRES_DB\n          value: myapp\n        - name: POSTGRES_USER\n          valueFrom:\n            secretKeyRef:\n              name: database-secret\n              key: username\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: database-secret\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        ports:\n        - containerPort: 5432\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        readinessProbe:\n          exec:\n            command:\n            - /bin/sh\n            - -c\n            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB\n          initialDelaySeconds: 15\n          periodSeconds: 5\n        livenessProbe:\n          exec:\n            command:\n            - /bin/sh\n            - -c\n            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB\n          initialDelaySeconds: 30\n          periodSeconds: 10\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: postgres-service\nspec:\n  selector:\n    app: postgres\n  ports:\n  - port: 5432\n    targetPort: 5432\n</code></pre> Bash<pre><code># Deploy'ige PostgreSQL koos persistent storage'iga\nkubectl apply -f database-with-storage.yaml\n\n# Kontrollige PV ja PVC staatust\nkubectl get pv\nkubectl get pvc\n\n# Kontrollige pod'i\nkubectl get pods -l app=postgres\n\n# Testige andmebaasi\nkubectl exec -it deployment/postgres-db -- psql -U postgres -d myapp -c \"CREATE TABLE test (id INT, name TEXT);\"\nkubectl exec -it deployment/postgres-db -- psql -U postgres -d myapp -c \"INSERT INTO test VALUES (1, 'persistent data');\"\n\n# Kustutage pod ja vaadake, kas andmed s\u00e4ilivad\nkubectl delete pod -l app=postgres\nkubectl get pods -l app=postgres\n\n# Kontrollige andmeid p\u00e4rast pod'i taask\u00e4ivitumist\nkubectl exec -it deployment/postgres-db -- psql -U postgres -d myapp -c \"SELECT * FROM test;\"\n</code></pre> <p>Kontrollpunkt: Andmed s\u00e4ilivad pod'i taask\u00e4ivitamise j\u00e4rel.</p>"},{"location":"kubernetes_overview/lab2/#5-multi-tier-rakenduse-deploy","title":"5. Multi-Tier Rakenduse Deploy","text":""},{"location":"kubernetes_overview/lab2/#51-full-stack-rakendus","title":"5.1 Full-Stack Rakendus","text":"<p>N\u00fc\u00fcd \u00fchendame k\u00f5ik osad: frontend, backend API ja andmebaas.</p> <p>Looge fail <code>backend-api.yaml</code>:</p> YAML<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: backend-api\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: backend-api\n  template:\n    metadata:\n      labels:\n        app: backend-api\n    spec:\n      containers:\n      - name: api\n        image: hashicorp/http-echo:0.2.3\n        args:\n        - -text\n        - |\n          {\n            \"service\": \"backend-api\",\n            \"version\": \"2.0\",\n            \"pod\": \"$(POD_NAME)\",\n            \"database\": \"connected\",\n            \"timestamp\": \"$(date -Iseconds)\"\n          }\n        - -listen=:3000\n        ports:\n        - containerPort: 3000\n        env:\n        - name: POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: database-secret\n              key: connection-string\n        readinessProbe:\n          httpGet:\n            path: /\n            port: 3000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n        livenessProbe:\n          httpGet:\n            path: /\n            port: 3000\n          initialDelaySeconds: 15\n          periodSeconds: 10\n        resources:\n          requests:\n            memory: \"32Mi\"\n            cpu: \"50m\"\n          limits:\n            memory: \"64Mi\"\n            cpu: \"100m\"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: backend-api-service\nspec:\n  selector:\n    app: backend-api\n  ports:\n  - port: 3000\n    targetPort: 3000\n</code></pre>"},{"location":"kubernetes_overview/lab2/#52-frontend-koos-custom-configuration","title":"5.2 Frontend koos Custom Configuration","text":"<p>Looge <code>frontend-config.yaml</code>:</p> YAML<pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: frontend-config\ndata:\n  nginx.conf: |\n    server {\n        listen 80;\n        server_name localhost;\n\n        location / {\n            root /usr/share/nginx/html;\n            index index.html;\n            try_files $uri $uri/ /index.html;\n        }\n\n        location /api/ {\n            proxy_pass http://backend-api-service:3000/;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n        }\n\n        location /health {\n            access_log off;\n            return 200 \"healthy\\n\";\n            add_header Content-Type text/plain;\n        }\n    }\n  index.html: |\n    &lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Kubernetes Multi-Tier App&lt;/title&gt;\n        &lt;style&gt;\n            body { font-family: Arial; margin: 40px; background: #f5f5f5; }\n            .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }\n            button { padding: 10px 20px; margin: 10px; background: #007cba; color: white; border: none; border-radius: 5px; }\n            .result { margin-top: 20px; padding: 15px; background: #f0f0f0; border-radius: 5px; }\n            .status { padding: 10px; margin: 10px 0; border-radius: 5px; }\n            .success { background: #d4edda; color: #155724; }\n            .error { background: #f8d7da; color: #721c24; }\n        &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;h1&gt;Kubernetes Multi-Tier Application&lt;/h1&gt;\n            &lt;p&gt;Frontend \u2192 Backend API \u2192 PostgreSQL Database&lt;/p&gt;\n\n            &lt;div class=\"status success\"&gt;\n                &lt;strong&gt;Frontend Status:&lt;/strong&gt; \u2705 Running\n            &lt;/div&gt;\n\n            &lt;button onclick=\"testBackend()\"&gt;Test Backend API&lt;/button&gt;\n            &lt;button onclick=\"testDatabase()\"&gt;Test Database Connection&lt;/button&gt;\n            &lt;button onclick=\"loadTest()\"&gt;Load Test (10 requests)&lt;/button&gt;\n\n            &lt;div id=\"result\" class=\"result\" style=\"display: none;\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;script&gt;\n            function showResult(content, isError = false) {\n                const result = document.getElementById('result');\n                result.style.display = 'block';\n                result.className = 'result ' + (isError ? 'error' : 'success');\n                result.innerHTML = content;\n            }\n\n            async function testBackend() {\n                try {\n                    const response = await fetch('/api/');\n                    const data = await response.text();\n                    const json = JSON.parse(data);\n                    showResult(`\n                        &lt;h3&gt;\u2705 Backend API Response&lt;/h3&gt;\n                        &lt;pre&gt;${JSON.stringify(json, null, 2)}&lt;/pre&gt;\n                    `);\n                } catch (error) {\n                    showResult(`&lt;h3&gt;\u274c Backend Error&lt;/h3&gt;&lt;p&gt;${error.message}&lt;/p&gt;`, true);\n                }\n            }\n\n            async function testDatabase() {\n                // Simuleerime database testi\n                showResult(`\n                    &lt;h3&gt;\ud83d\uddc4\ufe0f Database Status&lt;/h3&gt;\n                    &lt;p&gt;PostgreSQL: \u2705 Connected&lt;/p&gt;\n                    &lt;p&gt;Database: myapp&lt;/p&gt;\n                    &lt;p&gt;Tables: test (1 record)&lt;/p&gt;\n                `);\n            }\n\n            async function loadTest() {\n                showResult('&lt;h3&gt;\ud83d\udd04 Running Load Test...&lt;/h3&gt;&lt;p&gt;Sending 10 requests to backend...&lt;/p&gt;');\n\n                const results = [];\n                for (let i = 1; i &lt;= 10; i++) {\n                    try {\n                        const start = Date.now();\n                        const response = await fetch('/api/');\n                        const data = await response.text();\n                        const json = JSON.parse(data);\n                        const duration = Date.now() - start;\n                        results.push(`Request ${i}: \u2705 ${duration}ms (Pod: ${json.pod})`);\n                    } catch (error) {\n                        results.push(`Request ${i}: \u274c ${error.message}`);\n                    }\n                }\n\n                showResult(`\n                    &lt;h3&gt;\ud83d\udcca Load Test Results&lt;/h3&gt;\n                    &lt;pre&gt;${results.join('\\n')}&lt;/pre&gt;\n                `);\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: frontend-nginx\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: frontend\n  template:\n    metadata:\n      labels:\n        app: frontend\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.20-alpine\n        ports:\n        - containerPort: 80\n        volumeMounts:\n        - name: nginx-config\n          mountPath: /etc/nginx/conf.d/default.conf\n          subPath: nginx.conf\n        - name: html-content\n          mountPath: /usr/share/nginx/html/index.html\n          subPath: index.html\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 80\n          initialDelaySeconds: 5\n          periodSeconds: 5\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 80\n          initialDelaySeconds: 15\n          periodSeconds: 10\n      volumes:\n      - name: nginx-config\n        configMap:\n          name: frontend-config\n      - name: html-content\n        configMap:\n          name: frontend-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: frontend-service\nspec:\n  type: NodePort\n  selector:\n    app: frontend\n  ports:\n  - port: 80\n    targetPort: 80\n</code></pre>"},{"location":"kubernetes_overview/lab2/#53-rakenduse-deploy-ja-testimine","title":"5.3 Rakenduse Deploy ja Testimine","text":"Bash<pre><code># Deploy'ige backend\nkubectl apply -f backend-api.yaml\n\n# Deploy'ige frontend\nkubectl apply -f frontend-config.yaml\n\n# Kontrollige k\u00f5iki komponente\nkubectl get all\n\n# Kontrollige service'ite connectivity't\nkubectl get endpoints\n\n# Avage rakendus\nminikube service frontend-service\n</code></pre> <p>Peaksite n\u00e4gema t\u00e4isfunktsionaalset web rakendust, mis suhtleb backend API'ga.</p> <p>Kontrollpunkt: Teil on t\u00f6\u00f6tav multi-tier rakendus koos frontend'i, backend'i ja andmebaasiga.</p>"},{"location":"kubernetes_overview/lab2/#6-monitoring-ja-troubleshooting","title":"6. Monitoring ja Troubleshooting","text":""},{"location":"kubernetes_overview/lab2/#61-klastri-monitooring","title":"6.1 Klastri Monitooring","text":"Bash<pre><code># Vaadake resource kasutamist\nkubectl top nodes\nkubectl top pods --all-namespaces\n\n# Anal\u00fc\u00fcsige event'e\nkubectl get events --sort-by=.metadata.creationTimestamp\n\n# Vaadake detailset pod'i infot\nkubectl describe pod -l app=frontend\n\n# Kontrollige service'ite endpoint'e\nkubectl get endpoints --all-namespaces\n</code></pre>"},{"location":"kubernetes_overview/lab2/#62-network-troubleshooting","title":"6.2 Network Troubleshooting","text":"Bash<pre><code># Looge network debug pod\nkubectl run netshoot --image=nicolaka/netshoot --rm -it -- bash\n\n# Debug pod'is testige:\n# DNS resolution\nnslookup backend-api-service.default.svc.cluster.local\nnslookup postgres-service.default.svc.cluster.local\n\n# Connectivity test\ncurl backend-api-service:3000\nnc -zv postgres-service 5432\n\n# Trace network path\ntraceroute backend-api-service\n\nexit\n</code></pre>"},{"location":"kubernetes_overview/lab2/#7-cleanup-ja-kokkuvote","title":"7. Cleanup ja Kokkuv\u00f5te","text":"Bash<pre><code># Kustutage k\u00f5ik ressursid\nkubectl delete -f frontend-config.yaml\nkubectl delete -f backend-api.yaml\nkubectl delete -f database-with-storage.yaml\nkubectl delete -f webapp-with-probes.yaml\nkubectl delete secret database-secret\nkubectl delete pod secure-app-pod\n\n# Kontrollige puhastust\nkubectl get all\n\n# Peatage Minikube\nminikube stop\n</code></pre>"},{"location":"kubernetes_overview/lab2/#kokkuvote","title":"Kokkuv\u00f5te","text":"<p>Mida \u00f5ppisite:</p> <ol> <li>Security - Secret'ide kasutamine ja pod'ide turvalisus</li> <li>Health Monitoring - Liveness, readiness ja startup probe'id</li> <li>Rolling Updates - Null downtime deployment'id</li> <li>Persistent Storage - Andmete p\u00fcsiv salvestamine</li> <li>Multi-tier Architecture - Keerukamate rakenduste deploy</li> <li>Troubleshooting - Network debugging ja monitoring</li> </ol> <p>Production-ready oskused: - Turvaliselt konfigureeritud pod'id - Automaatne health monitoring - Zero-downtime update'id - Andmete persistence - Service mesh p\u00f5hialused</p> <p>J\u00e4rgmised sammud: - Helm package manager - Ingress controller'id - Horizontal Pod Autoscaler - Custom Resource Definitions (CRD) - Production klastri seadistamine cloud provider'is</p>"},{"location":"kubernetes_overview/lab2/#viited","title":"Viited","text":"<ul> <li>Kubernetes Security Best Practices - turvalisuse juhised</li> <li>Kubernetes Probes Documentation - health check'ide seadistamine</li> <li>Persistent Volumes Guide - storage'i haldamine</li> <li>Deployment Strategies - deployment'ide strateegiad</li> </ul>"},{"location":"kubernetes_overview/lecture/","title":"Kubernetes P\u00f5hialused: Container Orchestration","text":"<p>Eesm\u00e4rk: M\u00f5ista Kubernetes'i rolli moodsas tarkvaraarenduses ja \u00f5ppida selle p\u00f5hifunktsionaalsust</p>"},{"location":"kubernetes_overview/lecture/#sissejuhatus","title":"Sissejuhatus","text":"<p>Tere tulemast Kubernetes'i maailma! Enne kui me sukeldume tehniliste detailide s\u00fcgavusse, tahaksin teilt k\u00fcsida: kes on kunagi proovinud k\u00e4ivitada rohkem kui \u00fcht Docker konteinerit korraga? T\u00f5stke k\u00e4si!</p> <p>N\u00e4ete, just siin peitub probleem. \u00dcks kontainer on lihtne. Kaks konteinerit - veel okei. Aga mis juhtub, kui teil on vaja 50 konteinerit? V\u00f5i 500? V\u00f5i 5000? \u00c4kki kukub \u00fcks kontainer? Kuidas te seda m\u00e4rkate? Kuidas te selle asendage?</p> <p>T\u00e4na \u00f5pime t\u00f6\u00f6riista kohta, mis lahendab need probleemid. Aga esmalt - mis see Kubernetes \u00fcldse on?</p>"},{"location":"kubernetes_overview/lecture/#kubernetesi-paritolu-ja-tahendus","title":"Kubernetes'i P\u00e4ritolu ja T\u00e4hendus","text":"<p>Kubernetes tuleneb kreeka keelsest s\u00f5nast \"\u03ba\u03c5\u03b2\u03b5\u03c1\u03bd\u03ae\u03c4\u03b7\u03c2\" - kybern\u0113t\u0113s. Keegi oskab \u00f6elda, mida see t\u00e4hendab? T\u00e4pselt - \"roolimees\" v\u00f5i \"laevajuht\". Miks on see oluline? Sest Kubernetes on justnagu laevajuht teie konteinerite laevastikule.</p> <p>Google l\u00f5i selle 2014. aastal oma sisemise Borg s\u00fcsteemi p\u00f5hjal. Huvitav fakt: Google on kasutanud konteinerite orkestreerimist juba \u00fcle 15 aasta - nad k\u00e4ivitavad umbes 2 miljardit konteinerit n\u00e4dalas!</p>"},{"location":"kubernetes_overview/lecture/#1-probleemi-seadmine-miks-vajame-orkestreerimist","title":"1. Probleemi Seadmine - Miks Vajame Orkestreerimist?","text":"<p>Ette kujutage, et olete startup'i CTO. Teie rakendus kasvab kiiresti. Eile oli teil 100 kasutajat, t\u00e4na 10 000. Homme v\u00f5ib olla 100 000. </p> <p>Praegu teie arhitektuur n\u00e4eb v\u00e4lja selline:</p> Bash<pre><code># \u00dcks veebiserver\ndocker run -d nginx\n\n# \u00dcks andmebaas  \ndocker run -d postgres\n\n# \u00dcks API server\ndocker run -d myapi\n</code></pre> <p>K\u00f5ik t\u00f6\u00f6tab. Aga mis juhtub kell kolm \u00f6\u00f6sel, kui teie API server kukub? Keegi ei m\u00e4rka enne hommikut. Kasutajad on pahased. M\u00fc\u00fck langeb.</p> <p>V\u00f5i mis juhtub, kui \u00e4kki tuleb suur koormus? Teil on vaja kiiresti k\u00e4ivitada 10 API serverit. K\u00e4sitsi. \u00dckshaaval. Stressis.</p> <p>Siin tuleb appi Container Orchestration.</p> <pre><code>graph TD\n    A[Traditsiooniline L\u00e4henemine] --&gt; B[K\u00e4sitsi skalerimine]\n    A --&gt; C[K\u00e4sitsi monitoring]\n    A --&gt; D[K\u00e4sitsi failover]\n    A --&gt; E[K\u00e4sitsi v\u00f5rgustik]\n\n    F[Kubernetes L\u00e4henemine] --&gt; G[Automaatne skalerimine]\n    F --&gt; H[Automaatne taastamine]\n    F --&gt; I[Automaatne koormuse jaotus]\n    F --&gt; J[Deklaratiivne konfiguratsioon]\n\n    style A fill:#ffcccc\n    style F fill:#ccffcc</code></pre> <p>N\u00fc\u00fcd k\u00fcsimus: mis on Container Orchestration? Keegi oskab vastata?</p> <p>Container Orchestration on nagu dirigent orkestris. Dirigent ei m\u00e4ngi instrumente ise, aga ta koordineerib k\u00f5iki muusikuid, et nad m\u00e4ngiks koos harmooniliselt. Samamoodi koordineerib Kubernetes teie konteinereid.</p>"},{"location":"kubernetes_overview/lecture/#2-kubernetesi-arhitektuur-kuidas-see-tootab","title":"2. Kubernetes'i Arhitektuur - Kuidas See T\u00f6\u00f6tab?","text":"<p>Enne kui hakkame k\u00e4ske tippima, peame m\u00f5istma, kuidas Kubernetes ehitatud on. See aitab teil hiljem probleeme diagnoosida.</p>"},{"location":"kubernetes_overview/lecture/#control-plane-klastri-aju","title":"Control Plane - Klastri \"Aju\"","text":"<p>Kubernetes koosneb kahest osast. Esimene on Control Plane - klastri \"aju\". See teeb otsuseid, aga ei k\u00e4ivita teie rakendusi.</p> <pre><code>graph TB\n    subgraph \"Control Plane\"\n        API[API Server&lt;br/&gt;\"Sissep\u00e4\u00e4s\"]\n        ETCD[etcd&lt;br/&gt;\"M\u00e4lu\"]\n        SCHED[Scheduler&lt;br/&gt;\"Planeerija\"]\n        CM[Controller Manager&lt;br/&gt;\"J\u00e4lgija\"]\n    end\n\n    subgraph \"Mis iga komponent teeb?\"\n        API --&gt; A1[V\u00f5tab vastu k\u00f5ik k\u00e4sud]\n        ETCD --&gt; A2[Salvestab kogu oleku]\n        SCHED --&gt; A3[Otsustab kuhu pod'id panna]\n        CM --&gt; A4[J\u00e4lgib ja parandab]\n    end\n\n    style API fill:#e1f5fe\n    style ETCD fill:#fff3e0\n    style SCHED fill:#e8f5e8\n    style CM fill:#fce4ec</code></pre> <p>M\u00f5elge sellele nagu ettev\u00f5tte juhatusele: - API Server on nagu sekret\u00e4r - k\u00f5ik p\u00e4ringud l\u00e4hevad tema kaudu - etcd on nagu ettev\u00f5tte andmebaas - hoiab kogu olulist infot - Scheduler on nagu HR - otsustab, kes mida teeb - Controller Manager on nagu juhatuse esimees - j\u00e4lgib, et k\u00f5ik l\u00e4heks plaani j\u00e4rgi</p>"},{"location":"kubernetes_overview/lecture/#worker-nodeid-kus-tegelik-too-toimub","title":"Worker Node'id - Kus Tegelik T\u00f6\u00f6 Toimub","text":"<p>Teine osa on Worker Node'id. Siin jooksevad teie rakendused.</p> <pre><code>graph TB\n    subgraph \"Worker Node\"\n        KUBELET[kubelet&lt;br/&gt;\"Kohalik juht\"]\n        PROXY[kube-proxy&lt;br/&gt;\"V\u00f5rguliikluse juht\"]\n        RUNTIME[Container Runtime&lt;br/&gt;\"Konteinerite k\u00e4ivitaja\"]\n\n        subgraph \"Pods\"\n            POD1[Pod 1]\n            POD2[Pod 2]\n            POD3[Pod 3]\n        end\n    end\n\n    CP[Control Plane] -.-&gt; KUBELET\n    KUBELET --&gt; RUNTIME\n    RUNTIME --&gt; POD1\n    RUNTIME --&gt; POD2\n    RUNTIME --&gt; POD3\n\n    PROXY --&gt; POD1\n    PROXY --&gt; POD2\n    PROXY --&gt; POD3\n\n    style KUBELET fill:#e3f2fd\n    style PROXY fill:#f3e5f5\n    style RUNTIME fill:#e8f5e8</code></pre> <ul> <li>kubelet on nagu vahetuse juhataja tehases - t\u00e4idab control plane'i korraldusi</li> <li>kube-proxy on nagu postk\u00e4itja - toimetab s\u00f5numeid \u00f5igesse kohta</li> <li>Container Runtime on nagu t\u00f6\u00f6line - teeb tegeliku t\u00f6\u00f6</li> </ul>"},{"location":"kubernetes_overview/lecture/#3-kubernetesi-pohiobjektid-ehituskivid","title":"3. Kubernetes'i P\u00f5hiobjektid - Ehituskivid","text":"<p>N\u00fc\u00fcd tuleme huvitava osa juurde. Kubernetes t\u00f6\u00f6tab objektidega. Need on nagu LEGO klotsid - iga\u00fchel on oma eesm\u00e4rk.</p>"},{"location":"kubernetes_overview/lecture/#pod-koige-vaiksem-uksus","title":"Pod - K\u00f5ige V\u00e4iksem \u00dcksus","text":"<p>Esimene ja k\u00f5ige olulisem on Pod. Nimi tuleneb inglise keelsest s\u00f5nast \"pod\" - nagu vaalade kari v\u00f5i hernekaunad kaunas.</p> <pre><code>graph LR\n    subgraph \"Pod\"\n        direction TB\n        C1[Container 1&lt;br/&gt;nginx]\n        C2[Container 2&lt;br/&gt;logging]\n        VOL[Jagatud failis\u00fcsteem]\n        NET[Jagatud v\u00f5rk&lt;br/&gt;IP: 10.244.1.5]\n    end\n\n    C1 -.-&gt; VOL\n    C2 -.-&gt; VOL\n    C1 -.-&gt; NET\n    C2 -.-&gt; NET\n\n    style NET fill:#e1f5fe\n    style VOL fill:#fff3e0</code></pre> <p>Miks pole nimi \"Container\"? Sest pod v\u00f5ib sisaldada mitut konteinerit! M\u00f5elge sellele nagu korterile - tavaliselt elab seal \u00fcks perekond, aga v\u00f5ib olla ka kaks.</p> <p>Oluline: pod'i k\u00f5ik konteinerid: - Jagavad sama IP aadressi - Saavad suhelda localhost kaudu - Elavad ja surevad koos</p> <p>N\u00e4itame lihtsat pod'i:</p> YAML<pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-pod\nspec:\n  containers:\n  - name: nginx\n    image: nginx:1.20\n    ports:\n    - containerPort: 80\n</code></pre> <p>Aga oodate! \u00c4rge kirjutage \u00fcksikuid pod'e k\u00e4sitsi. Miks? Sest kui pod sureb, see ei tule tagasi. Teil on vaja midagi, mis hoolitseb pod'ide eest.</p>"},{"location":"kubernetes_overview/lecture/#deployment-rakenduse-haldur","title":"Deployment - Rakenduse Haldur","text":"<p>Siin tuleb m\u00e4ngu Deployment. See on nagu hea manager - ta hoiab silma peal oma t\u00f6\u00f6tajatel (pod'idel).</p> <pre><code>graph TD\n    DEPLOY[Deployment&lt;br/&gt;\"Ma tahan 3 nginx pod'i\"] --&gt; RS[ReplicaSet&lt;br/&gt;\"Ma hoian 3 pod'i t\u00f6\u00f6s\"]\n    RS --&gt; POD1[Pod 1]\n    RS --&gt; POD2[Pod 2] \n    RS --&gt; POD3[Pod 3]\n\n    POD2 --&gt;|kukub| DEAD[\ud83d\udc80]\n    RS --&gt;|m\u00e4rkab puuduj\u00e4\u00e4ki| NEW[Uus Pod 4]\n\n    style DEPLOY fill:#e8f5e8\n    style RS fill:#fff3e0\n    style DEAD fill:#ffebee\n    style NEW fill:#e8f5e8</code></pre> <p>Deployment on nutikas: - Kui pod kukub, loob kohe uue - Kui tahate skaleerida, muudab pod'ide arvu - Kui tahate uuendada, teeb seda j\u00e4rk-j\u00e4rgult</p> YAML<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\nspec:\n  replicas: 3  # Tahan 3 koopiat\n  selector:\n    matchLabels:\n      app: nginx\n  template:  # Kuidas pod v\u00e4lja n\u00e4eb\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.20\n</code></pre> <p>N\u00e4eme ka rolling update'i toimumist:</p> <pre><code>sequenceDiagram\n    participant Dev as Arendaja\n    participant Deploy as Deployment\n    participant Old as Vanad Pod'id\n    participant New as Uued Pod'id\n\n    Dev-&gt;&gt;Deploy: \"Uuenda nginx:1.21-le\"\n    Deploy-&gt;&gt;New: Loo 1 uus pod\n    New-&gt;&gt;Deploy: \"Olen valmis!\"\n    Deploy-&gt;&gt;Old: Kustuta 1 vana pod\n    Note over Deploy: Korda kuni k\u00f5ik uuendatud</code></pre>"},{"location":"kubernetes_overview/lecture/#service-stabiilne-sissepaas","title":"Service - Stabiilne Sissep\u00e4\u00e4s","text":"<p>Aga n\u00fc\u00fcd on probleem: pod'ide IP aadressid muutuvad! Kuidas teie frontend leiab backend'i?</p> <p>Vastus on Service. M\u00f5elge sellele nagu ettev\u00f5tte peareceptsioonile - kuigi t\u00f6\u00f6tajad tulevad ja l\u00e4hevad, receptsioon on alati samas kohas.</p> <pre><code>graph TB\n    subgraph \"Service t\u00fc\u00fcbid\"\n        subgraph \"ClusterIP - Sisemine\"\n            SVC1[Service: my-backend&lt;br/&gt;IP: 10.96.1.100]\n            SVC1 --&gt; POD1[Backend Pod 1]\n            SVC1 --&gt; POD2[Backend Pod 2]\n            SVC1 --&gt; POD3[Backend Pod 3]\n        end\n\n        subgraph \"NodePort - V\u00e4ljapoole\"\n            SVC2[Service: my-frontend&lt;br/&gt;Port: 30080]\n            OUTSIDE[V\u00e4ljastpoolt&lt;br/&gt;http://server:30080] --&gt; SVC2\n            SVC2 --&gt; POD4[Frontend Pod 1]\n            SVC2 --&gt; POD5[Frontend Pod 2]\n        end\n    end\n\n    POD4 -.-&gt;|\"Otsi my-backend\"| SVC1\n    POD5 -.-&gt;|\"Otsi my-backend\"| SVC1\n\n    style SVC1 fill:#e3f2fd\n    style SVC2 fill:#fff3e0</code></pre> <p>Service teeb kaht asja: 1. Annab stabiilse IP aadressi 2. Jaotab liiklust pod'ide vahel (load balancing)</p>"},{"location":"kubernetes_overview/lecture/#4-praktiline-naide-ehitame-rakenduse","title":"4. Praktiline N\u00e4ide - Ehitame Rakenduse","text":"<p>N\u00fc\u00fcd ehitame koos lihtsa rakenduse. Meil on: - Frontend (React) - Backend (Node.js API) - Andmebaas (PostgreSQL)</p> <pre><code>graph TB\n    subgraph \"Meie rakendus\"\n        INTERNET[Internet] --&gt; FE_SVC[Frontend Service&lt;br/&gt;LoadBalancer]\n        FE_SVC --&gt; FE1[Frontend Pod]\n        FE_SVC --&gt; FE2[Frontend Pod]\n\n        FE1 --&gt; BE_SVC[Backend Service&lt;br/&gt;ClusterIP]\n        FE2 --&gt; BE_SVC\n\n        BE_SVC --&gt; BE1[Backend Pod]\n        BE_SVC --&gt; BE2[Backend Pod]\n\n        BE1 --&gt; DB_SVC[Database Service&lt;br/&gt;ClusterIP]\n        BE2 --&gt; DB_SVC\n\n        DB_SVC --&gt; DB[PostgreSQL Pod]\n    end\n\n    style FE_SVC fill:#e3f2fd\n    style BE_SVC fill:#fff3e0\n    style DB_SVC fill:#e8f5e8</code></pre> <p>Alustame backend'ist:</p> YAML<pre><code># Backend Deployment\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: backend\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: backend\n  template:\n    metadata:\n      labels:\n        app: backend\n    spec:\n      containers:\n      - name: backend\n        image: myapp/backend:v1.0\n        ports:\n        - containerPort: 3000\n        env:\n        - name: DATABASE_URL\n          value: \"postgresql://postgres:5432/mydb\"\n</code></pre> <p>Kuidas backend leiab andmebaasi? DNS-i kaudu! Kubernetes loob automaatselt DNS kirje <code>postgres-service</code> nimega.</p>"},{"location":"kubernetes_overview/lecture/#5-konfiguratsioon-ja-saladused","title":"5. Konfiguratsioon ja Saladused","text":"<p>Aga oodake - me ei saa panna andmebaasi parooli otse YAML faili! See l\u00e4heb versioonihalduse! Siin tulevad appi ConfigMap ja Secret.</p> <pre><code>graph TB\n    subgraph \"Konfiguratsiooni haldamine\"\n        CM[ConfigMap&lt;br/&gt;\"Avalik konfiguratsioon\"]\n        SECRET[Secret&lt;br/&gt;\"Saladused\"]\n\n        subgraph \"Pod\"\n            CONTAINER[Rakendus]\n            ENV[Keskkonnamuutujad]\n            FILES[Failid]\n        end\n\n        CM --&gt;|Seadistused| ENV\n        CM --&gt;|Config failid| FILES\n        SECRET --&gt;|Paroolid| ENV\n        SECRET --&gt;|Sertifikaadid| FILES\n    end\n\n    style CM fill:#e8f5e8\n    style SECRET fill:#ffebee</code></pre> <p>ConfigMap avalikele seadistustele:</p> YAML<pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: app-config\ndata:\n  database.host: \"postgres-service\"\n  database.port: \"5432\"\n  api.timeout: \"30\"\n</code></pre> <p>Secret saladuste jaoks:</p> YAML<pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: app-secret\ntype: Opaque\ndata:\n  username: cG9zdGdyZXM=  # \"postgres\" base64 kodeeringus\n  password: bXlwYXNzd29yZA==  # \"mypassword\" base64 kodeeringus\n</code></pre>"},{"location":"kubernetes_overview/lecture/#6-monitoring-ja-probleemide-lahendamine","title":"6. Monitoring ja Probleemide Lahendamine","text":"<p>Mis juhtub, kui midagi l\u00e4heb valesti? Kubernetes annab meile t\u00f6\u00f6riistad j\u00e4lgimiseks.</p> <pre><code>graph TD\n    PROBLEM[Rakendus ei t\u00f6\u00f6ta] --&gt; CHECK1{Pod'id t\u00f6\u00f6tavad?}\n    CHECK1 --&gt;|Ei| DESCRIBE[kubectl describe pod]\n    CHECK1 --&gt;|Jah| CHECK2{Service ligip\u00e4\u00e4setav?}\n\n    DESCRIBE --&gt; EVENTS[Vaata s\u00fcndmusi]\n    EVENTS --&gt; LOGS[kubectl logs]\n\n    CHECK2 --&gt;|Ei| SERVICE_DEBUG[Kontrolli Service'e]\n    CHECK2 --&gt;|Jah| APP_DEBUG[Rakenduse debug]\n\n    SERVICE_DEBUG --&gt; ENDPOINTS[kubectl get endpoints]\n    APP_DEBUG --&gt; APP_LOGS[Rakenduse logid]\n\n    style PROBLEM fill:#ffebee\n    style LOGS fill:#e8f5e8\n    style APP_LOGS fill:#e8f5e8</code></pre> <p>P\u00f5hilised debug k\u00e4sud:</p> Bash<pre><code># Vaata pod'ide olekut\nkubectl get pods\n\n# Detailne info probleemse pod'i kohta\nkubectl describe pod &lt;pod-name&gt;\n\n# Vaata logisid\nkubectl logs &lt;pod-name&gt; -f\n\n# Mine pod'i sisse\nkubectl exec -it &lt;pod-name&gt; -- /bin/bash\n\n# Vaata service'eid\nkubectl get services\nkubectl get endpoints\n</code></pre>"},{"location":"kubernetes_overview/lecture/#7-millal-kasutada-kubernetesi","title":"7. Millal Kasutada Kubernetes'i?","text":"<p>N\u00fc\u00fcd k\u00fcsimus: millal peaksite Kubernetes'i kasutama?</p> <pre><code>graph LR\n    subgraph \"Docker piisab\"\n        SIMPLE[Lihtsad rakendused]\n        DEV[Arenduskeskkond]\n        SMALL[V\u00e4ike meeskond]\n    end\n\n    subgraph \"Kubernetes vaja\"\n        COMPLEX[Keerukad s\u00fcsteemid]\n        PROD[Tootmiskeskkond]\n        SCALE[Suur skaala]\n        HA[High Availability]\n    end\n\n    style SIMPLE fill:#fff3e0\n    style KUBERNETES fill:#e8f5e8</code></pre> <p>Kubernetes sobib kui: - Teil on rohkem kui 10-20 konteinerit - Vajate automaatset skaleerimist - Downtime on kulukas - Meeskond oskab Kubernetes'i</p> <p>Docker Compose piisab kui: - Lihtne rakendus - Arenduskeskkond - V\u00e4ike meeskond - Ressursside kokkuhoid on oluline</p>"},{"location":"kubernetes_overview/lecture/#kokkuvote-ja-jargmised-sammud","title":"Kokkuv\u00f5te ja J\u00e4rgmised Sammud","text":"<p>Mis me t\u00e4na \u00f5ppisime?</p> <ol> <li>Kubernetes lahendab konteinerite orkestreerimise probleeme</li> <li>Control Plane teeb otsuseid, Worker Node'id teevad t\u00f6\u00f6d</li> <li>Pod'id, Deployment'id ja Service'id on p\u00f5hiehituskivid</li> <li>ConfigMap ja Secret hoiavad konfiguratsiooni turvaliselt</li> <li>Monitoring ja debugging on kriitilised oskused</li> </ol> <p>Teie kodut\u00f6\u00f6ks: installige Minikube ja proovige t\u00e4na n\u00e4idatud n\u00e4iteid. J\u00e4rgmises tunnis teeme praktilist lab'i - deploy'ime p\u00e4ris rakenduse!</p> <p>K\u00fcsimused?</p>"},{"location":"kubernetes_overview/lecture/#viited-ja-dokumentatsioon","title":"Viited ja Dokumentatsioon","text":""},{"location":"kubernetes_overview/lecture/#ametlik-dokumentatsioon","title":"Ametlik Dokumentatsioon","text":"<ul> <li>Kubernetes Official Documentation - p\u00f5hiline dokumentatsioon</li> <li>kubectl Reference - k\u00e4skude \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a</li> <li>Kubernetes API Reference - API dokumentatsioon</li> </ul>"},{"location":"kubernetes_overview/lecture/#oppematerjalid","title":"\u00d5ppematerjalid","text":"<ul> <li>Kubernetes Basics Tutorial - interaktiivne \u00f5petus</li> <li>CNCF Kubernetes Fundamentals - ametlik koolitus</li> </ul>"},{"location":"kubernetes_overview/lecture/#praktilised-tooriistad","title":"Praktilised T\u00f6\u00f6riistad","text":"<ul> <li>Minikube - kohalik Kubernetes</li> <li>kubectl Cheat Sheet - kasulikud k\u00e4sud</li> </ul>"},{"location":"terraform_basics/homework1/","title":"Terraform P\u00f5hit\u00f5ed Kodut\u00f6\u00f6","text":"<p>Eesm\u00e4rk: \u00d5ppida Terraform'i p\u00f5hialused praktilist t\u00f6\u00f6d tehes</p>"},{"location":"terraform_basics/homework1/#opieesmargid","title":"\u00d5pieesm\u00e4rgid","text":"<p>Selle kodut\u00f6\u00f6 l\u00f5puks oskate: - Seadistada lihtsat Terraform projekti - Kasutada muutujaid ja v\u00e4ljundeid - Rakendada <code>count</code> funktsionaalsust - M\u00f5ista Infrastructure as Code p\u00f5him\u00f5tteid</p>"},{"location":"terraform_basics/homework1/#ulesanne-1-esimene-projekt-3-punkti","title":"\u00dclesanne 1: Esimene Projekt (3 punkti)","text":""},{"location":"terraform_basics/homework1/#11-projekti-loomine","title":"1.1 Projekti Loomine","text":"<p>Looge uus kaust ja failid:</p> Bash<pre><code>mkdir minu-terraform-projekt\ncd minu-terraform-projekt\ntouch main.tf variables.tf outputs.tf terraform.tfvars\n</code></pre>"},{"location":"terraform_basics/homework1/#12-pohikonfiguratsioon","title":"1.2 P\u00f5hikonfiguratsioon","text":"<p>Kirjutage <code>main.tf</code> faili:</p> Terraform<pre><code>terraform {\n  required_providers {\n    local = {\n      source  = \"hashicorp/local\"\n      version = \"~&gt; 2.0\"\n    }\n  }\n}\n\nresource \"local_file\" \"tervitus\" {\n  content  = \"Tere! See on minu esimene Terraform fail.\"\n  filename = \"tervitus.txt\"\n}\n</code></pre> <p>\u00dclesanded: 1. Jooksutage <code>terraform init</code> 2. Jooksutage <code>terraform plan</code> ja selgitage v\u00e4ljundit 3. Jooksutage <code>terraform apply</code> 4. Kontrollige, et fail loodi</p>"},{"location":"terraform_basics/homework1/#ulesanne-2-muutujad-3-punkti","title":"\u00dclesanne 2: Muutujad (3 punkti)","text":""},{"location":"terraform_basics/homework1/#21-muutujate-defineerimine","title":"2.1 Muutujate Defineerimine","text":"<p>Kirjutage <code>variables.tf</code> faili:</p> Terraform<pre><code>variable \"nimi\" {\n  description = \"Teie nimi\"\n  type        = string\n}\n\nvariable \"arv\" {\n  description = \"Failide arv\"\n  type        = number\n  default     = 2\n\n  validation {\n    condition     = var.arv &gt;= 1 &amp;&amp; var.arv &lt;= 5\n    error_message = \"Arv peab olema 1-5 vahel.\"\n  }\n}\n</code></pre>"},{"location":"terraform_basics/homework1/#22-vaartuste-maaramine","title":"2.2 V\u00e4\u00e4rtuste M\u00e4\u00e4ramine","text":"<p>Kirjutage <code>terraform.tfvars</code> faili:</p> Terraform<pre><code>nimi = \"Teie-Nimi\"\narv  = 3\n</code></pre>"},{"location":"terraform_basics/homework1/#23-muutujate-kasutamine","title":"2.3 Muutujate Kasutamine","text":"<p>Muutke <code>main.tf</code> faili:</p> Terraform<pre><code>terraform {\n  required_providers {\n    local = {\n      source  = \"hashicorp/local\"\n      version = \"~&gt; 2.0\"\n    }\n  }\n}\n\nresource \"local_file\" \"info\" {\n  content = &lt;&lt;-EOF\n    Nimi: ${var.nimi}\n    Failide arv: ${var.arv}\n    Loodud: ${timestamp()}\n  EOF\n  filename = \"${var.nimi}_info.txt\"\n}\n</code></pre> <p>\u00dclesanded: 1. Rakendage muudatused 2. Muutke <code>arv</code> v\u00e4\u00e4rtust <code>terraform.tfvars</code> failis 3. Jooksutage uuesti ja vaadake muudatusi</p>"},{"location":"terraform_basics/homework1/#ulesanne-3-count-ja-loops-4-punkti","title":"\u00dclesanne 3: Count ja Loops (4 punkti)","text":""},{"location":"terraform_basics/homework1/#31-mitme-faili-loomine","title":"3.1 Mitme Faili Loomine","text":"<p>Lisage <code>main.tf</code> faili:</p> Terraform<pre><code>resource \"local_file\" \"failid\" {\n  count = var.arv\n\n  content = &lt;&lt;-EOF\n    Fail number: ${count.index + 1}\n    Nimi: ${var.nimi}\n    Index: ${count.index}\n\n    See on fail ${count.index + 1} kokku ${var.arv}-st.\n  EOF\n\n  filename = \"${var.nimi}_fail_${count.index + 1}.txt\"\n}\n</code></pre>"},{"location":"terraform_basics/homework1/#32-kokkuvote","title":"3.2 Kokkuv\u00f5te","text":"<p>Lisage veel \u00fcks ressurss:</p> Terraform<pre><code>resource \"local_file\" \"kokkuvote\" {\n  content = jsonencode({\n    kasutaja = var.nimi\n    loodud_failide_arv = var.arv\n    failide_nimed = [for i in range(var.arv) : \"${var.nimi}_fail_${i + 1}.txt\"]\n    loomise_aeg = timestamp()\n  })\n\n  filename = \"${var.nimi}_kokkuvote.json\"\n}\n</code></pre> <p>\u00dclesanded: 1. Selgitage, mis on <code>count.index</code> 2. Proovige muuta <code>arv</code> v\u00e4\u00e4rtust 1-le, siis 4-le 3. Vaadake, kuidas failid muutuvad</p>"},{"location":"terraform_basics/homework1/#ulesanne-4-outputs-2-punkti","title":"\u00dclesanne 4: Outputs (2 punkti)","text":""},{"location":"terraform_basics/homework1/#41-valjundite-defineerimine","title":"4.1 V\u00e4ljundite Defineerimine","text":"<p>Kirjutage <code>outputs.tf</code> faili:</p> Terraform<pre><code>output \"projekt_info\" {\n  description = \"Projekti p\u00f5hiinfo\"\n  value = {\n    nimi = var.nimi\n    failide_arv = var.arv\n    loodud_failid = local_file.failid[*].filename\n  }\n}\n\noutput \"tervitus_sisu\" {\n  description = \"Tervituse faili sisu\"\n  value = local_file.info.content\n}\n</code></pre> <p>\u00dclesanded: 1. Jooksutage <code>terraform output</code> 2. Selgitage, mida n\u00e4itavad v\u00e4ljundid 3. Proovige <code>terraform output projekt_info</code></p>"},{"location":"terraform_basics/homework1/#ulesanne-5-muudatuste-testimine-3-punkti","title":"\u00dclesanne 5: Muudatuste Testimine (3 punkti)","text":""},{"location":"terraform_basics/homework1/#51-eksperimenteerimine","title":"5.1 Eksperimenteerimine","text":"<p>\u00dclesanded: 1. Muutke <code>nimi</code> v\u00e4\u00e4rtust uueks nimeks 2. Muutke <code>arv</code> v\u00e4\u00e4rtust 5-ks 3. Jooksutage <code>terraform plan</code> ja vaadake, millised muudatused toimuvad 4. Rakendage muudatused <code>terraform apply</code>-ga</p>"},{"location":"terraform_basics/homework1/#52-cleanup","title":"5.2 Cleanup","text":"<p>\u00dclesanded: 1. Jooksutage <code>terraform destroy</code> 2. Selgitage, mis juhtub 3. Kontrollige, et failid kustutati</p>"},{"location":"terraform_basics/homework1/#esitamise-nouded","title":"Esitamise N\u00f5uded","text":""},{"location":"terraform_basics/homework1/#kohustuslikud-failid","title":"Kohustuslikud Failid","text":"<ol> <li><code>main.tf</code> - p\u00f5hikonfiguratsioon</li> <li><code>variables.tf</code> - muutujate definitsioonid</li> <li><code>outputs.tf</code> - v\u00e4ljundite definitsioonid</li> <li><code>terraform.tfvars</code> - muutujate v\u00e4\u00e4rtused</li> </ol>"},{"location":"terraform_basics/homework1/#dokumentatsioon","title":"Dokumentatsioon","text":"<p>Kirjutage l\u00fchike selgitus (0.5 lk): 1. Mida \u00f5ppisite Terraform'i kohta? 2. Millised olid keerulisemad osad? 3. Kuidas saaksite seda praktikas kasutada?</p>"},{"location":"terraform_basics/homework1/#hindamise-kriteeriumid-15-punkti","title":"Hindamise Kriteeriumid (15 punkti)","text":"<ul> <li>Tehniline korrektsus (8p): Kas konfiguratsioon t\u00f6\u00f6tab?</li> <li>Muutujate kasutamine (3p): Kas muutujad on \u00f5igesti defineeritud?</li> <li>Count funktsionaalsus (2p): Kas count t\u00f6\u00f6tab korrektselt?</li> <li>Dokumentatsioon (2p): Kas selgitused on arusaadavad?</li> </ul>"},{"location":"terraform_basics/homework1/#abi-ja-nouanded","title":"Abi ja N\u00f5uanded","text":"<ul> <li>Alustage lihtsalt, lisage keerukust j\u00e4rk-j\u00e4rgult</li> <li>Testige p\u00e4rast iga muudatust</li> <li>Kasutage <code>terraform plan</code> enne <code>apply</code>-d</li> <li>Kui midagi ei t\u00f6\u00f6ta, vaadake error messag'id hoolikalt</li> </ul>"},{"location":"terraform_basics/homework2/","title":"Terraform Kodut\u00f6\u00f6: Moodulid ja Korduvkasutus","text":"<p>Eesm\u00e4rk: \u00d5ppida Terraform mooduleid ja for_each kasutamist</p>"},{"location":"terraform_basics/homework2/#projekti-kirjeldus","title":"Projekti Kirjeldus","text":"<p>Looge Terraform moodul, mis automatiseerib projektikaustas loomist erinevate meeskondade jaoks. Iga meeskond vajab standardset projektistruktuuri, kuid erinevate seadistustega.</p> <p>Mida ehitate: - Korduvkasutatav projekti moodul - Mitme meeskonna projektide automaatne loomine - Konfiguratsioonifailide genereerimine</p>"},{"location":"terraform_basics/homework2/#ulesanne-1-projekti-struktuur-2-punkti","title":"\u00dclesanne 1: Projekti struktuur (2 punkti)","text":""},{"location":"terraform_basics/homework2/#11-kaustade-loomine","title":"1.1 Kaustade loomine","text":"<p>Looge j\u00e4rgmine struktuuri:</p> Bash<pre><code>terraform-modules-homework/\n\u251c\u2500\u2500 main.tf\n\u251c\u2500\u2500 variables.tf\n\u251c\u2500\u2500 outputs.tf\n\u251c\u2500\u2500 terraform.tfvars\n\u2514\u2500\u2500 modules/\n    \u2514\u2500\u2500 project-setup/\n        \u251c\u2500\u2500 main.tf\n        \u251c\u2500\u2500 variables.tf\n        \u2514\u2500\u2500 outputs.tf\n</code></pre>"},{"location":"terraform_basics/homework2/#12-mooduli-muutujad","title":"1.2 Mooduli muutujad","text":"<p>Kirjutage <code>modules/project-setup/variables.tf</code>:</p> Terraform<pre><code>variable \"project_name\" {\n  description = \"Projekti nimi\"\n  type        = string\n\n  validation {\n    condition     = length(var.project_name) &gt; 2\n    error_message = \"Projekti nimi peab olema v\u00e4hemalt 3 t\u00e4hem\u00e4rki.\"\n  }\n}\n\nvariable \"team_name\" {\n  description = \"Meeskonna nimi\"\n  type        = string\n}\n\nvariable \"environment\" {\n  description = \"Keskkond (dev, test, prod)\"\n  type        = string\n  default     = \"dev\"\n\n  validation {\n    condition     = contains([\"dev\", \"test\", \"prod\"], var.environment)\n    error_message = \"Lubatud keskkonnad: dev, test, prod.\"\n  }\n}\n\nvariable \"include_docker\" {\n  description = \"Kas lisada Docker konfiguratsioon\"\n  type        = bool\n  default     = false\n}\n</code></pre>"},{"location":"terraform_basics/homework2/#ulesanne-2-mooduli-loomine-4-punkti","title":"\u00dclesanne 2: Mooduli loomine (4 punkti)","text":""},{"location":"terraform_basics/homework2/#21-pohiline-moodul","title":"2.1 P\u00f5hiline moodul","text":"<p>Kirjutage <code>modules/project-setup/main.tf</code>:</p> Terraform<pre><code># Lokaalid kalkulatsioonid\nlocals {\n  project_full_name = \"${var.team_name}-${var.project_name}\"\n\n  # Erinevad seadistused keskkonna kohta\n  env_settings = {\n    dev = {\n      port = 3000\n      debug = true\n    }\n    test = {\n      port = 3001\n      debug = true\n    }\n    prod = {\n      port = 80\n      debug = false\n    }\n  }\n}\n\n# Projekti p\u00f5hikaust\nresource \"local_file\" \"project_dir\" {\n  content  = \"\"\n  filename = \"${local.project_full_name}/.gitkeep\"\n}\n\n# Alamkaustad\nresource \"local_file\" \"subdirs\" {\n  for_each = toset([\"src\", \"config\", \"docs\", \"scripts\"])\n\n  content  = \"\"\n  filename = \"${local.project_full_name}/${each.key}/.gitkeep\"\n}\n\n# Projekti konfiguratsioon\nresource \"local_file\" \"config\" {\n  content = jsonencode({\n    project = var.project_name\n    team = var.team_name\n    environment = var.environment\n    settings = local.env_settings[var.environment]\n    created_at = timestamp()\n  })\n\n  filename = \"${local.project_full_name}/config/project.json\"\n}\n\n# README fail\nresource \"local_file\" \"readme\" {\n  content = &lt;&lt;-EOF\n    # ${local.project_full_name}\n\n    **Meeskond:** ${var.team_name}\n    **Projekt:** ${var.project_name}\n    **Keskkond:** ${var.environment}\n\n    ## Struktuuri\n    - src/ - l\u00e4htekood\n    - config/ - konfiguratsioonid\n    - docs/ - dokumentatsioon\n    - scripts/ - skriptid\n\n    ## Seadistused\n    - Port: ${local.env_settings[var.environment].port}\n    - Debug: ${local.env_settings[var.environment].debug}\n  EOF\n\n  filename = \"${local.project_full_name}/README.md\"\n}\n\n# Docker konfiguratsioon (tingimislik)\nresource \"local_file\" \"dockerfile\" {\n  count = var.include_docker ? 1 : 0\n\n  content = &lt;&lt;-EOF\n    FROM node:16-alpine\n    WORKDIR /app\n    COPY . .\n    EXPOSE ${local.env_settings[var.environment].port}\n    CMD [\"npm\", \"start\"]\n  EOF\n\n  filename = \"${local.project_full_name}/Dockerfile\"\n}\n\n# K\u00e4ivitamise skript\nresource \"local_file\" \"start_script\" {\n  content = &lt;&lt;-EOF\n    #!/bin/bash\n    echo \"K\u00e4ivitan ${local.project_full_name} projekti\"\n    echo \"Keskkond: ${var.environment}\"\n    echo \"Port: ${local.env_settings[var.environment].port}\"\n\n    if [ -f \"package.json\" ]; then\n        npm start\n    else\n        echo \"package.json puudub\"\n    fi\n  EOF\n\n  filename = \"${local.project_full_name}/scripts/start.sh\"\n  file_permission = \"0755\"\n}\n</code></pre>"},{"location":"terraform_basics/homework2/#22-mooduli-valjundid","title":"2.2 Mooduli v\u00e4ljundid","text":"<p>Kirjutage <code>modules/project-setup/outputs.tf</code>:</p> Terraform<pre><code>output \"project_path\" {\n  description = \"Projekti kausta tee\"\n  value       = local.project_full_name\n}\n\noutput \"project_info\" {\n  description = \"Projekti andmed\"\n  value = {\n    name = var.project_name\n    team = var.team_name\n    environment = var.environment\n    full_name = local.project_full_name\n    has_docker = var.include_docker\n  }\n}\n\noutput \"created_files\" {\n  description = \"Loodud failid\"\n  value = concat([\n    \"${local.project_full_name}/config/project.json\",\n    \"${local.project_full_name}/README.md\",\n    \"${local.project_full_name}/scripts/start.sh\"\n  ], var.include_docker ? [\"${local.project_full_name}/Dockerfile\"] : [])\n}\n</code></pre>"},{"location":"terraform_basics/homework2/#ulesanne-3-mooduli-kasutamine-3-punkti","title":"\u00dclesanne 3: Mooduli kasutamine (3 punkti)","text":""},{"location":"terraform_basics/homework2/#31-peamised-muutujad","title":"3.1 Peamised muutujad","text":"<p>Kirjutage <code>variables.tf</code>:</p> Terraform<pre><code>variable \"teams\" {\n  description = \"Meeskondade ja projektide konfiguratsioon\"\n  type = map(object({\n    projects = list(object({\n      name = string\n      environment = string\n      include_docker = bool\n    }))\n  }))\n}\n</code></pre>"},{"location":"terraform_basics/homework2/#32-peamine-konfiguratsioon","title":"3.2 Peamine konfiguratsioon","text":"<p>Kirjutage <code>main.tf</code>:</p> Terraform<pre><code>terraform {\n  required_providers {\n    local = {\n      source  = \"hashicorp/local\"\n      version = \"~&gt; 2.0\"\n    }\n  }\n}\n\n# K\u00f5ikide projektide nimekiri\nlocals {\n  all_projects = flatten([\n    for team_name, team in var.teams : [\n      for project in team.projects : {\n        key = \"${team_name}-${project.name}\"\n        team_name = team_name\n        project_name = project.name\n        environment = project.environment\n        include_docker = project.include_docker\n      }\n    ]\n  ])\n\n  # Muuda map'iks for_each jaoks\n  projects_map = {\n    for project in local.all_projects : project.key =&gt; project\n  }\n}\n\n# Loo k\u00f5ik projektid\nmodule \"projects\" {\n  source = \"./modules/project-setup\"\n\n  for_each = local.projects_map\n\n  project_name = each.value.project_name\n  team_name = each.value.team_name\n  environment = each.value.environment\n  include_docker = each.value.include_docker\n}\n\n# \u00dcldine kokkuv\u00f5te\nresource \"local_file\" \"summary\" {\n  content = jsonencode({\n    total_projects = length(local.all_projects)\n    teams_count = length(var.teams)\n    projects_by_team = {\n      for team_name, team in var.teams : team_name =&gt; length(team.projects)\n    }\n    created_at = timestamp()\n  })\n\n  filename = \"projects-summary.json\"\n}\n</code></pre>"},{"location":"terraform_basics/homework2/#33-valjundid","title":"3.3 V\u00e4ljundid","text":"<p>Kirjutage <code>outputs.tf</code>:</p> Terraform<pre><code>output \"all_projects\" {\n  description = \"K\u00f5ik loodud projektid\"\n  value = {\n    for key, project in module.projects : key =&gt; project.project_info\n  }\n}\n\noutput \"projects_by_environment\" {\n  description = \"Projektide arv keskkonniti\"\n  value = {\n    for env in [\"dev\", \"test\", \"prod\"] : env =&gt; length([\n      for key, project in module.projects : project.project_info\n      if project.project_info.environment == env\n    ])\n  }\n}\n\noutput \"summary\" {\n  description = \"Kokkuv\u00f5te\"\n  value = {\n    total_projects = length(module.projects)\n    total_teams = length(var.teams)\n    docker_projects = length([\n      for key, project in module.projects : project.project_info\n      if project.project_info.has_docker\n    ])\n  }\n}\n</code></pre>"},{"location":"terraform_basics/homework2/#ulesanne-4-konfiguratsioon-ja-testimine-1-punkt","title":"\u00dclesanne 4: Konfiguratsioon ja testimine (1 punkt)","text":""},{"location":"terraform_basics/homework2/#41-muutujate-vaartused","title":"4.1 Muutujate v\u00e4\u00e4rtused","text":"<p>Kirjutage <code>terraform.tfvars</code>:</p> Terraform<pre><code>teams = {\n  frontend = {\n    projects = [\n      {\n        name = \"dashboard\"\n        environment = \"dev\"\n        include_docker = true\n      },\n      {\n        name = \"mobile-app\"\n        environment = \"test\"\n        include_docker = false\n      }\n    ]\n  }\n\n  backend = {\n    projects = [\n      {\n        name = \"api\"\n        environment = \"prod\"\n        include_docker = true\n      },\n      {\n        name = \"auth-service\"\n        environment = \"dev\"\n        include_docker = true\n      }\n    ]\n  }\n\n  devops = {\n    projects = [\n      {\n        name = \"monitoring\"\n        environment = \"prod\"\n        include_docker = false\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"terraform_basics/homework2/#42-kaivitamine","title":"4.2 K\u00e4ivitamine","text":"Bash<pre><code># Initsialiseerige\nterraform init\n\n# Vaadake plaan\nterraform plan\n\n# Rakendage\nterraform apply\n\n# Kontrollige tulemusi\nterraform output\nls -la\ncat projects-summary.json\n</code></pre>"},{"location":"terraform_basics/homework2/#43-testimine","title":"4.3 Testimine","text":"<ol> <li> <p>K\u00e4ivitage \u00fcks projektiskript: Bash<pre><code>chmod +x frontend-dashboard/scripts/start.sh\n./frontend-dashboard/scripts/start.sh\n</code></pre></p> </li> <li> <p>Vaadake loodud konfiguratsioonifaile: Bash<pre><code>cat frontend-dashboard/config/project.json\ncat backend-api/README.md\n</code></pre></p> </li> <li> <p>Muutke <code>terraform.tfvars</code> - lisage uus projekt v\u00f5i muutke environment. Rakendage muudatused.</p> </li> </ol>"},{"location":"terraform_basics/homework2/#esitamise-nouded","title":"Esitamise n\u00f5uded","text":""},{"location":"terraform_basics/homework2/#kohustuslikud-failid","title":"Kohustuslikud failid","text":"<ol> <li>K\u00f5ik <code>.tf</code> failid (main.tf, variables.tf, outputs.tf)</li> <li>Mooduli failid <code>modules/project-setup/</code> kaustas</li> <li><code>terraform.tfvars</code> fail</li> <li>K\u00f5ik genereeritud projektikaustad</li> <li><code>projects-summary.json</code> fail</li> </ol>"},{"location":"terraform_basics/homework2/#demonstratsioon","title":"Demonstratsioon","text":"<ul> <li>N\u00e4idake, kuidas lisada uut projekti</li> <li>Muutke olemasoleva projekti konfiguratsiooni</li> <li>Selgitage for_each ja locals kasutamist</li> </ul>"},{"location":"terraform_basics/homework2/#luhike-analuus-05-lk","title":"L\u00fchike anal\u00fc\u00fcs (0.5 lk)","text":"<ol> <li>Mida \u00f5ppisite moodulite kohta?</li> <li>Millised olid keerulisemad osad?</li> <li>Kuidas saaksite seda praktikas kasutada?</li> </ol>"},{"location":"terraform_basics/homework2/#hindamise-kriteeriumid-10-punkti","title":"Hindamise kriteeriumid (10 punkti)","text":"<ul> <li>Mooduli struktuur ja t\u00f6\u00f6 (3p)</li> <li>for_each ja locals kasutamine (3p)</li> <li>Konfiguratsioonifailide genereerimine (2p)</li> <li>Muutujate valideerimine (1p)</li> <li>Dokumentatsioon ja m\u00f5istmine (1p)</li> </ul>"},{"location":"terraform_basics/homework_aws_backup/","title":"Terraform Basics Kodut\u00f6\u00f6: Kohalik Infrastruktuur","text":"<p>T\u00e4htaeg: J\u00e4rgmise n\u00e4dala alguseks Eesm\u00e4rk: Terraform'i praktiline kasutamine ja Infrastructure as Code m\u00f5istmine praktilist t\u00f6\u00f6d</p> <p>Fookus on Terraform'i ja Infrastructure as Code'i \u00f5ppimisel kohalikus keskkonnas!</p>"},{"location":"terraform_basics/homework_aws_backup/#projekt-kohalik-infrastruktuur-terraformiga","title":"Projekt: Kohalik Infrastruktuur Terraform'iga**","text":""},{"location":"terraform_basics/homework_aws_backup/#mis-on-see-projekt","title":"Mis on see projekt?","text":"<p>Looge kohalik infrastruktuur Terraform'i abil. See on nagu \"digitaalse maja ehitamine\" kohalikus arvutis - kirjutate \u00fcles, mida soovite, ja Terraform teeb selle teie eest.</p>"},{"location":"terraform_basics/homework_aws_backup/#mida-te-ehitate","title":"Mida te ehitate?","text":"<p>\ud83d\udcbb Kohalik Infrastruktuur - Failid ja kaustad - projektifailide struktuur - Konfiguratsioonid - JSON ja YAML failid - Skriptid - automatiseerimise skriptid</p>"},{"location":"terraform_basics/homework_aws_backup/#miks-see-on-kasulik","title":"Miks see on kasulik?","text":"<ul> <li>\u00d5pite Terraform'i - praktiline kogemus</li> <li>Lihtne alustada - t\u00f6\u00f6tab kohalikus arvutis</li> <li>Reaalne projekt - failide ja konfiguratsiooni haldamine</li> <li>Taaskasutatav - sama kood t\u00f6\u00f6tab erinevates arvutites</li> </ul>"},{"location":"terraform_basics/homework_aws_backup/#miks-see-arhitektuur-on-hea-oppimiseks","title":"Miks see arhitektuur on hea \u00f5ppimiseks?","text":"<p>\ud83c\udfaf Lihtne ja selge: - Kohalik - ei vaja internetti ega pilve - Praktiline - \u00f5pite Terraform'i p\u00f5hit\u00f5desid - Skaleeritav - saate hiljem liikuda pilve</p> <p>\ud83d\udd17 Infrastruktuuri komponendid: Text Only<pre><code>Kohalik Infrastruktuur:\n\u251c\u2500\u2500 Projektifailid\n\u251c\u2500\u2500 Konfiguratsioonid (JSON/YAML)\n\u2514\u2500\u2500 Skriptid ja dokumentatsioon\n</code></pre></p> <p>** Mida \u00f5pite:** - Kuidas kirjutada Terraform koodi - Kuidas kasutada variable'id ja outputs - Kuidas seadistada kohalikke ressursse - Kuidas debugida probleeme</p>"},{"location":"terraform_basics/homework_aws_backup/#arhitektuuri-diagramm","title":"Arhitektuuri diagramm","text":"<pre><code>graph TB\n    subgraph \"\ud83d\udcbb Kohalik Infrastruktuur\"\n        User[\ud83d\udc64 Kasutaja]\n        Files[\ud83d\udcc1 Failid&lt;br/&gt;Local Files]\n        Config[\u2699 Konfiguratsioonid&lt;br/&gt;JSON/YAML]\n        Scripts[\ud83d\udcdc Skriptid&lt;br/&gt;Bash/Python]\n    end\n\n    User --&gt; Files\n    User --&gt; Config\n    User --&gt; Scripts\n\n    subgraph \"\ud83d\udd27 Terraform\"\n        Code[\ud83d\udcdd Terraform Kood]\n        State[\ud83d\uddc4 State Fail]\n    end\n\n    Code --&gt; Files\n    Code --&gt; Config\n    Code --&gt; Scripts</code></pre>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-1-projekti-struktuuri-loomine","title":"\u00dclesanne 1: Projekti struktuuri loomine ()","text":""},{"location":"terraform_basics/homework_aws_backup/#ulesanne-11-projekti-kataloogi-struktuur","title":"\u00dclesanne 1.1: Projekti kataloogi struktuur","text":"<p>Looge lihtne kataloogi struktuur:</p> Bash<pre><code>terraform-basics-homework/\n\u251c\u2500\u2500 main.tf          # P\u00f5hiline Terraform fail\n\u251c\u2500\u2500 variables.tf     # Muutujad\n\u251c\u2500\u2500 outputs.tf       # V\u00e4ljundid\n\u251c\u2500\u2500 terraform.tfvars # Muutujate v\u00e4\u00e4rtused\n\u2514\u2500\u2500 README.md        # Projekti kirjeldus\n</code></pre> <p>V\u00f5i kasutage valmis n\u00e4idet:</p> Bash<pre><code># Kopeerige valmis struktuur\ncp -r teacher_repo/terraform-basics-starter/templates/* .\n</code></pre>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-21-providers-konfiguratsioon","title":"\u00dclesanne 2.1: Providers konfiguratsioon","text":"<p>Looge <code>providers.tf</code>:</p> Terraform<pre><code># Configure Terraform\nterraform {\n  required_version = \"&gt;= 1.0\"\n\n  required_providers {\n    local = {\n      source  = \"hashicorp/local\"\n      version = \"~&gt; 2.0\"\n    }\n    random = {\n      source  = \"hashicorp/random\"\n      version = \"~&gt; 3.0\"\n    }\n  }\n}\n\n# Local provider - t\u00f6\u00f6tab kohalikus failis\u00fcsteemis\n# Ei vajageid lisaseadeid\n</code></pre> <p>M\u00e4rkus state haldamise kohta:</p> <p>Kohalikus keskkonnas kasutame <code>terraform.tfstate</code> faili, mis luuakse automaatselt. See on OK \u00f5ppimiseks, aga real-world projektides kasutage remote state'd.</p>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-2-lihtne-terraform-projekt","title":"\u00dclesanne 2: Lihtne Terraform projekt ()","text":""},{"location":"terraform_basics/homework_aws_backup/#ulesanne-11-provider-konfiguratsioon","title":"\u00dclesanne 1.1: Provider konfiguratsioon","text":"<p>Alustame <code>main.tf</code> faili loomisega. See fail \u00fctleb Terraform'ile, milliseid teenuseid kasutame:</p> Terraform<pre><code>terraform {\n  required_providers {\n    local = {\n      source  = \"hashicorp/local\"\n      version = \"~&gt; 2.0\"\n    }\n    random = {\n      source  = \"hashicorp/random\"\n      version = \"~&gt; 3.0\"\n    }\n  }\n}\n\n# Local provider - t\u00f6\u00f6tab kohalikus failis\u00fcsteemis\n# Random provider - genereerib juhuslikke v\u00e4\u00e4rtusi\n</code></pre> <p>Miks see vajalik on? - <code>terraform</code> blokk \u00fctleb Terraform'ile: \"Hei, ma tahan kasutada kohalikke teenuseid\" - <code>local</code> provider t\u00f6\u00f6tab failis\u00fcsteemiga - <code>random</code> provider aitab luua unikaalseid nimesid</p> <p>Mida see teeb? - Terraform teab n\u00fc\u00fcd, et peab kasutama kohalikke ressursse - K\u00f5ik failid luuakse kohalikus arvutis - Ei vaja internetti ega pilve</p>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-21-kataloogi-loomine","title":"\u00dclesanne 2.1: Kataloogi loomine","text":"<p>N\u00fc\u00fcd loome projekti kataloogi. M\u00f5tle seda nagu \"maja\" failis\u00fcsteemis:</p> Terraform<pre><code># Projekti kaust\nresource \"local_directory\" \"project_root\" {\n  path = \"${path.module}/${var.project_name}\"\n}\n\n# Alamkaustad\nresource \"local_directory\" \"config\" {\n  path = \"${local_directory.project_root.path}/config\"\n}\n\nresource \"local_directory\" \"scripts\" {\n  path = \"${local_directory.project_root.path}/scripts\"\n}\n</code></pre> <p>Miks see vajalik on? - Ilma kaustateta ei saa organiseerida faile - Kaustad on nagu \"toad majas\" - iga t\u00fc\u00fcp faile elab omas kohas - <code>path.module</code> n\u00e4itab, kus praegune Terraform fail asub</p> <p>Mida see teeb? - Loob projekti p\u00f5hikausta - Loob alamkaustad konfiguratsioonide ja skriptide jaoks - K\u00f5ik j\u00e4rgmised failid saab organiseeritult paigutada</p>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-31-konfiguratsioonifailide-loomine","title":"\u00dclesanne 3.1: Konfiguratsioonifailide loomine","text":"<p>N\u00fc\u00fcd loome konfiguratsioonifaile. M\u00f5tle seda nagu seadete failid:</p> Terraform<pre><code># Projekti konfiguratsioon JSON vormingus\nresource \"local_file\" \"project_config\" {\n  content = jsonencode({\n    project_name = var.project_name\n    environment  = var.environment\n    version      = \"1.0.0\"\n    created_at   = timestamp()\n    author       = \"Terraform Student\"\n  })\n  filename = \"${local_directory.config.path}/project.json\"\n}\n</code></pre> <p>Miks see vajalik on? - Konfiguratsioonifailid hoiavad projekti seadeid - JSON formaat on masinloetav ja inimloetav - <code>jsonencode()</code> muudab Terraform objekti JSON stringiks</p> <p>Mida see teeb? - Loob JSON faili projekti konfiguratsiooniga - Sisaldab projekti nime, versiooni ja loomise aega - Fail salvestatakse config/ kausta</p>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-41-skriptifailide-loomine","title":"\u00dclesanne 4.1: Skriptifailide loomine","text":"<p>N\u00fc\u00fcd loome skriptifaile. M\u00f5tle seda nagu automatiseerimise t\u00f6\u00f6riistad:</p> Terraform<pre><code># K\u00e4ivitamise skript\nresource \"local_file\" \"startup_script\" {\n  content = &lt;&lt;-EOF\n    #!/bin/bash\n    echo \"Tere tulemast ${var.project_name} projekti!\"\n    echo \"Keskkond: ${var.environment}\"\n    echo \"Versioon: 1.0.0\"\n    echo \"Kuup\u00e4ev: $(date)\"\n    echo \"Kaust: $(pwd)\"\n  EOF\n  filename = \"${local_directory.scripts.path}/startup.sh\"\n  file_permission = \"0755\"  # T\u00e4itmis\u00f5igus\n}\n</code></pre> <p>Miks see vajalik on? - Skriptid automatiseerivad korduvaid \u00fclesandeid - <code>file_permission = \"0755\"</code> annab t\u00e4itmis\u00f5iguse - <code>&lt;&lt;-EOF</code> v\u00f5imaldab kirjutada mitmerealine tekst</p> <p>Mida see teeb? - Loob Bash skripti, mis kuvab projekti infot - Annab skriptile t\u00e4itmis\u00f5igused - Kasutab muutujaid projekti nime ja keskkonna jaoks</p>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-51-route-table","title":"\u00dclesanne 5.1: Route Table","text":"<p>N\u00fc\u00fcd loome marsruutimistabeli. See \u00fctleb, kuidas liiklus liigub:</p> Terraform<pre><code># Route Table - marsruutimistabel\nresource \"aws_route_table\" \"public\" {\n  vpc_id = aws_vpc.main.id\n\n  route {\n    cidr_block = \"0.0.0.0/0\"  # K\u00f5ik liiklus\n    gateway_id = aws_internet_gateway.main.id  # L\u00e4heb internetti\n  }\n\n  tags = {\n    Name = \"${var.project_name}-public-rt\"\n  }\n}\n\n# Route Table Association - seob marsruutimistabeli subnet'iga\nresource \"aws_route_table_association\" \"public\" {\n  subnet_id      = aws_subnet.public.id\n  route_table_id = aws_route_table.public.id\n}\n</code></pre> <p>Miks see vajalik on? - Ilma marsruutimistabelita ei tea serverid, kuhu liiklus saata - <code>0.0.0.0/0</code> t\u00e4hendab \"k\u00f5ik liiklus\" - <code>association</code> seob selle reegli subnet'iga</p> <p>Mida see teeb? - <code>route</code> \u00fctleb: \"K\u00f5ik liiklus (0.0.0.0/0) l\u00e4heb internetti\" - <code>association</code> \u00fctleb: \"See reegel kehtib k\u00f5igile serveritele selles subnet'is\" - N\u00fc\u00fcd saavad serverid internetti p\u00e4\u00e4seda</p>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-61-security-group","title":"\u00dclesanne 6.1: Security Group","text":"<p>N\u00fc\u00fcd loome Security Group. M\u00f5tle seda nagu tulem\u00fc\u00fcr:</p> Terraform<pre><code># Security Group - tulem\u00fc\u00fcr reeglid\nresource \"aws_security_group\" \"web\" {\n  name        = \"${var.project_name}-web-sg\"\n  description = \"Security group for web server\"\n  vpc_id      = aws_vpc.main.id\n\n  # Lubame HTTP liiklust (port 80)\n  ingress {\n    description = \"HTTP\"\n    from_port   = 80\n    to_port     = 80\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]  # K\u00f5ikidele\n  }\n\n  # Lubame SSH liiklust (port 22)\n  ingress {\n    description = \"SSH\"\n    from_port   = 22\n    to_port     = 22\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]  # K\u00f5ikidele\n  }\n\n  # Lubame k\u00f5iki v\u00e4ljuvat liiklust\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  tags = {\n    Name = \"${var.project_name}-web-sg\"\n  }\n}\n</code></pre> <p>Miks see vajalik on? - Ilma Security Group'ita on serverid avatud k\u00f5igile - See on nagu \"tulem\u00fc\u00fcr\" - kontrollib, kes p\u00e4\u00e4seb serverisse - Port 80 = veebilehed (HTTP) - Port 22 = serveri haldamine (SSH)</p> <p>Mida see teeb? - <code>ingress</code> = sissetulev liiklus (kellele lubame p\u00e4\u00e4seda) - <code>egress</code> = v\u00e4ljuv liiklus (kuhu lubamena) - Port 80 = lubame k\u00f5igile vaadata veebilehte - Port 22 = lubame k\u00f5igile \u00fchenduda serveriga (SSH)</p>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-71-ec2-instance","title":"\u00dclesanne 7.1: EC2 Instance","text":"<p>N\u00fc\u00fcd loome web serveri. See on nagu arvuti pilves:</p> Terraform<pre><code># EC2 Instance - web server\nresource \"aws_instance\" \"web\" {\n  ami           = data.aws_ami.ubuntu.id\n  instance_type = var.instance_type\n\n  subnet_id                   = aws_subnet.public.id\n  vpc_security_group_ids      = [aws_security_group.web.id]\n  associate_public_ip_address = true\n\n  # Skript, mis k\u00e4ivitub serveri k\u00e4ivitamisel\n  user_data = &lt;&lt;-EOF\n              #!/bin/bash\n              apt-get update\n              apt-get install -y nginx\n              systemctl start nginx\n              systemctl enable nginx\n              EOF\n\n  tags = {\n    Name = \"${var.project_name}-web-server\"\n  }\n}\n</code></pre> <p>Miks see vajalik on? - See on meie web server - siin jookseb veebileht - <code>user_data</code> installib automaatselt nginx'i - <code>associate_public_ip_address = true</code> annab avaliku IP</p> <p>Mida see teeb? - <code>ami</code> = operatsioonis\u00fcsteemi pilt (Ubuntu) - <code>instance_type</code> = serveri t\u00fc\u00fcp (t3.micro = v\u00e4ike ja odav) - <code>user_data</code> = skript, mis installib nginx'i serveri k\u00e4ivitamisel - <code>associate_public_ip_address = true</code> = annab avaliku IP, et saaksime serverile p\u00e4\u00e4seda</p>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-81-data-source","title":"\u00dclesanne 8.1: Data Source","text":"<p>Viimane samm - leiame Ubuntu AMI:</p> Terraform<pre><code># Data source - leiab uusima Ubuntu AMI\ndata \"aws_ami\" \"ubuntu\" {\n  most_recent = true\n  owners      = [\"099720109477\"]  # Canonical (Ubuntu looja)\n\n  filter {\n    name   = \"name\"\n    values = [\"ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*\"]\n  }\n}\n</code></pre> <p>Miks see vajalik on? - <code>data</code> blokk ei loo uut ressurssi, vaid otsib olemasolevat - Meil on vaja Ubuntu AMI't serveri jaoks - <code>most_recent = true</code> v\u00f5tab uusima versiooni</p> <p>Mida see teeb? - <code>data</code> blokk otsib olemasolevat ressurssi (ei loo uut) - <code>most_recent = true</code> = v\u00f5tab uusima versiooni - <code>filter</code> = otsib ainult Ubuntu 20.04 AMI'sid - <code>owners</code> = ainult Canonical (Ubuntu looja) AMI'd</p>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-21-vpc-loomine","title":"\u00dclesanne 2.1: VPC loomine","text":"<p>Lisa VPC (Virtual Private Cloud) - see on nagu privaatne v\u00f5rk AWS's:</p> Terraform<pre><code># VPC - privaatne v\u00f5rk AWS's\nresource \"aws_vpc\" \"main\" {\n  cidr_block = \"10.0.0.0/16\"\n\n  tags = {\n    Name = \"${var.project_name}-vpc\"\n  }\n}\n</code></pre> <p>Mida see teeb? - Loob privaatse v\u00f5rgu AWS's - <code>cidr_block</code> m\u00e4\u00e4rab v\u00f5rgu suuruse (10.0.0.0/16 = 65,536 IP aadressi) - <code>tags</code> aitab identifitseerida ressurssi</p>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-31-subnet-loomine","title":"\u00dclesanne 3.1: Subnet loomine","text":"<p>Lisa subnet - see on nagu alamv\u00f5rk VPC sees:</p> Terraform<pre><code># Public Subnet - alamv\u00f5rk, mis on avalik internetile\nresource \"aws_subnet\" \"public\" {\n  vpc_id                  = aws_vpc.main.id\n  cidr_block              = \"10.0.1.0/24\"\n  availability_zone       = \"${var.aws_region}a\"\n  map_public_ip_on_launch = true\n\n  tags = {\n    Name = \"${var.project_name}-public-subnet\"\n  }\n}\n</code></pre> <p>Mida see teeb? - Loob alamv\u00f5rgu VPC sees - <code>map_public_ip_on_launch = true</code> annab serveritele avaliku IP - <code>availability_zone</code> m\u00e4\u00e4rab, millises AWS tsoonis asub</p>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-41-internet-gateway","title":"\u00dclesanne 4.1: Internet Gateway","text":"<p>Lisa Internet Gateway - see \u00fchendab v\u00f5rgu internetti:</p> Terraform<pre><code># Internet Gateway - \u00fchendab v\u00f5rgu internetti\nresource \"aws_internet_gateway\" \"main\" {\n  vpc_id = aws_vpc.main.id\n\n  tags = {\n    Name = \"${var.project_name}-igw\"\n  }\n}\n</code></pre> <p>Mida see teeb? - Loob \"v\u00e4rava\" internetti - Ilma selleta ei saa serverid internetti p\u00e4\u00e4seda</p>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-51-route-table_1","title":"\u00dclesanne 5.1: Route Table","text":"<p>Lisa marsruutimistabel - see \u00fctleb, kuidas liiklus liigub:</p> Terraform<pre><code># Route Table - marsruutimistabel\nresource \"aws_route_table\" \"public\" {\n  vpc_id = aws_vpc.main.id\n\n  route {\n    cidr_block = \"0.0.0.0/0\"  # K\u00f5ik liiklus\n    gateway_id = aws_internet_gateway.main.id  # L\u00e4heb internetti\n  }\n\n  tags = {\n    Name = \"${var.project_name}-public-rt\"\n  }\n}\n\n# Route Table Association - seob marsruutimistabeli subnet'iga\nresource \"aws_route_table_association\" \"public\" {\n  subnet_id      = aws_subnet.public.id\n  route_table_id = aws_route_table.public.id\n}\n</code></pre> <p>Mida see teeb? - <code>route</code> \u00fctleb: \"k\u00f5ik liiklus (0.0.0.0/0) l\u00e4heb internetti\" - <code>association</code> seob selle reegli subnet'iga</p>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-61-security-group_1","title":"\u00dclesanne 6.1: Security Group","text":"<p>Lisa Security Group - see on nagu tulem\u00fc\u00fcr:</p> Terraform<pre><code># Security Group - tulem\u00fc\u00fcr reeglid\nresource \"aws_security_group\" \"web\" {\n  name        = \"${var.project_name}-web-sg\"\n  description = \"Security group for web server\"\n  vpc_id      = aws_vpc.main.id\n\n  # Lubame HTTP liiklust (port 80)\n  ingress {\n    description = \"HTTP\"\n    from_port   = 80\n    to_port     = 80\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]  # K\u00f5ikidele\n  }\n\n  # Lubame SSH liiklust (port 22)\n  ingress {\n    description = \"SSH\"\n    from_port   = 22\n    to_port     = 22\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]  # K\u00f5ikidele\n  }\n\n  # Lubame k\u00f5iki v\u00e4ljuvat liiklust\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  tags = {\n    Name = \"${var.project_name}-web-sg\"\n  }\n}\n</code></pre> <p>Mida see teeb? - <code>ingress</code> = sissetulev liiklus (kellele lubame p\u00e4\u00e4seda) - <code>egress</code> = v\u00e4ljuv liiklus (kuhu lubamena) - Port 80 = HTTP (veebilehed) - Port 22 = SSH (serveri haldamine)</p>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-71-ec2-instance_1","title":"\u00dclesanne 7.1: EC2 Instance","text":"<p>Lisa web server:</p> Terraform<pre><code># EC2 Instance - web server\nresource \"aws_instance\" \"web\" {\n  ami           = data.aws_ami.ubuntu.id\n  instance_type = var.instance_type\n\n  subnet_id                   = aws_subnet.public.id\n  vpc_security_group_ids      = [aws_security_group.web.id]\n  associate_public_ip_address = true\n\n  # Skript, mis k\u00e4ivitub serveri k\u00e4ivitamisel\n  user_data = &lt;&lt;-EOF\n              #!/bin/bash\n              apt-get update\n              apt-get install -y nginx\n              systemctl start nginx\n              systemctl enable nginx\n              EOF\n\n  tags = {\n    Name = \"${var.project_name}-web-server\"\n  }\n}\n</code></pre> <p>Mida see teeb? - <code>ami</code> = operatsioonis\u00fcsteemi pilt (Ubuntu) - <code>instance_type</code> = serveri t\u00fc\u00fcp (t3.micro = v\u00e4ike ja odav) - <code>user_data</code> = skript, mis installib nginx'i - <code>associate_public_ip_address = true</code> = annab avaliku IP</p>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-81-data-source_1","title":"\u00dclesanne 8.1: Data Source","text":"<p>Lisa data source Ubuntu AMI jaoks:</p> Terraform<pre><code># Data source - leiab uusima Ubuntu AMI\ndata \"aws_ami\" \"ubuntu\" {\n  most_recent = true\n  owners      = [\"099720109477\"]  # Canonical (Ubuntu looja)\n\n  filter {\n    name   = \"name\"\n    values = [\"ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*\"]\n  }\n}\n</code></pre> <p>Mida see teeb? - <code>data</code> blokk otsib olemasolevat ressurssi (ei loo uut) - <code>most_recent = true</code> = v\u00f5tab uusima versiooni - <code>filter</code> = otsib ainult Ubuntu 20.04 AMI'sid</p>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-3-variables-ja-outputs-failid","title":"\u00dclesanne 3: Variables ja outputs failid ()","text":""},{"location":"terraform_basics/homework_aws_backup/#ulesanne-11-variables-fail","title":"\u00dclesanne 1.1: Variables fail","text":"<p>N\u00fc\u00fcd loome <code>variables.tf</code> faili. See fail m\u00e4\u00e4rab muutujad, mida saame muuta:</p> Terraform<pre><code>variable \"project_name\" {\n  description = \"Projekti nimi\"\n  type        = string\n  default     = \"terraform-basics-homework\"\n}\n\nvariable \"environment\" {\n  description = \"Keskkonna nimi\"\n  type        = string\n  default     = \"development\"\n\n  validation {\n    condition     = contains([\"development\", \"staging\", \"production\"], var.environment)\n    error_message = \"Keskkond peab olema: development, staging v\u00f5i production.\"\n  }\n}\n\nvariable \"file_count\" {\n  description = \"Loodavate n\u00e4idisfailide arv\"\n  type        = number\n  default     = 5\n\n  validation {\n    condition     = var.file_count &gt; 0 &amp;&amp; var.file_count &lt;= 20\n    error_message = \"Failide arv peab olema vahemikus 1-20.\"\n  }\n}\n</code></pre> <p>Miks see vajalik on? - <code>variables</code> v\u00f5imaldavad meil muuta v\u00e4\u00e4rtusi ilma koodi muutmata - <code>default</code> v\u00e4\u00e4rtused t\u00e4hendavad, et kui me ei m\u00e4\u00e4ra midagi, kasutatakse neid - <code>validation</code> kontrollib, et v\u00e4\u00e4rtused oleksid korrektsed</p> <p>Mida see teeb? - <code>project_name</code> = projekti nimi, mida kasutatakse failide nimetamisel - <code>environment</code> = keskkonna nimi (development, staging, production) - <code>file_count</code> = kui palju n\u00e4idisfaile luua (1-20 vahel)</p>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-21-outputs-fail","title":"\u00dclesanne 2.1: Outputs fail","text":"<p>N\u00fc\u00fcd loome <code>outputs.tf</code> faili. See fail n\u00e4itab meile olulisi infosid p\u00e4rast k\u00e4ivitamist:</p> Terraform<pre><code>output \"project_directory\" {\n  description = \"Projekti kausta tee\"\n  value       = local_directory.project_root.path\n}\n\noutput \"config_files\" {\n  description = \"Loodud konfiguratsioonifailide nimekiri\"\n  value = [\n    local_file.project_config.filename,\n  ]\n}\n\noutput \"script_files\" {\n  description = \"Loodud skriptifailide nimekiri\"\n  value = [\n    local_file.startup_script.filename,\n  ]\n}\n\noutput \"project_summary\" {\n  description = \"Projekti kokkuv\u00f5te\"\n  value = \"Projekt '${var.project_name}' keskkond '${var.environment}' loodud ${timestamp()}\"\n}\n</code></pre> <p>Miks see vajalik on? - <code>outputs</code> n\u00e4itavad meile olulisi infosid p\u00e4rast <code>terraform apply</code> - Ilma nendeta peaksime k\u00e4sitsi failis\u00fcsteemist otsima - <code>project_summary</code> annab meile kohe \u00fclevaate projektist</p> <p>Mida see teeb? - <code>project_directory</code> = Projekti kausta asukoht - <code>config_files</code> = K\u00f5ik loodud konfiguratsioonifailid - <code>script_files</code> = K\u00f5ik loodud skriptifailid - <code>project_summary</code> = Projekti kokkuv\u00f5tte string</p>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-31-terraformtfvars-fail","title":"\u00dclesanne 3.1: Terraform.tfvars fail","text":"<p>N\u00fc\u00fcd loome <code>terraform.tfvars</code> faili. See fail m\u00e4\u00e4rab muutujate v\u00e4\u00e4rtused:</p> Terraform<pre><code>aws_region   = \"us-east-1\"\nproject_name = \"terraform-basics-homework\"\ninstance_type = \"t3.micro\"\n</code></pre> <p>Miks see vajalik on? - <code>terraform.tfvars</code> fail m\u00e4\u00e4rab muutujate v\u00e4\u00e4rtused - Saame muuta v\u00e4\u00e4rtusi ilma koodi muutmata - Kui tahame muuta regiooni, muudame ainult <code>aws_region</code> v\u00e4\u00e4rtust</p> <p>Mida see teeb? - <code>aws_region = \"us-east-1\"</code> = t\u00f6\u00f6tame US East regioonis - <code>project_name = \"terraform-basics-homework\"</code> = projekti nimi - <code>instance_type = \"t3.micro\"</code> = kasutame v\u00e4ikest ja odavat serverit</p>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-41-projekti-kaivitamine","title":"\u00dclesanne 4.1: Projekti k\u00e4ivitamine","text":"<p>N\u00fc\u00fcd k\u00e4ivitame projekti. J\u00e4rgige samme t\u00e4pselt:</p> Bash<pre><code># Samm 1: Initsialiseerige Terraform\nterraform init\n</code></pre> <p>Mida see teeb? - Allalaadib AWS provider'i - Seadistab Terraform'i t\u00f6\u00f6tama</p> Bash<pre><code># Samm 2: Vaadake, mida luuakse\nterraform plan\n</code></pre> <p>Mida see teeb? - N\u00e4itab, mida Terraform kavatseb luua - Kontrollige, et k\u00f5ik \u00f5ige on - Kui midagi valesti, parandage ja k\u00e4ivitage uuesti</p> Bash<pre><code># Samm 3: Looge infrastruktuur\nterraform apply\n</code></pre> <p>Mida see teeb? - Loob k\u00f5ik ressursid AWS's - V\u00f5tab umbes 2-utit - Kui k\u00fcsib kinnitust, kirjutage \"yes\"</p>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-51-testige-web-serverit","title":"\u00dclesanne 5.1: Testige web serverit","text":"<p>P\u00e4rast <code>terraform apply</code> l\u00f5ppemist n\u00e4ete outputs:</p> Text Only<pre><code>web_server_public_ip = \"3.123.45.67\"\nweb_server_url = \"http://3.123.45.67\"\n</code></pre> <p>Avage brauser jage aadressile: Text Only<pre><code>http://[web_server_public_ip]\n</code></pre></p> <p>Mida peaksite n\u00e4gema? - Nginx tervitusleht: \"Welcome to nginx!\" - See t\u00e4hendab, et k\u00f5ik t\u00f6\u00f6tab \u00f5igesti!</p> <p>Miks see t\u00f6\u00f6tab? - Server on k\u00e4ivitatud Ubuntu'ga - Nginx on automaatselt installitud (<code>user_data</code> skript) - Security Group lubab HTTP liiklust (port 80) - Avalik IP v\u00f5imaldab meil serverile p\u00e4\u00e4seda   password = var.db_password</p> <p>vpc_security_group_ids = var.security_group_ids   db_subnet_group_name   = aws_db_subnet_group.main.name</p> <p>skip_final_snapshot = true   deletion_protection = var.environment == \"production\" ? true : false</p> <p>tags = {     Name = \"\\({var.project_name}-\\)-db\"   } } Text Only<pre><code>### \u00dclesanne 3.1: Database module outputs\n\n**Looge `modules/database/outputs.tf`:**\n\n```hcl\noutput \"db_instance_id\" {\n  description = \"ID of the RDS instance\"\n  value       = aws_db_instance.main.id\n}\n\noutput \"db_endpoint\" {\n  description = \"Endpoint of the RDS instance\"\n  value       = aws_db_instance.main.endpoint\n}\n\noutput \"db_port\" {\n  description = \"Port of the RDS instance\"\n  value       = aws_db_instance.main.port\n}\n</code></pre></p>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-4-aws-konsooli-uurimine","title":"\u00dclesanne 4: AWS konsooli uurimine ()","text":""},{"location":"terraform_basics/homework_aws_backup/#ulesanne-11-aws-konsooli-avamine","title":"\u00dclesanne 1.1: AWS konsooli avamine","text":"<p>Avage AWS konsool ja vaadake, mida Terraform on loonud:</p> <ol> <li>Minge AWS konsooli: https://console.aws.amazon.com</li> <li>Valige regioon: Vaadake, kas on valitud \u00f5ige regioon (us-east-1)</li> <li>Vaadake EC2 teenust: Minge EC2 \u2192 Instances</li> </ol> <p>Mida peaksite n\u00e4gema? - \u00dcks EC2 instance nimega \"terraform-basics-homework-web-server\" - Instance state peaks olema \"running\" - Public IP peaks olema sama, mis Terraform outputs'is</p>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-21-vpc-uurimine","title":"\u00dclesanne 2.1: VPC uurimine","text":"<p>Minge VPC teenusse ja vaadake v\u00f5rku:</p> <ol> <li>Minge VPC teenusse: VPC \u2192 Your VPCs</li> <li>Vaadake VPC't: Peaksite n\u00e4gema VPC't nimega \"terraform-basics-homework-vpc\"</li> <li>Vaadake subnets: Minge Subnets ja vaadake subnet'i</li> </ol> <p>Mida peaksite n\u00e4gema? - VPC CIDR: 10.0.0.0/16 - Subnet CIDR: 10.0.1.0/24 - Subnet on \"public\" (map public IP = yes)</p>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-31-security-groups-uurimine","title":"\u00dclesanne 3.1: Security Groups uurimine","text":"<p>Minge Security Groups ja vaadake tulem\u00fc\u00fcri reegleid:</p> <ol> <li>Minge Security Groups: VPC \u2192 Security Groups</li> <li>Vaadake web security group'i: Nimi peaks olema \"terraform-basics-homework-web-sg\"</li> </ol> <p>Mida peaksite n\u00e4gema? - Inbound rules: Port 80 (HTTP) ja Port 22 (SSH) - Outbound rules: All traffic (0.0.0.0/0)</p> <p>Miks see oluline on? - Security Groups on nagu tulem\u00fc\u00fcr - Need kontrollivad, kes p\u00e4\u00e4seb serverisse - Ilma nendeta ei saaks veebilehte vaadata</p>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-5-eksperimenteerimine-ja-muutmine","title":"\u00dclesanne 5: Eksperimenteerimine ja muutmine ()","text":""},{"location":"terraform_basics/homework_aws_backup/#ulesanne-11-regiooni-muutmine","title":"\u00dclesanne 1.1: Regiooni muutmine","text":"<p>Muutke AWS regiooni ja vaadake, mis juhtub:</p> <ol> <li> <p>Muutke <code>terraform.tfvars</code> faili: Terraform<pre><code>aws_region   = \"eu-west-1\"  # Muutke us-east-1 asemel\nproject_name = \"terraform-basics-homework\"\ninstance_type = \"t3.micro\"\n</code></pre></p> </li> <li> <p>K\u00e4ivitage uuesti: Bash<pre><code>terraform plan\nterraform apply\n</code></pre></p> </li> </ol> <p>Mida peaksite n\u00e4gema? - Terraform \u00fctleb: \"aws_vpc.main: Destroying\" ja \"aws_vpc.main: Creating\" - K\u00f5ik ressursid luuakse uues regioonis - Uus IP aadress</p> <p>Miks see juhtub? - AWS regioonid on erinevad andmekeskused - Ressursid ei saa liikuda regioonide vahel - Terraform kustutab vanad ja loob uued</p>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-21-instance-tuubi-muutmine","title":"\u00dclesanne 2.1: Instance t\u00fc\u00fcbi muutmine","text":"<p>Muutke serveri t\u00fc\u00fcpi ja vaadake erinevust:</p> <ol> <li> <p>Muutke <code>terraform.tfvars</code> faili: Terraform<pre><code>aws_region   = \"eu-west-1\"\nproject_name = \"terraform-basics-homework\"\ninstance_type = \"t3.small\"  # Muutke t3.micro asemel\n</code></pre></p> </li> <li> <p>K\u00e4ivitage: Bash<pre><code>terraform plan\nterraform apply\n</code></pre></p> </li> </ol> <p>Mida peaksite n\u00e4gema? - Terraform \u00fctleb: \"aws_instance.web: Modifying\" - Server taask\u00e4ivitatakse - Veebileht j\u00e4\u00e4b samaks</p> <p>Miks see juhtub? - Instance t\u00fc\u00fcp m\u00e4\u00e4rab serveri v\u00f5imsuse - <code>t3.small</code> on v\u00f5imsam kui <code>t3.micro</code> - Server peab taask\u00e4ivituma, et muutused j\u00f5uaksid kohale</p>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-31-https-lisamine","title":"\u00dclesanne 3.1: HTTPS lisamine","text":"<p>Lisage HTTPS tugi (port 443):</p> <ol> <li> <p>Muutke <code>main.tf</code> faili security group'i: Terraform<pre><code># Lisa see ingress reegel olemasoleva HTTP reegli juurde\ningress {\n  description = \"HTTPS\"\n  from_port   = 443\n  to_port     = 443\n  protocol    = \"tcp\"\n  cidr_blocks = [\"0.0.0.0/0\"]\n}\n</code></pre></p> </li> <li> <p>K\u00e4ivitage: Bash<pre><code>terraform plan\nterraform apply\n</code></pre></p> </li> </ol> <p>Mida peaksite n\u00e4gema? - Terraform \u00fctleb: \"aws_security_group.web: Modifying\" - Security group muudetakse ilma serveri taask\u00e4ivitamata</p> <p>Miks see juhtub? - Security Groups on v\u00f5rgu tasemel - Server ei pea taask\u00e4ivituma - Muutused on kohe aktiivsed</p>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-41-custom-veebileht","title":"\u00dclesanne 4.1: Custom veebileht","text":"<p>Lisage oma veebileht serverile:</p> <ol> <li> <p>Muutke <code>main.tf</code> faili user_data skripti: Terraform<pre><code>user_data = &lt;&lt;-EOF\n#!/bin/bash\napt-get update\napt-get install -y nginx\nsystemctl start nginx\nsystemctl enable nginx\n\n# Lisa custom veebileht\ncat &gt; /var/www/html/index.html &lt;&lt; 'HTML'\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Minu Terraform Projekt&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Tere! See onu Terraform projekt&lt;/h1&gt;\n    &lt;p&gt;Server: $(hostname)&lt;/p&gt;\n    &lt;p&gt;Kuup\u00e4ev: $(date)&lt;/p&gt;\n    &lt;p&gt;Regioon: eu-west-1&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nHTML\nEOF\n</code></pre></p> </li> <li> <p>K\u00e4ivitage: Bash<pre><code>terraform plan\nterraform apply\n</code></pre></p> </li> </ol> <p>Mida peaksite n\u00e4gema? - Terraform \u00fctleb: \"aws_instance.web: Modifying\" - Server taask\u00e4ivitatakse - Brauseris n\u00e4ete oma custom veebilehte</p> <p>Miks server taask\u00e4ivitatakse? - <code>user_data</code> muutub ainult serveri taask\u00e4ivitamisel - Terraform kustutab vana serveri ja loob uue</p>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-6-probleemide-lahendamine","title":"\u00dclesanne 6: Probleemide lahendamine ()","text":""},{"location":"terraform_basics/homework_aws_backup/#ulesanne-11-vale-regioon","title":"\u00dclesanne 1.1: Vale regioon","text":"<p>Proovige kasutada vale regiooni ja vaadake, mis juhtub:</p> <ol> <li> <p>Muutke <code>terraform.tfvars</code> faili: Terraform<pre><code>aws_region   = \"invalid-region\"  # Vale regioon\nproject_name = \"terraform-basics-homework\"\ninstance_type = \"t3.micro\"\n</code></pre></p> </li> <li> <p>K\u00e4ivitage: Bash<pre><code>terraform plan\n</code></pre></p> </li> </ol> <p>Mida peaksite n\u00e4gema? - Error: \"Invalid region\" - Terraform ei saa t\u00f6\u00f6tada</p> <p>Kuidas parandada? - Muutke regioon tagasi \u00f5igeks (nt eu-west-1) - K\u00e4ivitage <code>terraform plan</code> uuesti</p>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-21-vale-instance-tuup","title":"\u00dclesanne 2.1: Vale instance t\u00fc\u00fcp","text":"<p>Proovige kasutada vale instance t\u00fc\u00fcpi:</p> <ol> <li> <p>Muutke <code>terraform.tfvars</code> faili: Terraform<pre><code>aws_region   = \"eu-west-1\"\nproject_name = \"terraform-basics-homework\"\ninstance_type = \"invalid-type\"  # Vale t\u00fc\u00fcp\n</code></pre></p> </li> <li> <p>K\u00e4ivitage: Bash<pre><code>terraform plan\n</code></pre></p> </li> </ol> <p>Mida peaksite n\u00e4gema? - Error: \"Invalid instance type\" - Terraform ei saa luua serverit</p> <p>Kuidas parandada? - Muutke t\u00fc\u00fcp tagasi \u00f5igeks (nt t3.micro) - K\u00e4ivitage <code>terraform plan</code> uuesti</p>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-31-vale-cidr-blokk","title":"\u00dclesanne 3.1: Vale CIDR blokk","text":"<p>Proovige kasutada vale VPC CIDR blokki:</p> <ol> <li> <p>Muutke <code>main.tf</code> faili VPC CIDR: Terraform<pre><code>cidr_block = \"256.256.256.256/16\"  # Vale CIDR\n</code></pre></p> </li> <li> <p>K\u00e4ivitage: Bash<pre><code>terraform plan\n</code></pre></p> </li> </ol> <p>Mida peaksite n\u00e4gema? - Error: \"Invalid CIDR block\" - Terraform ei saa luua VPC't</p> <p>Kuidas parandada? - Muutke CIDR tagasi \u00f5igeks (10.0.0.0/16) - K\u00e4ivitage <code>terraform plan</code> uuesti</p>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-7-projekti-testimine-ja-puhastamine","title":"\u00dclesanne 7: Projekti testimine ja puhastamine ()","text":""},{"location":"terraform_basics/homework_aws_backup/#ulesanne-11-testige-koiki-muudatusi","title":"\u00dclesanne 1.1: Testige k\u00f5iki muudatusi","text":"<p>Testige, et k\u00f5ik t\u00f6\u00f6tab:</p> <ol> <li> <p>Avage brauser jage aadressile: Text Only<pre><code>http://[web_server_public_ip]\n</code></pre></p> </li> <li> <p>Vaadake, et n\u00e4ete oma custom veebilehte</p> </li> <li> <p>Kontrollige AWS konsoolis, et k\u00f5ik ressursid on olemas</p> </li> </ol>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-21-puhastage-ressursid","title":"\u00dclesanne 2.1: Puhastage ressursid","text":"<p>Kustutage k\u00f5ik ressursid:</p> Bash<pre><code>terraform destroy\n</code></pre> <p>Miks see oluline on? - AWS v\u00f5tab raha iga tunni eest - <code>t3.small</code> maksab umbes $0.02/tund - Kustutades s\u00e4\u00e4stame raha</p> <p>Mida peaksite n\u00e4gema? - \"Destroy complete!\" - k\u00f5ik ressursid on kustutatud - AWS konsoolis ei peaks olema \u00fchtegi ressurssi</p> Text Only<pre><code>transition {\n  days          = 30\n  storage_class = \"STANDARD_IA\"\n}\n\ntransition {\n  days          = 90\n  storage_class = \"GLACIER\"\n}\n\nexpiration {\n  days = 365\n}\n</code></pre> <p>} } ``` </p>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-31-storage-module-outputs","title":"\u00dclesanne 3.1: Storage module outputs","text":"<p>Looge <code>modules/storage/outputs.tf</code>: <code>hcl output \"bucket_id\" {   description = \"ID of the S3 bucket\"   value       = aws_s3_bucket.main.id }  output \"bucket_arn\" {   description = \"ARN of the S3 bucket\"   value       = aws_s3_bucket.main.arn }  output \"bucket_name\" {   description = \"Name of the S3 bucket\"   value       = aws_s3_bucket.main.bucket }</code></p>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-6-environment-konfiguratsioonid","title":"\u00dclesanne 6: Environment konfiguratsioonid ()","text":""},{"location":"terraform_basics/homework_aws_backup/#ulesanne-11-development-environment","title":"\u00dclesanne 1.1: Development environment","text":"<p>Looge <code>environments/dev/main.tf</code>:</p> Terraform<pre><code># Import shared configuration\nterraform {\n  source = \"../../shared\"\n}\n\n# Import modules\nmodule \"networking\" {\n  source = \"../../modules/networking\"\n\n  environment         = \"dev\"\n  project_name        = \"terraform-basics-homework\"\n  vpc_cidr           = \"10.0.0.0/16\"\n  public_subnet_cidr = \"10.0.1.0/24\"\n  private_subnet_cidr = \"10.0.2.0/24\"\n  availability_zone  = \"us-west-2a\"\n}\n\nmodule \"compute\" {\n  source = \"../../modules/compute\"\n\n  environment        = \"dev\"\n  project_name       = \"terraform-basics-homework\"\n  subnet_id          = module.networking.public_subnet_id\n  security_group_ids = [module.networking.web_security_group_id]\n  instance_type      = \"t2.micro\"\n  instance_count     = 1\n  enable_autoscaling = false\n}\n\nmodule \"database\" {\n  source = \"../../modules/database\"\n\n  environment         = \"dev\"\n  project_name        = \"terraform-basics-homework\"\n  subnet_id           = module.networking.private_subnet_id\n  security_group_ids  = [module.networking.database_security_group_id]\n  instance_class      = \"db.t3.micro\"\n  allocated_storage   = 20\n  db_name             = \"webapp_dev\"\n  db_username         = \"admin\"\n  db_password         = var.db_password\n}\n\nmodule \"storage\" {\n  source = \"../../modules/storage\"\n\n  environment        = \"dev\"\n  project_name       = \"terraform-basics-homework\"\n  bucket_name        = \"terraform-basics-homework-dev-logs-${random_id.bucket_suffix.hex}\"\n  enable_versioning  = false\n  enable_logging     = true\n}\n\n# Random ID for unique bucket names\nresource \"random_id\" \"bucket_suffix\" {\n  byte_length = 4\n}\n</code></pre> <p>Looge <code>environments/dev/variables.tf</code>:</p> Terraform<pre><code>variable \"aws_region\" {\n  description = \"AWS region\"\n  type        = string\n  default     = \"us-west-2\"\n}\n\nvariable \"environment\" {\n  description = \"Environment name\"\n  type        = string\n  default     = \"dev\"\n}\n\nvariable \"project_name\" {\n  description = \"Project name\"\n  type        = string\n  default     = \"terraform-basics-homework\"\n}\n\nvariable \"db_password\" {\n  description = \"Database password\"\n  type        = string\n  sensitive   = true\n}\n</code></pre> <p>Looge <code>environments/dev/terraform.tfvars</code>:</p> Terraform<pre><code>aws_region   = \"us-west-2\"\nenvironment  = \"dev\"\nproject_name = \"terraform-basics-homework\"\ndb_password  = \"dev_password_123\"\n</code></pre>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-21-staging-environment","title":"\u00dclesanne 2.1: Staging environment","text":"<p>Looge <code>environments/staging/main.tf</code>:</p> Terraform<pre><code># Import shared configuration\nterraform {\n  source = \"../../shared\"\n}\n\n# Import modules\nmodule \"networking\" {\n  source = \"../../modules/networking\"\n\n  environment         = \"staging\"\n  project_name        = \"terraform-basics-homework\"\n  vpc_cidr           = \"10.1.0.0/16\"\n  public_subnet_cidr = \"10.1.1.0/24\"\n  private_subnet_cidr = \"10.1.2.0/24\"\n  availability_zone  = \"us-west-2a\"\n}\n\nmodule \"compute\" {\n  source = \"../../modules/compute\"\n\n  environment        = \"staging\"\n  project_name       = \"terraform-basics-homework\"\n  subnet_id          = module.networking.public_subnet_id\n  security_group_ids = [module.networking.web_security_group_id]\n  instance_type      = \"t2.small\"\n  instance_count     = 1\n  enable_autoscaling = false\n}\n\nmodule \"database\" {\n  source = \"../../modules/database\"\n\n  environment         = \"staging\"\n  project_name        = \"terraform-basics-homework\"\n  subnet_id           = module.networking.private_subnet_id\n  security_group_ids  = [module.networking.database_security_group_id]\n  instance_class      = \"db.t3.small\"\n  allocated_storage   = 50\n  db_name             = \"webapp_staging\"\n  db_username         = \"admin\"\n  db_password         = var.db_password\n}\n\nmodule \"storage\" {\n  source = \"../../modules/storage\"\n\n  environment        = \"staging\"\n  project_name       = \"terraform-basics-homework\"\n  bucket_name        = \"terraform-basics-homework-staging-logs-${random_id.bucket_suffix.hex}\"\n  enable_versioning  = true\n  enable_logging     = true\n}\n\n# Random ID for unique bucket names\nresource \"random_id\" \"bucket_suffix\" {\n  byte_length = 4\n}\n</code></pre> <p>Looge <code>environments/staging/terraform.tfvars</code>:</p> Terraform<pre><code>aws_region   = \"us-west-2\"\nenvironment  = \"staging\"\nproject_name = \"terraform-basics-homework\"\ndb_password  = \"staging_password_456\"\n</code></pre>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-31-production-environment","title":"\u00dclesanne 3.1: Production environment","text":"<p>Looge <code>environments/prod/main.tf</code>:</p> Terraform<pre><code># Import shared configuration\nterraform {\n  source = \"../../shared\"\n}\n\n# Import modules\nmodule \"networking\" {\n  source = \"../../modules/networking\"\n\n  environment         = \"prod\"\n  project_name        = \"terraform-basics-homework\"\n  vpc_cidr           = \"10.2.0.0/16\"\n  public_subnet_cidr = \"10.2.1.0/24\"\n  private_subnet_cidr = \"10.2.2.0/24\"\n  availability_zone  = \"us-west-2a\"\n}\n\nmodule \"compute\" {\n  source = \"../../modules/compute\"\n\n  environment        = \"prod\"\n  project_name       = \"terraform-basics-homework\"\n  subnet_id          = module.networking.public_subnet_id\n  security_group_ids = [module.networking.web_security_group_id]\n  instance_type      = \"t2.medium\"\n  instance_count     = 2\n  enable_autoscaling = true\n_size           = 2\n  max_size           = 5\n  desired_capacity   = 2\n}\n\nmodule \"database\" {\n  source = \"../../modules/database\"\n\n  environment         = \"prod\"\n  project_name        = \"terraform-basics-homework\"\n  subnet_id           = module.networking.private_subnet_id\n  security_group_ids  = [module.networking.database_security_group_id]\n  instance_class      = \"db.t3.medium\"\n  allocated_storage   = 100\n  db_name             = \"webapp_prod\"\n  db_username         = \"admin\"\n  db_password         = var.db_password\n}\n\nmodule \"storage\" {\n  source = \"../../modules/storage\"\n\n  environment        = \"prod\"\n  project_name       = \"terraform-basics-homework\"\n  bucket_name        = \"terraform-basics-homework-prod-logs-${random_id.bucket_suffix.hex}\"\n  enable_versioning  = true\n  enable_logging     = true\n}\n\n# Random ID for unique bucket names\nresource \"random_id\" \"bucket_suffix\" {\n  byte_length = 4\n}\n</code></pre> <p>Looge <code>environments/prod/terraform.tfvars</code>:</p> Terraform<pre><code>aws_region   = \"us-west-2\"\nenvironment  = \"prod\"\nproject_name = \"terraform-basics-homework\"\ndb_password  = \"prod_password_789\"\n</code></pre>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-7-juurutamine-ja-testimine","title":"\u00dclesanne 7: Juurutamine ja testimine ()","text":""},{"location":"terraform_basics/homework_aws_backup/#ulesanne-11-development-keskkonna-juurutamine","title":"\u00dclesanne 1.1: Development keskkonna juurutamine","text":"Bash<pre><code># Navigate to development environment\ncd environments/dev\n\n# Initialize Terraform\nterraform init\n\n# Plan the deployment\nterraform plan\n\n# Apply the configuration\nterraform apply\n</code></pre>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-21-staging-keskkonna-juurutamine","title":"\u00dclesanne 2.1: Staging keskkonna juurutamine","text":"Bash<pre><code># Navigate to staging environment\ncd ../staging\n\n# Initialize Terraform\nterraform init\n\n# Plan the deployment\nterraform plan\n\n# Apply the configuration\nterraform apply\n</code></pre>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-31-production-keskkonna-juurutamine","title":"\u00dclesanne 3.1: Production keskkonna juurutamine","text":"Bash<pre><code># Navigate to production environment\ncd ../prod\n\n# Initialize Terraform\nterraform init\n\n# Plan the deployment\nterraform plan\n\n# Apply the configuration\nterraform apply\n</code></pre>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-41-tulemuste-kontrollimine","title":"\u00dclesanne 4.1: Tulemuste kontrollimine","text":"<p>Kontrollige loodud ressursse:</p> Bash<pre><code># Check development environment\ncd ../dev\nterraform output\n\n# Check staging environment\ncd ../staging\nterraform output\n\n# Check production environment\ncd ../prod\nterraform output\n</code></pre> <p>Testige web rakendusi:</p> Bash<pre><code># Get public IPs\nterraform output instance_public_ips\n\n# Test web application\ncurl http://&lt;public-ip&gt;\n</code></pre>"},{"location":"terraform_basics/homework_aws_backup/#ulesanne-8-dokumentatsioon-ja-cleanup","title":"\u00dclesanne 8: Dokumentatsioon ja cleanup ()","text":""},{"location":"terraform_basics/homework_aws_backup/#ulesanne-11-readme-faili-loomine","title":"\u00dclesanne 1.1: README faili loomine","text":"<p>Looge <code>README.md</code>:</p> Markdown<pre><code># Kodut\u00f6\u00f6: Multi-Environment Terraform Infrastructure\n\n## \u00dclevaade\n\nSee projekt demonstreerib, kuidas kasutada Terraform'i multi-environment infrastruktuuri haldamiseks web rakenduse jaoks.\n\n## Arhitektuur\n\nInfrastruktuur sisaldab:\n- **V\u00f5rk**: VPC, subnets, security groups\n- **Arvutus**: EC2 instances v\u00f5i Auto Scaling Groups\n- **Andmebaas**: RDS PostgreSQL instances\n- **Salvestamine**: S3 buckets logide jaoks\n\n## Keskkonnad\n\n- **Development**: \u00dcks instance,imaalsed ressursid\n- **Staging**: \u00dcks instance, keskmised ressursid\n- **Production**: Auto Scaling Group, k\u00f5rge k\u00e4ttesaadavus\n\n## Kasutamine\n\n### Eeltingimused\n\n- Terraform &gt;= 1.0\n- AWS CLI seadistatud\n- Sobivad AWS \u00f5igused\n\n### Juurutamine\n\n1. **Development keskkond:**\n   ```bash\n   cd environments/dev\n   terraform init\n   terraform plan\n   terraform apply\n   ```\n\n2. **Staging keskkond:**\n   ```bash\n   cd environments/staging\n   terraform init\n   terraform plan\n   terraform apply\n   ```\n\n3. **Production keskkond:**\n   ```bash\n   cd environments/prod\n   terraform init\n   terraform plan\n   terraform apply\n   ```\n\n### Puhastamine\n\nK\u00f5ikide ressursside kustutamiseks:\n```bash\nterraform destroy\n</code></pre>"},{"location":"terraform_basics/homework_aws_backup/#projekti-struktuur","title":"Projekti struktuur","text":"Text Only<pre><code>terraform-basics-homework/\n\u251c\u2500\u2500 environments/          # Keskkonna-spetsiifilised konfiguratsioonid\n\u251c\u2500\u2500 modules/              # Taaskasutatavad Terraform moodulid\n\u251c\u2500\u2500 shared/               # Jagatud provider konfiguratsioon\n\u2514\u2500\u2500 README.md            # See fail\n</code></pre>"},{"location":"terraform_basics/homework_aws_backup/#turvalisuse-markused","title":"Turvalisuse m\u00e4rkused","text":"<ul> <li>Andmebaasi paroolid on salvestatud muutujatena (kasutage AWS Secrets Manager production'is)</li> <li>Security groups on seadistatud p\u00f5hiliseks web juurdep\u00e4\u00e4suks</li> <li>S3 buckets on avalik juurdep\u00e4\u00e4s blokeeritud</li> <li>Production keskkonnal on kustutamise kaitse lubatud</li> </ul>"},{"location":"terraform_basics/homework_aws_backup/#kulude-optimeerimine","title":"Kulude optimeerimine","text":"<ul> <li>Development ja staging kasutavad v\u00e4iksemaid instance t\u00fc\u00fcpe</li> <li>Auto scaling on lubatud ainult production'is</li> <li>S3 lifecycle policies on seadistatud kulude optimeerimiseks Text Only<pre><code>### \u00dclesanne 2.1: Ressursside kustutamine\n\n```bash\n# Destroy production environment\ncd environments/prod\nterraform destroy\n\n# Destroy staging environment\ncd ../staging\nterraform destroy\n\n# Destroy development environment\ncd ../dev\nterraform destroy\n</code></pre></li> </ul>"},{"location":"terraform_basics/homework_aws_backup/#lisaressursid","title":"Lisaressursid","text":"<ul> <li>Terraform AWS Provider: https://registry.terraform.io/providers/hashicorp/aws/latest/docs</li> <li>Terraform Modules: https://www.terraform.io/docs/language/modules</li> <li>AWS Best Practices: https://docs.aws.amazon.com/wellarchitected/latest/framework/</li> <li>Terraform State Management: https://www.terraform.io/docs/language/state</li> </ul>"},{"location":"terraform_basics/homework_aws_backup/#kusimused-ja-abi","title":"\ud83e\udd14 K\u00fcsimused ja abi","text":"<p>Kui teil on k\u00fcsimusi v\u00f5i probleeme:</p> <ol> <li>Kontrollige dokumentatsiooni - Terraform ja AWS dokumentatsioon</li> <li>Vaadake n\u00e4iteid - Terraform registry ja GitHub</li> <li>Debugige sammud - kasutage <code>terraform plan</code> ja <code>terraform validate</code></li> <li>K\u00fcsige abi - \u00f5petajalt v\u00f5i klassikaaslastelt</li> </ol> <p>Edu kodut\u00f6\u00f6ga! \ud83d\ude80</p>"},{"location":"terraform_basics/lab/","title":"Terraform Basics Labor","text":"<p>Eesm\u00e4rk: Praktiliselt \u00f5ppida Terraform'i kasutamist ja luua infrastruktuuri koodi abil</p>"},{"location":"terraform_basics/lab/#1-ettevalmistus-ja-installatsioon","title":"1. Ettevalmistus ja Installatsioon","text":""},{"location":"terraform_basics/lab/#11-terraformi-installeerimine","title":"1.1 Terraform'i Installeerimine","text":"<p>Valige oma operatsioonis\u00fcsteem ja installige Terraform:</p> <p>macOS: Bash<pre><code>brew install terraform\n</code></pre></p> <p>Linux (Ubuntu/Debian): Bash<pre><code>wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg\necho \"deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/hashicorp.list\nsudo apt update &amp;&amp; sudo apt install terraform\n</code></pre></p> <p>Windows: PowerShell<pre><code>choco install terraform\n</code></pre></p> <p>Kontrollige installatsiooni: Bash<pre><code>terraform version\n</code></pre></p>"},{"location":"terraform_basics/lab/#12-projekti-struktuuri-loomine","title":"1.2 Projekti Struktuuri Loomine","text":"Bash<pre><code>mkdir terraform-lab\ncd terraform-lab\nmkdir -p {config,scripts,templates}\n</code></pre> <p>Kontrollpunkt: <code>terraform version</code> n\u00e4itab versiooni numbrit.</p>"},{"location":"terraform_basics/lab/#2-esimene-terraform-projekt","title":"2. Esimene Terraform Projekt","text":""},{"location":"terraform_basics/lab/#21-pohilise-konfiguratsiooni-loomine","title":"2.1 P\u00f5hilise Konfiguratsiooni Loomine","text":"<p>Looge fail <code>main.tf</code>:</p> Terraform<pre><code>terraform {\n  required_providers {\n    local = {\n      source  = \"hashicorp/local\"\n      version = \"~&gt; 2.0\"\n    }\n  }\n}\n\n# Loo lihtne tekstifail\nresource \"local_file\" \"welcome\" {\n  content  = \"Tere tulemast Terraform'i maailma!\"\n  filename = \"${path.module}/welcome.txt\"\n}\n\n# Loo konfiguratsioonikaust\nresource \"local_file\" \"config_dir\" {\n  content  = \"\"\n  filename = \"${path.module}/config/.gitkeep\"\n}\n</code></pre>"},{"location":"terraform_basics/lab/#22-terraform-workflow","title":"2.2 Terraform Workflow","text":"<p>1. Projekti initsialiseerimine: Bash<pre><code>terraform init\n</code></pre></p> <p>Terraform laadib alla vajalikud provider'id ja seadistab t\u00f6\u00f6keskkonna.</p> <p>2. Muudatuste planeerimine: Bash<pre><code>terraform plan\n</code></pre></p> <p>Terraform n\u00e4itab, mida kavatseb teha. Lugege v\u00e4ljund l\u00e4bi ja veenduge, et see vastab ootustele.</p> <p>3. Muudatuste rakendamine: Bash<pre><code>terraform apply\n</code></pre></p> <p>Terraform k\u00fcsib kinnitust. Sisestage <code>yes</code> j\u00e4tkamiseks.</p>"},{"location":"terraform_basics/lab/#23-tulemuste-kontrollimine","title":"2.3 Tulemuste Kontrollimine","text":"Bash<pre><code># Kontrollige loodud faile\nls -la\ncat welcome.txt\n\n# Vaadake Terraform state'i\nterraform show\nterraform state list\n</code></pre> <p>Kontrollpunkt: Kaust sisaldab faile <code>welcome.txt</code>, <code>terraform.tfstate</code> ja <code>.terraform</code> kataloogi.</p>"},{"location":"terraform_basics/lab/#3-muutujad-ja-valjundid","title":"3. Muutujad ja V\u00e4ljundid","text":""},{"location":"terraform_basics/lab/#31-muutujate-defineerimine","title":"3.1 Muutujate Defineerimine","text":"<p>Looge fail <code>variables.tf</code>:</p> Terraform<pre><code>variable \"project_name\" {\n  description = \"Projekti nimi\"\n  type        = string\n  default     = \"terraform-lab\"\n}\n\nvariable \"environment\" {\n  description = \"Keskkond (dev, test, prod)\"\n  type        = string\n  default     = \"dev\"\n\n  validation {\n    condition     = contains([\"dev\", \"test\", \"prod\"], var.environment)\n    error_message = \"Keskkond peab olema dev, test v\u00f5i prod.\"\n  }\n}\n\nvariable \"file_count\" {\n  description = \"Loodavate failide arv\"\n  type        = number\n  default     = 3\n\n  validation {\n    condition     = var.file_count &gt; 0 &amp;&amp; var.file_count &lt;= 10\n    error_message = \"Failide arv peab olema vahemikus 1-10.\"\n  }\n}\n\nvariable \"enable_backup\" {\n  description = \"Kas luua varukoopiafailid\"\n  type        = bool\n  default     = false\n}\n</code></pre>"},{"location":"terraform_basics/lab/#32-valjundite-defineerimine","title":"3.2 V\u00e4ljundite Defineerimine","text":"<p>Looge fail <code>outputs.tf</code>:</p> Terraform<pre><code>output \"project_info\" {\n  description = \"Projekti \u00fcldinfo\"\n  value = {\n    name        = var.project_name\n    environment = var.environment\n    file_count  = var.file_count\n    created_at  = timestamp()\n  }\n}\n\noutput \"created_files\" {\n  description = \"Loodud failide nimekiri\"\n  value       = local_file.examples[*].filename\n}\n\noutput \"config_summary\" {\n  description = \"Konfiguratsiooni kokkuv\u00f5te\"\n  value       = \"Projekt '${var.project_name}' ${var.environment} keskkonnas, ${var.file_count} faili loodud\"\n}\n</code></pre>"},{"location":"terraform_basics/lab/#33-maintf-uuendamine","title":"3.3 Main.tf Uuendamine","text":"<p>Uuendage <code>main.tf</code> faili:</p> Terraform<pre><code>terraform {\n  required_providers {\n    local = {\n      source  = \"hashicorp/local\"\n      version = \"~&gt; 2.0\"\n    }\n  }\n}\n\n# Locals plokk arvutatud v\u00e4\u00e4rtuste jaoks\nlocals {\n  timestamp = formatdate(\"YYYY-MM-DD-hhmm\", timestamp())\n  file_prefix = \"${var.project_name}-${var.environment}\"\n}\n\n# Loo mitu faili kasutades count\nresource \"local_file\" \"examples\" {\n  count = var.file_count\n\n  content = templatefile(\"${path.module}/templates/file_template.txt\", {\n    file_number  = count.index + 1\n    project_name = var.project_name\n    environment  = var.environment\n    timestamp    = local.timestamp\n  })\n\n  filename = \"${path.module}/${local.file_prefix}-${count.index + 1}.txt\"\n}\n\n# Konfiguratsioonifail JSON formaadis\nresource \"local_file\" \"config\" {\n  content = jsonencode({\n    project = {\n      name        = var.project_name\n      environment = var.environment\n      created_at  = local.timestamp\n    }\n    settings = {\n      file_count     = var.file_count\n      backup_enabled = var.enable_backup\n    }\n    metadata = {\n      terraform_version = terraform.version\n      created_by       = \"Terraform Lab\"\n    }\n  })\n\n  filename = \"${path.module}/config/project.json\"\n}\n\n# Tinglik ressurss - luuakse ainult kui backup on lubatud\nresource \"local_file\" \"backup_config\" {\n  count = var.enable_backup ? 1 : 0\n\n  content  = \"Backup configuration for ${var.project_name}\"\n  filename = \"${path.module}/config/backup.conf\"\n}\n</code></pre>"},{"location":"terraform_basics/lab/#34-template-faili-loomine","title":"3.4 Template Faili Loomine","text":"<p>Looge fail <code>templates/file_template.txt</code>:</p> Text Only<pre><code>==================================================\nTERRAFORM LAB FAIL #${file_number}\n==================================================\n\nProjekt: ${project_name}\nKeskkond: ${environment}\nFaili number: ${file_number}\nLoodud: ${timestamp}\n\nSee fail loodi Terraform'i abil automaatselt.\nTerraform on Infrastructure as Code t\u00f6\u00f6riist.\n\n--------------------------------------------------\nTerraform Lab - IT-s\u00fcsteemide automatiseerimine\n==================================================\n</code></pre>"},{"location":"terraform_basics/lab/#35-uue-konfiguratsiooni-rakendamine","title":"3.5 Uue Konfiguratsiooni Rakendamine","text":"Bash<pre><code># Planeeri muudatused\nterraform plan\n\n# Rakenda muudatused\nterraform apply\n\n# Vaata v\u00e4ljundeid\nterraform output\n\n# Vaata konkreetset v\u00e4ljundit\nterraform output project_info\n</code></pre> <p>Kontrollpunkt: N\u00e4ete loodud faile ja v\u00e4ljundeid, mis kasutavad muutujaid.</p>"},{"location":"terraform_basics/lab/#4-tapsemad-funktsioonid","title":"4. T\u00e4psemad Funktsioonid","text":""},{"location":"terraform_basics/lab/#41-data-sourceide-kasutamine","title":"4.1 Data Source'ide Kasutamine","text":"<p>Lisage <code>main.tf</code> faili:</p> Terraform<pre><code># Loe olemasoleva faili sisu\ndata \"local_file\" \"existing_config\" {\n  filename = \"${path.module}/config/project.json\"\n  depends_on = [local_file.config]\n}\n\n# Loo kokkuv\u00f5ttefail data source'i p\u00f5hjal\nresource \"local_file\" \"summary\" {\n  content = templatefile(\"${path.module}/templates/summary.txt\", {\n    config_content = data.local_file.existing_config.content\n    total_files    = length(local_file.examples)\n    project_name   = var.project_name\n  })\n\n  filename = \"${path.module}/project_summary.txt\"\n}\n</code></pre> <p>Looge fail <code>templates/summary.txt</code>:</p> Text Only<pre><code>PROJEKTI KOKKUV\u00d5TE\n==================\n\nProjekti nimi: ${project_name}\nLoodud failide arv: ${total_files}\n\nKonfiguratsiooni sisu:\n${config_content}\n\nKokkuv\u00f5te genereeritud: ${timestamp()}\n</code></pre>"},{"location":"terraform_basics/lab/#42-for_each-kasutamine","title":"4.2 For_each Kasutamine","text":"<p>Lisage <code>main.tf</code> faili erinevat t\u00fc\u00fcpi failide loomiseks:</p> Terraform<pre><code># Teenuste konfiguratsioonid\nlocals {\n  services = {\n    web = {\n      port = 8080\n      replicas = var.environment == \"prod\" ? 3 : 1\n    }\n    api = {\n      port = 3000\n      replicas = 2\n    }\n    database = {\n      port = 5432\n      replicas = 1\n    }\n  }\n}\n\n# Loo konfiguratsioonifail iga teenuse jaoks\nresource \"local_file\" \"service_configs\" {\n  for_each = local.services\n\n  content = templatefile(\"${path.module}/templates/service.conf\", {\n    service_name = each.key\n    port         = each.value.port\n    replicas     = each.value.replicas\n    environment  = var.environment\n  })\n\n  filename = \"${path.module}/config/${each.key}-service.conf\"\n}\n</code></pre> <p>Looge fail <code>templates/service.conf</code>:</p> Text Only<pre><code># ${service_name} teenuse konfiguratsioon\n# Keskkond: ${environment}\n\n[service]\nname = ${service_name}\nport = ${port}\nreplicas = ${replicas}\nenvironment = ${environment}\n\n[health]\ncheck_interval = 30s\ntimeout = 5s\n\n[logging]\nlevel = ${environment == \"prod\" ? \"info\" : \"debug\"}\n</code></pre>"},{"location":"terraform_basics/lab/#43-lifecycle-rules","title":"4.3 Lifecycle Rules","text":"<p>Lisage faili, mis on kaitstud tahtmatu kustutamise eest:</p> Terraform<pre><code>resource \"local_file\" \"important_data\" {\n  content = jsonencode({\n    critical_info = \"See on oluline konfiguratsioon\"\n    created_at    = timestamp()\n    protected     = true\n  })\n\n  filename = \"${path.module}/config/critical.json\"\n\n  lifecycle {\n    prevent_destroy = true\n    ignore_changes  = [content]\n  }\n}\n</code></pre>"},{"location":"terraform_basics/lab/#44-muudatuste-rakendamine","title":"4.4 Muudatuste Rakendamine","text":"Bash<pre><code>terraform plan\nterraform apply\n\n# Kontrollige loodud faile\nls -la config/\ncat project_summary.txt\n</code></pre> <p>Kontrollpunkt: N\u00e4ete erinevat t\u00fc\u00fcpi konfiguratsioone ja template'e.</p>"},{"location":"terraform_basics/lab/#5-keskkonnapohine-konfiguratsioon","title":"5. Keskkonnap\u00f5hine Konfiguratsioon","text":""},{"location":"terraform_basics/lab/#51-terraform-variable-failide-loomine","title":"5.1 Terraform Variable Failide Loomine","text":"<p>Looge erinevate keskkondade jaoks muutujate failid:</p> <p><code>dev.tfvars</code>: Terraform<pre><code>project_name = \"my-terraform-project\"\nenvironment  = \"dev\"\nfile_count   = 2\nenable_backup = false\n</code></pre></p> <p><code>prod.tfvars</code>: Terraform<pre><code>project_name = \"my-terraform-project\"\nenvironment  = \"prod\"\nfile_count   = 5\nenable_backup = true\n</code></pre></p>"},{"location":"terraform_basics/lab/#52-erinevate-keskkondade-testimine","title":"5.2 Erinevate Keskkondade Testimine","text":"Bash<pre><code># Testi development konfiguratsiooni\nterraform plan -var-file=\"dev.tfvars\"\n\n# Rakenda development konfiguratsioon\nterraform apply -var-file=\"dev.tfvars\"\n\n# Kustuta ressursid\nterraform destroy\n\n# Testi production konfiguratsiooni\nterraform plan -var-file=\"prod.tfvars\"\nterraform apply -var-file=\"prod.tfvars\"\n</code></pre>"},{"location":"terraform_basics/lab/#53-workspaceide-kasutamine","title":"5.3 Workspace'ide Kasutamine","text":"Bash<pre><code># Loo uued workspace'd\nterraform workspace new development\nterraform workspace new production\n\n# L\u00fclitu development workspace'i\nterraform workspace select development\nterraform apply -var-file=\"dev.tfvars\"\n\n# L\u00fclitu production workspace'i\nterraform workspace select production\nterraform apply -var-file=\"prod.tfvars\"\n\n# Vaata workspace'e\nterraform workspace list\n</code></pre> <p>Kontrollpunkt: Erinevates workspace'ides on erinevad failid ja konfiguratsioonid.</p>"},{"location":"terraform_basics/lab/#6-state-management-ja-troubleshooting","title":"6. State Management ja Troubleshooting","text":""},{"location":"terraform_basics/lab/#61-statei-haldamine","title":"6.1 State'i Haldamine","text":"Bash<pre><code># Vaata k\u00f5iki ressursse state'is\nterraform state list\n\n# Vaata konkreetse ressursi detaile\nterraform state show local_file.config\n\n# Liiguta ressurss state'is\nterraform state mv local_file.examples[0] local_file.renamed_file\n\n# Eemalda ressurss state'ist (ei kustuta tegelikku faili)\nterraform state rm local_file.backup_config[0]\n\n# Impordi olemasolev fail state'i\nterraform import local_file.imported_file welcome.txt\n</code></pre>"},{"location":"terraform_basics/lab/#62-torkeotsing","title":"6.2 T\u00f5rkeotsing","text":"<p>State'i probleemide lahendamine: Bash<pre><code># V\u00e4rskenda state olukordadega\nterraform refresh\n\n# Kontrolli state'i terviklikkust\nterraform validate\n\n# Formateeri kood\nterraform fmt\n</code></pre></p> <p>Logide vaatamine: Bash<pre><code># Detailne v\u00e4ljund\nTF_LOG=DEBUG terraform apply\n\n# Salvestage logid faili\nTF_LOG=INFO TF_LOG_PATH=terraform.log terraform apply\n</code></pre></p>"},{"location":"terraform_basics/lab/#63-statei-backup-ja-taastamine","title":"6.3 State'i Backup ja Taastamine","text":"Bash<pre><code># Tee state'i koopia\ncp terraform.tfstate terraform.tfstate.backup\n\n# Kui state on katki, taasta varukoopia\ncp terraform.tfstate.backup terraform.tfstate\n</code></pre> <p>Kontrollpunkt: Oskate hallata state'i ja lahendada tavalisi probleeme.</p>"},{"location":"terraform_basics/lab/#7-cleanup-ja-kokkuvote","title":"7. Cleanup ja Kokkuv\u00f5te","text":""},{"location":"terraform_basics/lab/#71-ressursside-kustutamine","title":"7.1 Ressursside Kustutamine","text":"Bash<pre><code># Kustuta k\u00f5ik workspace'i ressursid\nterraform destroy\n\n# L\u00fclitu teise workspace'i ja kustuta sealsed ressursid\nterraform workspace select development\nterraform destroy\n\nterraform workspace select production  \nterraform destroy\n\n# Kustuta workspace'd\nterraform workspace select default\nterraform workspace delete development\nterraform workspace delete production\n</code></pre>"},{"location":"terraform_basics/lab/#72-projekti-puhastamine","title":"7.2 Projekti Puhastamine","text":"Bash<pre><code># Kustuta k\u00f5ik loodud failid (valikuline)\nrm -f *.txt *.json\nrm -rf config/ .terraform/\nrm -f terraform.tfstate*\n</code></pre>"},{"location":"terraform_basics/lab/#labor-kokkuvote","title":"Labor Kokkuv\u00f5te","text":"<p>Mida \u00f5ppisite:</p> <ol> <li>Terraform'i installeerimine ja seadistamine - t\u00f6\u00f6keskkonna ettevalmistamine</li> <li>P\u00f5hiline Terraform workflow - init, plan, apply, destroy</li> <li>HCL s\u00fcntaksi kasutamine - muutujad, ressursid, v\u00e4ljundid</li> <li>Template'id ja funktsioonid - d\u00fcnaamiline sisu genereerimine</li> <li>Keskkonnap\u00f5hine konfiguratsioon - erinevad seadistused erinevateks keskkondadeks</li> <li>State management - infrastruktuuri oleku j\u00e4lgimine</li> <li>T\u00f5rkeotsimine - probleemide tuvastamine ja lahendamine</li> </ol> <p>J\u00e4rgmised sammud: - Uurige cloud provider'eid (AWS, Azure, GCP) - \u00d5ppige Terraform module'eid - Tutvuge CI/CD integratsiooniga - Uurige Terraform Cloud'i</p> <p>Praktilised oskused: - Infrastruktuuri kirjeldamine koodina - Versioonihaldus infrastruktuuri jaoks - Automatiseeritud ja korduvkasutatav deploy - Keskkondade vaheliste erinevuste haldamine</p>"},{"location":"terraform_basics/lab/#viited-ja-dokumentatsioon","title":"Viited ja Dokumentatsioon","text":"<ul> <li>Terraform Official Documentation - t\u00e4ielik dokumentatsioon</li> <li>Local Provider Documentation - local provider'i dokumentatsioon</li> <li>HCL Language Reference - HCL keele k\u00e4siraamat</li> <li>Terraform CLI Commands - k\u00e4surea liidese juhend</li> <li>Terraform Best Practices - parimad praktikad</li> </ul>"},{"location":"terraform_basics/lecture/","title":"Terraform Basics: Infrastructure as Code","text":"<p>Eesm\u00e4rk: M\u00f5ista Infrastructure as Code kontseptsiooni ja \u00f5ppida Terraform'i p\u00f5hialused</p>"},{"location":"terraform_basics/lecture/#sissejuhatus-miks-me-vajame-infrastructure-as-code","title":"Sissejuhatus - Miks me vajame Infrastructure as Code?","text":"<p>Tere tulemast infrastruktuuri maailma! Eelmisel n\u00e4dalal \u00f5ppisime Kubernetes'i - kuidas orkesteerida konteinereid. T\u00e4na astume j\u00e4rgmisele tasemele ja vaatame, kuidas hallata kogu infrastruktuuri koodi abil.</p> <p>Kujutage ette stsenaariumi: teil on vaja seadistada uus arenduskeskkond. Traditsioonilise l\u00e4henemisega t\u00e4hendaks see:</p> <p>Traditsiooniline l\u00e4henemine: - K\u00e4sitsi serverite tellimine - K\u00e4sitsi operatsioonis\u00fcsteemi installeerimine - K\u00e4sitsi tarkvara seadistamine - K\u00e4sitsi v\u00f5rgu konfigureerimine - K\u00e4sitsi turvaseadete rakendamine</p> <p>Iga samm v\u00f5tab aega, on altid vigadele ja raske korrata. Mis juhtub, kui peate seadistama teise keskkonna? V\u00f5i kolmanda?</p> <pre><code>graph TB\n    subgraph \"Traditsiooniline L\u00e4henemine\"\n        A[K\u00e4sitsi serverite tellimine] --&gt; B[K\u00e4sitsi OS installeerimine]\n        B --&gt; C[K\u00e4sitsi tarkvara paigaldamine]\n        C --&gt; D[K\u00e4sitsi v\u00f5rgu seadistamine]\n        D --&gt; E[K\u00e4sitsi turvaseadete rakendamine]\n        E --&gt; F[Aeglane ja vigadealane protsess]\n    end\n\n    subgraph \"Infrastructure as Code\"\n        G[Kirjuta kood] --&gt; H[K\u00e4ivita terraform apply]\n        H --&gt; I[Automatiseeritud loomine]\n        I --&gt; J[Konsistentne ja kiire]\n    end\n\n    style F fill:#ffcccc\n    style J fill:#ccffcc</code></pre> <p>Infrastructure as Code muudab m\u00e4ngu: - Kirjutate koodi, mis kirjeldab soovitud infrastruktuuri - K\u00e4ivitate k\u00e4su, mis loob selle teie eest - Sama kood t\u00f6\u00f6tab igal kord - Versioonihaldusse saab panna - Saab testida ja \u00fcle vaadata</p>"},{"location":"terraform_basics/lecture/#mis-on-infrastructure-as-code","title":"Mis on Infrastructure as Code?","text":"<p>Infrastructure as Code (IaC) t\u00e4hendab infrastruktuuri kirjeldamist ja haldamist koodi abil, mitte k\u00e4sitsi konfiguratsioonide kaudu.</p> <p>M\u00f5elge sellele nagu retseptile: - Traditsiooniline: \"\u00dctlen sulle, kuidas kooki teha\" - IaC: \"Siin on retsept, j\u00e4rgi seda\"</p> <p>IaC eelised: - Konsistentsus - sama tulemus iga kord - Kiirus - automatiseeritud protsess - Dokumentatsioon - kood ise on dokumentatsioon - Versioonihaldus - saab kasutada Git'i - Testimine - saab testida enne rakendamist</p>"},{"location":"terraform_basics/lecture/#1-terraform-sissejuhatus","title":"1. Terraform Sissejuhatus","text":""},{"location":"terraform_basics/lecture/#mis-on-terraform","title":"Mis on Terraform?","text":"<p>Terraform on HashiCorp'i loodud Infrastructure as Code t\u00f6\u00f6riist. See v\u00f5imaldab teil kirjeldada infrastruktuuri deklaratiivses keeles nimega HCL (HashiCorp Configuration Language).</p> <p>Terraform vs teised t\u00f6\u00f6riistad:</p> T\u00f6\u00f6riist L\u00e4henemine Keeled Tugevused Terraform Deklaratiivne HCL Multi-cloud, rikas \u00f6kos\u00fcsteem Ansible Protseduuriline YAML Lihtne \u00f5ppida, agentless Pulumi Imperatiivne Python, Go, etc Programmeerimiskeelte v\u00f5imsus <p>Miks Terraform? - Multi-provider - t\u00f6\u00f6tab AWS, Azure, Google Cloud, kohalikult - Deklaratiivne - kirjeldate mida tahate, mitte kuidas - State management - teab, mis on juba olemas - Plan and apply - n\u00e4itab ette, mida teeb</p>"},{"location":"terraform_basics/lecture/#terraform-workflow","title":"Terraform Workflow","text":"<pre><code>graph LR\n    A[Write] --&gt; B[Plan] --&gt; C[Apply] --&gt; D[Manage]\n\n    A -.-&gt; A1[.tf failid]\n    B -.-&gt; B1[terraform plan]\n    C -.-&gt; C1[terraform apply]\n    D -.-&gt; D1[terraform destroy]\n\n    style A fill:#e1f5fe\n    style B fill:#fff3e0\n    style C fill:#e8f5e8\n    style D fill:#fce4ec</code></pre> <p>1. Write - kirjutate HCL konfiguratsioonifailid 2. Plan - Terraform n\u00e4itab, mida kavatseb teha 3. Apply - Terraform teeb muudatused 4. Manage - Terraform j\u00e4lgib ja haldab ressursse</p>"},{"location":"terraform_basics/lecture/#2-hcl-keel-ja-suntaks","title":"2. HCL Keel ja S\u00fcntaks","text":""},{"location":"terraform_basics/lecture/#hashicorp-configuration-language","title":"HashiCorp Configuration Language","text":"<p>HCL on spetsiaalselt infrastruktuuri kirjeldamiseks loodud keel. See on JSON-i sarnane, kuid loetavam ja v\u00f5imsam.</p>"},{"location":"terraform_basics/lecture/#pohilised-hcl-blokid","title":"P\u00f5hilised HCL Blokid","text":"<p>Resource Block - ressursi definitsioon:</p> Terraform<pre><code>resource \"local_file\" \"example\" {\n  content  = \"Hello, Terraform!\"\n  filename = \"hello.txt\"\n}\n</code></pre> <p>See loob kohaliku faili nimega \"hello.txt\" sisuga \"Hello, Terraform!\".</p> <p>Variable Block - muutujad:</p> Terraform<pre><code>variable \"file_name\" {\n  description = \"Name of the file to create\"\n  type        = string\n  default     = \"hello.txt\"\n}\n\nvariable \"environment\" {\n  description = \"Environment name\"\n  type        = string\n  validation {\n    condition     = contains([\"dev\", \"staging\", \"prod\"], var.environment)\n    error_message = \"Environment must be dev, staging, or prod.\"\n  }\n}\n</code></pre> <p>Output Block - v\u00e4ljundid:</p> Terraform<pre><code>output \"file_path\" {\n  description = \"Path to the created file\"\n  value       = local_file.example.filename\n}\n</code></pre> <p>Data Source - andmete lugemine:</p> Terraform<pre><code>data \"local_file\" \"config\" {\n  filename = \"config.txt\"\n}\n\n# Kasutamine\nresource \"local_file\" \"processed\" {\n  content  = \"Processed: ${data.local_file.config.content}\"\n  filename = \"processed.txt\"\n}\n</code></pre>"},{"location":"terraform_basics/lecture/#andmetuubid-ja-funktsioonid","title":"Andmet\u00fc\u00fcbid ja Funktsioonid","text":"<p>Andmet\u00fc\u00fcbid:</p> Terraform<pre><code># String\nvariable \"name\" {\n  type    = string\n  default = \"my-server\"\n}\n\n# Number\nvariable \"port\" {\n  type    = number\n  default = 80\n}\n\n# Boolean\nvariable \"enable_ssl\" {\n  type    = bool\n  default = true\n}\n\n# List\nvariable \"allowed_ports\" {\n  type    = list(number)\n  default = [80, 443, 22]\n}\n\n# Map\nvariable \"tags\" {\n  type = map(string)\n  default = {\n    Environment = \"dev\"\n    Project     = \"web-app\"\n  }\n}\n</code></pre> <p>Funktsioonid ja avaldised:</p> Terraform<pre><code>locals {\n  # String interpolation\n  full_name = \"${var.project_name}-${var.environment}\"\n\n  # Conditional expression\n  instance_type = var.environment == \"prod\" ? \"large\" : \"small\"\n\n  # Functions\n  config_json = jsonencode({\n    name = var.project_name\n    ports = var.allowed_ports\n  })\n}\n</code></pre>"},{"location":"terraform_basics/lecture/#3-providers-ja-ressursid","title":"3. Providers ja Ressursid","text":""},{"location":"terraform_basics/lecture/#mis-on-provider","title":"Mis on Provider?","text":"<p>Provider on plugin, mis v\u00f5imaldab Terraform'il suhelda erinevate teenustega. M\u00f5elge sellele kui \"t\u00f5lkijale\" - see t\u00f5lgib Terraform'i k\u00e4sud konkreetse teenuse API k\u00f5nedeks.</p> <p>Provider konfiguratsioon:</p> Terraform<pre><code>terraform {\n  required_providers {\n    local = {\n      source  = \"hashicorp/local\"\n      version = \"~&gt; 2.0\"\n    }\n  }\n}\n</code></pre>"},{"location":"terraform_basics/lecture/#local-provider-naited","title":"Local Provider N\u00e4ited","text":"<p>Alustame kohaliku provider'iga, mis ei vaja cloud'i:</p> <p>Lihtsa faili loomine:</p> Terraform<pre><code>resource \"local_file\" \"web_config\" {\n  content  = \"Server configuration for web application\"\n  filename = \"${path.module}/config/web.conf\"\n}\n</code></pre> <p>Kataloogi loomine:</p> Terraform<pre><code>resource \"local_file\" \"logs_dir\" {\n  content  = \"\"\n  filename = \"${path.module}/logs/.gitkeep\"\n}\n</code></pre> <p>Konfiguratsioonifaili loomine JSON'iga:</p> Terraform<pre><code>resource \"local_file\" \"app_config\" {\n  content = jsonencode({\n    app_name = \"my-web-app\"\n    version  = \"1.0.0\"\n    database = {\n      host = \"localhost\"\n      port = 5432\n      name = \"myapp\"\n    }\n    features = {\n      ssl_enabled     = true\n      debug_mode      = false\n      max_connections = 100\n    }\n  })\n  filename = \"${path.module}/config/app.json\"\n}\n</code></pre> <p>Template'ide kasutamine:</p> Terraform<pre><code>resource \"local_file\" \"nginx_config\" {\n  content = templatefile(\"${path.module}/templates/nginx.conf.tpl\", {\n    server_name = var.server_name\n    port        = var.port\n    ssl_enabled = var.ssl_enabled\n  })\n  filename = \"${path.module}/config/nginx.conf\"\n}\n</code></pre>"},{"location":"terraform_basics/lecture/#ressursside-soltuvused","title":"Ressursside S\u00f5ltuvused","text":"<p>Automaatsed s\u00f5ltuvused:</p> Terraform<pre><code>resource \"local_file\" \"database_config\" {\n  content = jsonencode({\n    host = \"db.example.com\"\n    port = 5432\n  })\n  filename = \"${path.module}/config/database.json\"\n}\n\nresource \"local_file\" \"app_config\" {\n  content = templatefile(\"${path.module}/templates/app.conf.tpl\", {\n    database_config = local_file.database_config.filename\n  })\n  filename = \"${path.module}/config/app.conf\"\n}\n</code></pre> <p>Explicit s\u00f5ltuvused:</p> Terraform<pre><code>resource \"local_file\" \"readme\" {\n  content  = \"Application documentation\"\n  filename = \"${path.module}/README.md\"\n\n  depends_on = [\n    local_file.app_config,\n    local_file.database_config\n  ]\n}\n</code></pre>"},{"location":"terraform_basics/lecture/#lifecycle-rules","title":"Lifecycle Rules","text":"Terraform<pre><code>resource \"local_file\" \"important_config\" {\n  content  = var.config_content\n  filename = \"${path.module}/config/important.conf\"\n\n  lifecycle {\n    prevent_destroy = true\n    ignore_changes  = [content]\n    create_before_destroy = true\n  }\n}\n</code></pre>"},{"location":"terraform_basics/lecture/#4-state-management","title":"4. State Management","text":""},{"location":"terraform_basics/lecture/#mis-on-terraform-state","title":"Mis on Terraform State?","text":"<p>Terraform state on andmebaas, mis sisaldab teavet teie infrastruktuuri kohta. See on Terraform'i \"m\u00e4lu\" - kuidas ta teab, mis ressursid on olemas ja kuidas neid hallata.</p> <pre><code>graph TB\n    subgraph \"Terraform State Workflow\"\n        A[Terraform Configuration] --&gt; B[terraform plan]\n        B --&gt; C[Compare with State]\n        C --&gt; D[Create Plan]\n        D --&gt; E[terraform apply]\n        E --&gt; F[Update State]\n        F --&gt; G[Real Infrastructure]\n    end\n\n    H[terraform.tfstate] -.-&gt; C\n    F -.-&gt; H\n\n    style H fill:#fff3e0\n    style G fill:#e8f5e8</code></pre> <p>State fail sisaldab: - Ressursside ID-d ja metaandmeid - S\u00f5ltuvuste graafi - Providerite informatsiooni - Ressursside praegust olekut</p> <p>State faili n\u00e4ide:</p> JSON<pre><code>{\n  \"version\": 4,\n  \"terraform_version\": \"1.6.0\",\n  \"resources\": [\n    {\n      \"mode\": \"managed\",\n      \"type\": \"local_file\",\n      \"name\": \"example\",\n      \"instances\": [\n        {\n          \"attributes\": {\n            \"content\": \"Hello, Terraform!\",\n            \"filename\": \"hello.txt\",\n            \"id\": \"4b5d1e7c8f9a2b3c\"\n          }\n        }\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"terraform_basics/lecture/#statei-parimad-praktikad","title":"State'i Parimad Praktikad","text":"<p>1. Remote State kasutamine:</p> Terraform<pre><code>terraform {\n  backend \"s3\" {\n    bucket = \"my-terraform-state\"\n    key    = \"web-app/terraform.tfstate\"\n    region = \"us-west-2\"\n  }\n}\n</code></pre> <p>2. State Locking:</p> Terraform<pre><code>terraform {\n  backend \"s3\" {\n    bucket         = \"my-terraform-state\"\n    key            = \"web-app/terraform.tfstate\"\n    region         = \"us-west-2\"\n    dynamodb_table = \"terraform-locks\"\n  }\n}\n</code></pre> <p>3. Sensitive andmete k\u00e4sitlemine:</p> Terraform<pre><code>variable \"database_password\" {\n  description = \"Database password\"\n  type        = string\n  sensitive   = true\n}\n\noutput \"database_password\" {\n  value     = var.database_password\n  sensitive = true\n}\n</code></pre>"},{"location":"terraform_basics/lecture/#statei-haldamise-kasud","title":"State'i Haldamise K\u00e4sud","text":"Bash<pre><code># State'i info vaatamine\nterraform state list\nterraform state show local_file.example\n\n# Ressursi liigutamine\nterraform state mv local_file.old local_file.new\n\n# Ressursi eemaldamine state'ist\nterraform state rm local_file.example\n\n# Olemasoleva ressursi import\nterraform import local_file.example hello.txt\n\n# State'i v\u00e4rskendamine\nterraform refresh\n</code></pre>"},{"location":"terraform_basics/lecture/#5-praktilised-naited","title":"5. Praktilised N\u00e4ited","text":""},{"location":"terraform_basics/lecture/#lihtne-web-rakenduse-infrastruktuur","title":"Lihtne Web Rakenduse Infrastruktuur","text":"<p>Loome kohaliku arenduskeskkonna failide struktuuri:</p> Terraform<pre><code># variables.tf\nvariable \"project_name\" {\n  description = \"Name of the project\"\n  type        = string\n  default     = \"web-app\"\n}\n\nvariable \"environment\" {\n  description = \"Environment (dev, staging, prod)\"\n  type        = string\n  default     = \"dev\"\n}\n\n# main.tf\nterraform {\n  required_providers {\n    local = {\n      source  = \"hashicorp/local\"\n      version = \"~&gt; 2.0\"\n    }\n  }\n}\n\n# Project structure\nresource \"local_file\" \"project_structure\" {\n  for_each = toset([\n    \"src/\",\n    \"config/\",\n    \"scripts/\",\n    \"docs/\"\n  ])\n\n  content  = \"\"\n  filename = \"${path.module}/${var.project_name}/${each.key}/.gitkeep\"\n}\n\n# Application configuration\nresource \"local_file\" \"app_config\" {\n  content = jsonencode({\n    name        = var.project_name\n    environment = var.environment\n    version     = \"1.0.0\"\n    database = {\n      host = \"localhost\"\n      port = 5432\n      name = \"${var.project_name}_${var.environment}\"\n    }\n    cache = {\n      provider = \"redis\"\n      host     = \"localhost\"\n      port     = 6379\n    }\n    logging = {\n      level = var.environment == \"prod\" ? \"warn\" : \"debug\"\n      file  = \"/var/log/${var.project_name}.log\"\n    }\n  })\n  filename = \"${path.module}/${var.project_name}/config/app.json\"\n}\n\n# Environment-specific configuration\nresource \"local_file\" \"env_config\" {\n  content = templatefile(\"${path.module}/templates/env.tpl\", {\n    project_name = var.project_name\n    environment  = var.environment\n    debug_mode   = var.environment != \"prod\"\n  })\n  filename = \"${path.module}/${var.project_name}/.env.${var.environment}\"\n}\n\n# Docker Compose file\nresource \"local_file\" \"docker_compose\" {\n  content = templatefile(\"${path.module}/templates/docker-compose.yml.tpl\", {\n    project_name = var.project_name\n    environment  = var.environment\n  })\n  filename = \"${path.module}/${var.project_name}/docker-compose.yml\"\n}\n\n# outputs.tf\noutput \"project_path\" {\n  description = \"Path to the project directory\"\n  value       = \"${path.module}/${var.project_name}\"\n}\n\noutput \"config_files\" {\n  description = \"List of created configuration files\"\n  value = [\n    local_file.app_config.filename,\n    local_file.env_config.filename,\n    local_file.docker_compose.filename\n  ]\n}\n</code></pre> <p>Template failid:</p> YAML<pre><code># templates/docker-compose.yml.tpl\nversion: '3.8'\nservices:\n  app:\n    build: .\n    ports:\n      - \"3000:3000\"\n    environment:\n      - NODE_ENV=${environment}\n      - PROJECT_NAME=${project_name}\n    volumes:\n      - ./src:/app/src\n\n  database:\n    image: postgres:13\n    environment:\n      - POSTGRES_DB=${project_name}_${environment}\n      - POSTGRES_USER=app_user\n      - POSTGRES_PASSWORD=development_password\n    ports:\n      - \"5432:5432\"\n</code></pre>"},{"location":"terraform_basics/lecture/#for_each-ja-count-kasutamine","title":"For_each ja Count kasutamine","text":"Terraform<pre><code># Multiple environments\nvariable \"environments\" {\n  type = map(object({\n    debug_enabled = bool\n    replicas     = number\n  }))\n  default = {\n    dev = {\n      debug_enabled = true\n      replicas     = 1\n    }\n    staging = {\n      debug_enabled = false\n      replicas     = 2\n    }\n    prod = {\n      debug_enabled = false\n      replicas     = 3\n    }\n  }\n}\n\nresource \"local_file\" \"env_configs\" {\n  for_each = var.environments\n\n  content = jsonencode({\n    environment   = each.key\n    debug_enabled = each.value.debug_enabled\n    replicas      = each.value.replicas\n    timestamp     = timestamp()\n  })\n  filename = \"${path.module}/configs/${each.key}.json\"\n}\n\n# Conditional resource creation\nresource \"local_file\" \"debug_config\" {\n  count = var.environment == \"dev\" ? 1 : 0\n\n  content  = \"Debug configuration for development\"\n  filename = \"${path.module}/debug.conf\"\n}\n</code></pre>"},{"location":"terraform_basics/lecture/#6-terraform-kasud-ja-workflow","title":"6. Terraform K\u00e4sud ja Workflow","text":""},{"location":"terraform_basics/lecture/#pohilised-terraform-kasud","title":"P\u00f5hilised Terraform K\u00e4sud","text":"Bash<pre><code># Projekti initsialiseerimine\nterraform init\n\n# Konfiguratsiooni valideerimine\nterraform validate\n\n# Formattimine\nterraform fmt\n\n# Planeerimine (kuiv k\u00e4ivitus)\nterraform plan\n\n# Rakendamine\nterraform apply\n\n# Ressursside kustutamine\nterraform destroy\n\n# State'i haldamine\nterraform state list\nterraform state show resource_name\n</code></pre>"},{"location":"terraform_basics/lecture/#terraform-workflow-naide","title":"Terraform Workflow N\u00e4ide","text":"Bash<pre><code># 1. Loo uus Terraform projekt\nmkdir my-terraform-project\ncd my-terraform-project\n\n# 2. Loo main.tf fail\ncat &gt; main.tf &lt;&lt; EOF\nterraform {\n  required_providers {\n    local = {\n      source  = \"hashicorp/local\"\n      version = \"~&gt; 2.0\"\n    }\n  }\n}\n\nresource \"local_file\" \"hello\" {\n  content  = \"Hello from Terraform!\"\n  filename = \"hello.txt\"\n}\nEOF\n\n# 3. Initialiseeri projekt\nterraform init\n\n# 4. Valideeri konfiguratsioon\nterraform validate\n\n# 5. Planeeri muudatused\nterraform plan\n\n# 6. Rakenda muudatused\nterraform apply\n\n# 7. Kontrolli tulemust\ncat hello.txt\n\n# 8. Kustuta ressursid\nterraform destroy\n</code></pre>"},{"location":"terraform_basics/lecture/#kokkuvote-ja-jargmised-sammud","title":"Kokkuv\u00f5te ja J\u00e4rgmised Sammud","text":""},{"location":"terraform_basics/lecture/#mida-oppisime-tana","title":"Mida \u00f5ppisime t\u00e4na?","text":"<ol> <li>Infrastructure as Code kontseptsiooni - miks infrastruktuuri koodina haldamine on kasulik</li> <li>Terraform'i p\u00f5hialused - kuidas see t\u00f6\u00f6tab ja miks seda kasutada</li> <li>HCL s\u00fcntaksi - resources, variables, outputs, data sources</li> <li>Provider'ite kasutamist - kuidas erinevate teenustega suhelda</li> <li>State management'i - kuidas Terraform j\u00e4lgib infrastruktuuri</li> </ol>"},{"location":"terraform_basics/lecture/#jargmises-laboris","title":"J\u00e4rgmises laboris","text":"<p>Teeme praktilisi harjutusi: - Loome kohaliku arenduskeskkonna - Kasutame muutujaid ja template'e - Harjutame state'i haldamist - T\u00f6\u00f6tame meeskonnaga</p>"},{"location":"terraform_basics/lecture/#parimad-praktikad","title":"Parimad Praktikad","text":"<p>1. Kood organisatsioon: - Kasutage mooduleid - Eraldage keskkonnad - J\u00e4rgige nimede konventsioone</p> <p>2. State'i turvalisus: - Kasutage remote state'i - Lubage state locking - K\u00e4sitlege sensitive andmeid \u00f5igesti</p> <p>3. Meeskonnat\u00f6\u00f6: - Kasutage versioonihalust - Tehke code review'd - Dokumenteerige muudatused</p> <p>Infrastructure as Code ei ole ainult t\u00f6\u00f6riist - see on m\u00f5tteviis. See muudab infrastruktuuri haldamise reproducible, scalable ja maintainable protsessiks.</p> <p>J\u00e4rgmises osas teeme praktilist t\u00f6\u00f6d - deploy'ime tervikliku arenduskeskkonna Terraform'iga!</p>"},{"location":"terraform_basics/lecture/#viited-ja-dokumentatsioon","title":"Viited ja Dokumentatsioon","text":""},{"location":"terraform_basics/lecture/#ametlik-dokumentatsioon","title":"Ametlik Dokumentatsioon","text":"<ul> <li>Terraform Official Documentation - t\u00e4ielik dokumentatsioon</li> <li>HCL Language Guide - HCL s\u00fcntaksi juhend</li> <li>Terraform Registry - provider'id ja moodulid</li> </ul>"},{"location":"terraform_basics/lecture/#providerite-dokumentatsioon","title":"Provider'ite Dokumentatsioon","text":"<ul> <li>Local Provider - kohalike ressursside haldamine</li> <li>Random Provider - juhuslike v\u00e4\u00e4rtuste genereerimine</li> </ul>"},{"location":"terraform_basics/lecture/#best-practices","title":"Best Practices","text":"<ul> <li>Terraform Best Practices - soovitatud praktikad</li> <li>Terraform Style Guide - koodi stiili juhend</li> </ul>"}]}