name: Ansible Autograding

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install Ansible
      run: |
        python -m pip install --upgrade pip
        pip install ansible ansible-lint
    
    - name: Install Docker (for testing)
      run: |
        sudo apt-get update
        sudo apt-get install -y docker.io docker-compose
        sudo systemctl start docker
    
    - name: Ansible Lint
      run: |
        cd ansible
        ansible-lint site.yml || true
    
    - name: Test with Molecule
      run: |
        pip install molecule molecule-docker
        cd ansible/roles/nginx
        molecule test || true
    
    - name: Run Ansible Playbook (Docker test)
      run: |
        cd ansible
        # Create test inventory
        echo "[webservers]" > inventory/test
        echo "localhost ansible_connection=local" >> inventory/test
        
        # Syntax check
        ansible-playbook site.yml -i inventory/test --syntax-check
        
        # Dry run
        ansible-playbook site.yml -i inventory/test --check
    
    - name: Test Infrastructure
      run: |
        # Start test containers
        docker run -d --name test-nginx -p 8080:80 -p 8443:443 nginx:latest
        docker run -d --name test-postgres -e POSTGRES_PASSWORD=test postgres:latest
        
        sleep 10
        
        # Test NGINX
        curl -f http://localhost:8080 || echo "HTTP test failed"
        
        # Test PostgreSQL
        docker exec test-postgres pg_isready || echo "PostgreSQL test failed"
        
        # Cleanup
        docker stop test-nginx test-postgres
        docker rm test-nginx test-postgres
    
    - name: Calculate Score
      id: score
      run: |
        SCORE=0
        
        # Check if files exist (20 points)
        if [ -f "ansible/roles/nginx/tasks/main.yml" ]; then
          SCORE=$((SCORE + 10))
        fi
        if [ -f "ansible/roles/postgresql/tasks/main.yml" ]; then
          SCORE=$((SCORE + 10))
        fi
        
        # Check for SSL tasks (20 points)
        if grep -q "ssl\|certificate" ansible/roles/nginx/tasks/main.yml; then
          SCORE=$((SCORE + 20))
        fi
        
        # Check for database tasks (20 points)
        if grep -q "postgresql_db\|webapp_db" ansible/roles/postgresql/tasks/main.yml; then
          SCORE=$((SCORE + 20))
        fi
        
        # Check for templates (20 points)
        if [ -d "ansible/roles/nginx/templates" ]; then
          SCORE=$((SCORE + 10))
        fi
        if [ -f "ansible/roles/nginx/templates/nginx.conf.j2" ]; then
          SCORE=$((SCORE + 10))
        fi
        
        # Check for handlers (10 points)
        if [ -f "ansible/roles/nginx/handlers/main.yml" ]; then
          SCORE=$((SCORE + 10))
        fi
        
        # Check for variables (10 points)
        if [ -f "ansible/group_vars/all.yml" ]; then
          SCORE=$((SCORE + 10))
        fi
        
        echo "Score: $SCORE/100"
        echo "::set-output name=score::$SCORE"
    
    - name: Post Results
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const score = '${{ steps.score.outputs.score }}' || '0';
          const comment = `
          ## ðŸ“Š Automaatse hindamise tulemus
          
          **Skoor:** ${score}/100
          
          ### âœ… Kontrollitud:
          - Ansible struktuur
          - SSL konfiguratsioon  
          - PostgreSQL seadistus
          - Template'id ja muutujad
          
          ### ðŸ’¡ JÃ¤rgmised sammud:
          ${score < 60 ? '- Lisa puuduvad komponendid\n- Kontrolli SSL seadistust\n- Vaata nÃ¤idiskoodi README failist' : 
            score < 80 ? '- Lisa handlers ja variables\n- TÃ¤ienda dokumentatsiooni' :
            'SuurepÃ¤rane tÃ¶Ã¶! Proovi bonus Ã¼lesandeid.'}
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          }).catch(() => {
            console.log('Could not create comment');
          });
