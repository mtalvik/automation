name: Autograding

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run tests
      run: |
        pytest test_organizer.py -v --cov=organizer --cov-report=term-missing
    
    - name: Check code quality
      run: |
        pip install pylint black
        black --check *.py || true
        pylint organizer.py --exit-zero
    
    - name: Calculate score
      id: score
      run: |
        # Run tests and capture results
        pytest test_organizer.py --json-report --json-report-file=report.json || true
        
        # Calculate score based on test results
        python -c "
        import json
        try:
            with open('report.json') as f:
                report = json.load(f)
            total = report['summary']['total']
            passed = report['summary']['passed']
            score = int((passed / total) * 100) if total > 0 else 0
            print(f'Score: {score}/100')
            print(f'::set-output name=score::{score}')
        except:
            print('Score: 0/100')
            print('::set-output name=score::0')
        "
    
    - name: Create badge
      uses: schneegans/dynamic-badges-action@v1.6.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: YOUR_GIST_ID
        filename: file-organizer-badge.json
        label: Score
        message: ${{ steps.score.outputs.score }}%
        color: ${{ steps.score.outputs.score > 80 && 'success' || steps.score.outputs.score > 60 && 'yellow' || 'critical' }}
    
    - name: Post results to leaderboard
      if: github.event_name == 'push'
      run: |
        # Update leaderboard (requires API setup)
        curl -X POST https://api.github.com/repos/${{ github.repository }}/dispatches \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d '{
            "event_type": "update_leaderboard",
            "client_payload": {
              "student": "${{ github.actor }}",
              "assignment": "file-organizer",
              "score": ${{ steps.score.outputs.score }}
            }
          }'
